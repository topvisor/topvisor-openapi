/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Экспорт запросов по доменам
         *
         *     Работает только с отчетами по URL по списку доменов с оплаченной схожестью
         *
         *     @see jetbrains://idea/navigate/reference?project=topvisor-com&fqn=Services\Competitors_2\Methods\Export\ByLeaders\Table\Get */
        "Competitors_2.Methods.Export.ByLeaders.Table.Get": {
            output: import('../../../../Types/Export/Table/Output.ts').components['schemas']['Competitors_2.Types.Export.Table.Output'];
            /** @default export_byLeaders_table */
            func?: string;
            deleted?: boolean | null;
            by_type: import('../../../../Types/Report/ByType.ts').components['schemas']['Competitors_2.Types.Report.ByType'];
            /** Индекс региона (не путать с ключом региона) */
            region_index: number;
            /** Ключевая фраза (или ее часть) / url */
            query: string;
            type: import('../../../../Types/Report/Type.ts').components['schemas']['Competitors_2.Types.Report.Type'];
            /** Представление отчета */
            view: string;
            /** Дата проверки */
            date: import('../../../../../TV/API/Types/Date.ts').components['schemas']['TV.API.Types.Date'];
            /** Ключевая фраза (или ее часть) / url конкурента (для сравнения запросов) */
            query_vs?: string | null;
            /** Тип связи запросов между конкурентами */
            rel_vs?: string | null;
            /** Делать ли проверку на наличие пути в URL (используется при (by_type = url)) */
            strict_query?: boolean;
            /** Минимальная схожесть */
            intersection?: number | null;
            /** Обработчик
             *
             *     Для внутреннего использования
             *
             *     Возможные значения:
             *     - handle
             *     - name */
            handler?: unknown;
            fields?: import('../../../../../TV/API/Params/FieldsTrait.ts').components['schemas']['TV.API.Params.FieldsTrait']['fields'];
            orders?: import('../../../../../TV/API/Params/OrdersTrait.ts').components['schemas']['TV.API.Params.OrdersTrait']['orders'];
            filters?: import('../../../../../TV/API/Params/FiltersTrait.ts').components['schemas']['TV.API.Params.FiltersTrait']['filters'];
            id?: import('../../../../../TV/API/Params/FiltersTrait.ts').components['schemas']['TV.API.Params.FiltersTrait']['id'];
            limit?: import('../../../../../TV/API/Params/LimitTrait.ts').components['schemas']['TV.API.Params.LimitTrait']['limit'];
            offset?: import('../../../../../TV/API/Params/OffsetTrait.ts').components['schemas']['TV.API.Params.OffsetTrait']['offset'];
            fetch_style?: import('../../../../../TV/API/Params/FetchStyleTrait.ts').components['schemas']['TV.API.Params.FetchStyleTrait']['fetch_style'];
        };
        "Competitors_2.Methods.Export.ByLeaders.Table.Get.Exec": Record<string, never>;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
