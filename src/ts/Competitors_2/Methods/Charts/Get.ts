/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Получение данных для графика отчета
         *
         *     @see jetbrains://idea/navigate/reference?project=topvisor-com&fqn=Services\Competitors_2\Methods\Charts\Get */
        "Competitors_2.Methods.Charts.Get": {
            by_type: import('../../Types/Report/ByType.ts').components['schemas']['Competitors_2.Types.Report.ByType'];
            /** Индекс региона (не путать с ключом региона) */
            region_index: number;
            /** Ключевая фраза (или ее часть) / url */
            query: string;
            type: import('../../Types/Report/Type.ts').components['schemas']['Competitors_2.Types.Report.Type'];
            /** Представление отчета */
            view: string;
            /** Тип графика */
            chart_type: string;
            /** Дата проверки */
            date: import('../../../TV/API/Types/Date.ts').components['schemas']['TV.API.Types.Date'];
            /** Ключевая фраза (или ее часть) / url конкурента (для сравнения запросов) */
            query_vs?: string | null;
            /** Делать ли проверку на наоичие пути в URL (используется при (by_type = url)) */
            strict_query?: boolean;
            /** Минимальная схожесть */
            intersection?: number | null;
            /**
             * Название функции
             * @default charts
             */
            func?: string;
            /** Домены */
            domains?: import('../../../TV/API/Types/UrlShortUTFArray.ts').components['schemas']['TV.API.Types.UrlShortUTFArray'] | null;
            /** Urls адреса */
            urls?: import('../../../TV/API/Types/UrlUTFArray.ts').components['schemas']['TV.API.Types.UrlUTFArray'] | null;
            /** Поисковые запросы */
            keywords_names?: unknown[] | null;
            fields?: import('../../../TV/API/Params/FieldsTrait.ts').components['schemas']['TV.API.Params.FieldsTrait']['fields'];
            orders?: import('../../../TV/API/Params/OrdersTrait.ts').components['schemas']['TV.API.Params.OrdersTrait']['orders'];
            filters?: import('../../../TV/API/Params/FiltersTrait.ts').components['schemas']['TV.API.Params.FiltersTrait']['filters'];
            id?: import('../../../TV/API/Params/FiltersTrait.ts').components['schemas']['TV.API.Params.FiltersTrait']['id'];
            limit?: import('../../../TV/API/Params/LimitTrait.ts').components['schemas']['TV.API.Params.LimitTrait']['limit'];
            offset?: import('../../../TV/API/Params/OffsetTrait.ts').components['schemas']['TV.API.Params.OffsetTrait']['offset'];
            fetch_style?: import('../../../TV/API/Params/FetchStyleTrait.ts').components['schemas']['TV.API.Params.FetchStyleTrait']['fetch_style'];
        };
        "Competitors_2.Methods.Charts.Get.Exec": unknown[] | null;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
