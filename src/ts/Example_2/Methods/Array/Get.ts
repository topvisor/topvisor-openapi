/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Метод с примерами параметров типа Enum */
        "Example_2.Methods.Array.Get": {
            ints: components["schemas"]["TV.API.Types.IntArray"];
            strings: components["schemas"]["TV.API.Types.StringArray"];
            booleans: components["schemas"]["TV.API.Types.BoolArray"];
            enum_numbers: components["schemas"]["Example_2.Types.EnumNumberArray"];
        };
        /**
         * Тип массива: int
         *
         *     Принимает: Любые целые числа и числа в строках
         * @description @extends AbstractTypedArray<int>
         *     @method int[] getValues()
         *     @method int current()
         */
        "TV.API.Types.IntArray": number[];
        /**
         * Тип массива: string[]
         * @description @extends AbstractTypedArray<string>
         *     @method string[] getValues()
         *     @method string current()
         */
        "TV.API.Types.StringArray": string[];
        /**
         * Тип массива: boolean
         *
         *     Принимает: 0|1|false|true
         * @description @extends AbstractTypedArray<boolean>
         *     @method bool[] getValues()
         *     @method bool current()
         */
        "TV.API.Types.BoolArray": boolean[];
        /** @enum {integer} */
        "Example_2.Types.Number": 1 | 2 | 3;
        /** Тип: enum
         *
         *     Принимает: 0|1|false|true
         *
         *     Хранит: false|true */
        "Example_2.Types.EnumNumberArray": components["schemas"]["Example_2.Types.Number"][];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
