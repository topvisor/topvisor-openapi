/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "Models.Audit.Pages": {
            dummy_opener_summary_page?: any;
            "COUNT(*)"?: any;
            "HTTP_CODES_HUNDREDS()"?: unknown[] | null;
            check_id?: any;
            url_id?: any;
            url?: any;
            time_parse?: any;
            http_codes?: unknown[] | null;
            last_http_code?: any;
            tls_version?: any;
            redirects?: unknown[] | null;
            meta_robots_none?: any;
            x_robots_tag_none?: any;
            meta_robots_noindex?: any;
            x_robots_tag_noindex?: any;
            meta_robots_nofollow?: any;
            x_robots_tag_nofollow?: any;
            canonical?: any;
            canonical_count?: any;
            http_resources_count?: any;
            html_lang?: any;
            hreflang?: any;
            rdfa?: any;
            json_ld?: any;
            microdata?: any;
            alternates?: any;
            refresh?: any;
            title?: any;
            description?: any;
            h1?: any;
            links_count?: any;
            images_count?: any;
            js_count?: any;
            css_count?: any;
            lastmod?: any;
            lastmod_since?: any;
            sitemap_xml_mention?: any;
            robots_txt_mention?: any;
            robots_txt_blocked?: any;
            og_title?: any;
            og_description?: any;
            og_image?: any;
            og_url?: any;
            og_type?: any;
            count_errors?: any;
            count_warnings?: any;
            count_problems?: any;
            broken?: any;
            ttfb?: any;
            compression?: any;
            cacheable?: any;
            cache_type?: any;
            cache_time?: any;
            cache_validator?: any;
            search?: any;
            snippet_search?: any;
            title_dbl?: any;
            description_dbl?: any;
            lcp?: any;
            fid?: any;
            inp?: any;
            cls?: any;
            fcp?: any;
            si?: any;
            tti?: any;
            tbt?: any;
            cwv_performance?: any;
            backlinks_inner_count?: any;
            text_length?: any;
            check_http_code_200?: any;
            check_redirects_not_exists?: any;
            check_redirects_many_not_exists?: any;
            check_ttfb_max?: any;
            check_cacheable?: any;
            check_robots_txt_allowed?: any;
            check_sitemap_xml_exists?: any;
            check_sitemap_xml_exists_with_canonical?: any;
            check_sitemap_included_none_blocked?: any;
            check_noindex_off?: any;
            check_nofollow_off?: any;
            check_title_exists?: any;
            check_title_length_max?: any;
            check_title_is_unique?: any;
            check_description_exists?: any;
            check_description_is_unique?: any;
            check_description_length_min?: any;
            check_description_length_max?: any;
            check_h1_exists?: any;
            check_html_lang_exists?: any;
            check_url_length?: any;
            check_canonical_exists?: any;
            check_alternate?: any;
            check_http_resources_count?: any;
            check_links_exists?: any;
            check_refresh_not_exists?: any;
            check_compression_exists?: any;
            check_schema_exists?: any;
            check_og_title_exists?: any;
            check_og_description_exists?: any;
            check_og_image_exists?: any;
            check_og_url_exists?: any;
            check_og_url_canonical?: any;
            check_lcp_max?: any;
            check_fid_max?: any;
            check_inp_max?: any;
            check_cls_max?: any;
            check_fcp_max?: any;
            check_si_max?: any;
            check_tbt_max?: any;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
