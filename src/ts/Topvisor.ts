/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {  
    /** Фиксация события test */
    "/add/analytics_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAnalytics2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление примечания */
    "/add/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление примечания */
    "/del/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование примечания */
    "/edit/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение примечаний */
    "/get/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение заархивированного приложения */
    "/get/app_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление комментария */
    "/add/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление комментария
     *
     *     Удалять комментарии можно только в течение ограниченного времени
     *
     *     Админы могут удалять комментарии в любое время */
    "/del/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение комментария
     *
     *     Изменять комментарий можно только в течение ограниченного времени */
    "/edit/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение комментариев
     *
     *     Возвращает набор комментариев со всеми подкомменатриями, limit, offset не виляют на получение вложенных комментариев */
    "/get/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание платежки и переход к оплате
     *
     *     Возвращает id платежа, если указан параметр $return_id = true
     *
     *     Производит редирект, если настроена форма оплаты на стороне платежной системы
     *
     *     Возвращает информацию о платеже, если ожидается вывод формы оплаты на сайте
     *
     *     При ошибке производит редирект на страницу с инофрмацией об ошибке */
    "/add/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка платежей */
    "/get/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Генерация QR кода по тексту
     *
     *     Возвращает изображение в формате data:image/png;base64 */
    "/get/qr_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetQr2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление настроек автоопераций */
    "/del/recurring_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelRecurring2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка рекуррентного платежа */
    "/edit/recurring_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditRecurring2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сохранение списка тегов */
    "/edit/tags_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTags2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка тегов */
    "/get/tags_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTags2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление url */
    "/add/urls_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUrls2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение urls */
    "/edit/urls_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUrls2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка urls проекта */
    "/get/urls_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUrls2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Оставление отзыва */
    "/add/votes_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddVotes2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение своих отзывов */
    "/get/votes_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetVotes2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractregular/admin_2/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractregularAdmin2Actions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение доступа к акаунту пользователя в режиме "призрак" */
    "/get/admin_2/ghost/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Ghost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение записей словаря */
    "/get/admin_2/i18n/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2I18n"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/add/admin_2/informer/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2Informer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сохранение текстового файла лога */
    "/edit/admin_2/logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2Logs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Загрузка текстового файла лога */
    "/get/admin_2/logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Logs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/admin_2/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Ranks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление сотрудника */
    "/add/admin_2/staff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2Staff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit/admin_2/staff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2Staff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение персонала, объект admin_staff */
    "/get/admin_2/staff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Staff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение даты следующего списания по тарифу */
    "/edit/admin_2/tariffChangeExpire/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2TariffChangeExpire"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Поиск HTML шаблонов */
    "/get/admin_2/tpl/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Tpl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование пользователей, объект admin_users */
    "/edit/admin_2/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2Users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение пользователей */
    "/get/admin_2/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/admin_2/votes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Votes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение всех своих примечаний по всем проектам и сервисам */
    "/get/annotations_2/my/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAnnotations2My"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных подтверждения
     *
     *     Возвращает результат подтверждения в виде
     *     массива с сообщением (acceptAction),
     *     логической переменной (acceptEmail),
     *     null при неправильно введенном типе */
    "/get/app_2/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2Actions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение текста политики конфиденциальности */
    "/get/app_2/privacy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2Privacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение количества настроенных URL */
    "/get/audit_2/countUrls/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2CountUrls"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение отчета по проверке индексации
     *
     *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
    "/get/audit_2/indexing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2Indexing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Применение наастроек Анализа сайта */
    "/edit/audit_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение настроек аудита */
    "/get/audit_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение результатов проверок радара
     *
     *     Отчет генерируется на основе объектов urls
     *
     *     Необходимо указать либо check_id1 и check_id2, либо checks_ids (вместе указывать нельзя) */
    "/get/audit_2/watcher/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2Watcher"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных банка по БИК */
    "/get/bank_2/bank/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2Bank"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение истории транзакций */
    "/get/bank_2/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2History"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Предоставление инфомации по счету */
    "/get/bank_2/info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2Info"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавиление реквизитов */
    "/add/bank_2/requisites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddBank2Requisites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Закрытие договора (оферту закрыть невозможно) */
    "/del/bank_2/requisites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelBank2Requisites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение реквизитов */
    "/edit/bank_2/requisites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBank2Requisites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка договоров */
    "/get/bank_2/requisites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2Requisites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных юридического лица по ИНН */
    "/get/bank_2/ur/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2Ur"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение комментариев автора. Без вложенности */
    "/get/comments_2/byAuthor/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetComments2ByAuthor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование статуса лайка для комментария
     *
     *     Возвращает результат редактирования статуса лайка */
    "/edit/comments_2/like/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditComments2Like"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить настройки автора */
    "/edit/content_2/authors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2Authors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных об авторе */
    "/get/content_2/authors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Authors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstactregular/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstactregularContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление правила редиректа (для админов) */
    "/add/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/del/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение правила редиректа (для админов) */
    "/edit/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка правил (для админов) */
    "/get/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение RSS раздела сайта
     *
     *     Для выборки страниц используется модель: Pages */
    "/get/content_2/rss/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Rss"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение xml карты сайта */
    "/get/content_2/sitemap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Sitemap"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление задачи cron */
    "/add/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление задачи cron */
    "/del/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение задачи cron */
    "/edit/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение задач cron */
    "/get/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка имен сервисов, в которых есть команды cron */
    "/get/cron_2/services/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetCron2Services"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Enum */
    "/get/example_2/array/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Array"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение текущего времени */
    "/get/example_2/custom/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Custom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Enum */
    "/get/example_2/enum/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Enum"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Object */
    "/get/example_2/object/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Object"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка проектов */
    "/get/example_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractregular/keywords_2/collect/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractregularKeywords2Collect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка запросов проекта */
    "/get/keywords_2/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2Keywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение частоты проекта или одной группы */
    "/get/keywords_2/volumes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2Volumes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Создать Open API схемы и скачать в zip
     *
     *     В результате вернет zip файл в потоке вывода
     * @description @see https://editor.swagger.io/ Редактор Open API
     */
    "/get/openapi_2/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetOpenapi2Download"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение компании пользователя, через которых, были совершены платежи */
    "/get/payments_2/companies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2Companies"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Подписание контракта (только для админов) */
    "/edit/payments_2/contractSign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2ContractSign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение платежных реквизитов тарифа */
    "/edit/payments_2/nextRequisitesId/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2NextRequisitesId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка заявки на подключение Тинькофф Бизнес */
    "/add/payments_2/urTinkoffCreateApplication/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPayments2UrTinkoffCreateApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Валидация домена для подтверждения оплаты Apple Pay (system = card_ap) */
    "/get/payments_2/validateMerchantCardAP/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2ValidateMerchantCardAP"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление ПС */
    "/add/positions_2/searchers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPositions2Searchers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление ПС */
    "/del/positions_2/searchers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelPositions2Searchers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка общих настроек проверки позиций проекта */
    "/edit/positions_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление графика */
    "/add/projects_2/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2Analytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление графика */
    "/del/projects_2/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Analytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка графика */
    "/edit/projects_2/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2Analytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка графиков */
    "/get/projects_2/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Analytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление конкурента
     *
     *     Ограничения: не более Projects_2\Competitors::MAX_COMPETITORS_PER_PROJECT конкурентов в одном проекте */
    "/add/projects_2/competitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2Competitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление конкурентов
     *
     *     Обязательный параметр или ids или urls */
    "/del/projects_2/competitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Competitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка конкурентов */
    "/get/projects_2/competitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Competitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление папки */
    "/add/projects_2/folders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2Folders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление папок */
    "/del/projects_2/folders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Folders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка папок */
    "/get/projects_2/folders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Folders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление проекта */
    "/add/projects_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление проектов */
    "/del/projects_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка проектов */
    "/get/projects_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление прав у пользователя */
    "/del/projects_2/rights/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Rights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение прав на проект */
    "/edit/projects_2/rights/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2Rights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о настройке прав и смене владельца */
    "/get/projects_2/rights/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Rights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о домене и SSL сертификате
     *     Возвращает объект с параметрами:
     *     - domain_expire
     *     - ssl_expire */
    "/get/projects_2/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Status"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка задач */
    "/get/projects_2/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Tasks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удалить привязанную карту (system = card) */
    "/del/recurring_2/recurringCard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelRecurring2RecurringCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение привязанных карт пользователя */
    "/get/recurring_2/recurringCard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetRecurring2RecurringCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Загрузка файла на сервер
     *
     *     Процесс создания сообщения в тикет не завершен */
    "/add/tickets_2/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2Files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление временных файлов для тикета
     *
     *     Процесс создания поста не завершен */
    "/del/tickets_2/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelTickets2Files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка временных файлов, загруженных для тикета
     *
     *     Процесс создания поста не завершен */
    "/get/tickets_2/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2Files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление сообщения к тикиту */
    "/add/tickets_2/messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2Messages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Дать оценку тикету */
    "/edit/tickets_2/rate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2Rate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание тикета */
    "/add/tickets_2/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2Tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование тикета */
    "/edit/tickets_2/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2Tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка тикетов с сообщениями */
    "/get/tickets_2/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2Tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт urls в определенном формате */
    "/get/urls_2/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUrls2Export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Импортирование urls
     *
     *     Доступные поля для импорта:
     *     - url
     *     - sitemap
     *     - audit
     *     - indexing
     *     - watcher
     *     - tags */
    "/add/urls_2/import/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUrls2Import"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение тегов */
    "/edit/urls_2/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUrls2Tags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление комментария к отзыву
     *
     *     Оставить комментарий можно в течение часа поосле выставления оценки */
    "/edit/votes_2/comment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditVotes2Comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение параметров контрагента */
    "/edit/admin_2/accounting/counteragents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2AccountingCounteragents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение контрагента */
    "/get/admin_2/accounting/counteragents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingCounteragents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit/admin_2/accounting/group/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2AccountingGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение групп */
    "/get/admin_2/accounting/group/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление счета на оплату */
    "/add/admin_2/accounting/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2AccountingInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отмена отправки счета. Разрешено только для счетов со статусом pending или sending */
    "/del/admin_2/accounting/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2AccountingInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение счетов на оплату */
    "/get/admin_2/accounting/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение внутренних операций */
    "/get/admin_2/accounting/operations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingOperations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание и проведение транзакции */
    "/edit/admin_2/actions/bank/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBank"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отмена проведения счета */
    "/del/admin_2/actions/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2ActionsPayments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Проведение счета */
    "/edit/admin_2/actions/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsPayments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Востановление удаленной проверки */
    "/edit/admin_2/actions/positions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsPositions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Востановление удаленного проекта */
    "/edit/admin_2/actions/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsProjects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сбор статистики и трафика */
    "/get/admin_2/actions/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2ActionsProjects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление бота в телеграм канал */
    "/add/admin_2/actions/telegram/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2ActionsTelegram"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение общей статистики по реферальной программе */
    "/get/admin_2/affiliate/referralProgramStats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferralProgramStats"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки числа рефералов по своему уровню */
    "/get/admin_2/affiliate/referralsByLevel/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferralsByLevel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки по новым рефералам */
    "/get/admin_2/affiliate/referrals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferrals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки числа партнеров по числу рефералов */
    "/get/admin_2/affiliate/referrersByReferrals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferrersByReferrals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки по новым партнерам */
    "/get/admin_2/affiliate/referrers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferrers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение партнеров c кол-вом рефералов */
    "/get/admin_2/affiliate/referrersWithReferrals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferrersWithReferrals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение активности пользователей по статусам активности
     *     статусы активности:
     *            1. Активный - клиент, который пополнял баланс в сервисе хотя бы раз. При этом трата средств в течение месяца не мнее 100 рублей (или $5).
     *            2. Активный (новый) - в эту категорию попадают клиенты, которые первый раз перешли в статус "Активного клиента".
     *            3. Активный (постоянный) - в эту категорию попадют клиенты, которые не меняли свой статус активности за последний месяц
     *            4. Активный (вернувшийся) - в эту категорию попадют клиенты, которые вернули себе статус "Активный клиент".
     *            5. Стал не активным - в эту категорию попадют клиенты, которые потеряли статус "Активного клиента" и на протяжении 2 месяцев не возвращали
     *     себе этот статус. */
    "/get/admin_2/analytics/activity/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsActivity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа активных пользователей */
    "/get/admin_2/analytics/countOnlineUsers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsCountOnlineUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение мероприятий */
    "/get/admin_2/analytics/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsEvents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение суммы оплат за период */
    "/get/admin_2/analytics/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPayments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/admin_2/analytics/services/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsServices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики */
    "/get/admin_2/analytics/statistics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsStatistics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractticketsstats/admin_2/analytics/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractticketsstatsAdmin2AnalyticsTickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение тикетов */
    "/get/admin_2/analytics/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение категорий словаря */
    "/get/admin_2/i18n/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2I18nCategories"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных из системного лога */
    "/get/admin_2/logs/system/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2LogsSystem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/admin_2/ranks/activations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2RanksActivations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Рейтинг по сообщениям в слеке за предыдущий месяц */
    "/get/admin_2/slack/rate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2SlackRate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка доступа */
    "/edit/admin_2/staff/access/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2StaffAccess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение из бд данные сотрудников указанного поста */
    "/get/admin_2/staff/byPost/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2StaffByPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Печать договора */
    "/get/admin_2/staff/contractPrint/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2StaffContractPrint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/admin_2/staff/posts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Получение возможных posts */
        post: operations["GetAdmin2StaffPosts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление отпуска для сотрудника */
    "/add/admin_2/staff/vacation/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2StaffVacation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление данных об отпуске */
    "/del/admin_2/staff/vacation/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2StaffVacation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Печать заявления на отпуск */
    "/get/admin_2/staff/vacationPrint/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2StaffVacationPrint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение схему HTML шаблона */
    "/get/admin_2/tpl/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2TplSchema"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление промокоды к достижению */
    "/add/admin_2/users/promocodes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2UsersPromocodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение промокодов
     *
     *     В params хранится строка в формате:
     *     - {{ rank_id }}
     *     - {{ rank_id }},single_code - для многоразового кода */
    "/get/admin_2/users/promocodes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersPromocodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление достижение */
    "/add/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Измение достижение */
    "/edit/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение достижения */
    "/get/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение сводки анализа сайта
     * @deprecated
     */
    "/get/audit_2/audit/browse/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditBrowse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение общей информации о проверках
     *     - только для проверки, которая не завершена
     *     - в ответе будут заменены значения кодов ответа на текущие: count_000, count_1xx, count_2xx, count_3xx, count_4xx, count_5xx
     *     - в ответе будет заменено значение count_pages и count_all на текущие
     *     - в ответ будет добавлены значения robot_step и robot_count_tasks_allм */
    "/get/audit_2/audit/checks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditChecks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных css */
    "/get/audit_2/audit/css/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditCss"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт результатов проверки файла */
    "/get/audit_2/audit/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных изображений */
    "/get/audit_2/audit/images/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditImages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных js */
    "/get/audit_2/audit/js/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditJs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных ссылок */
    "/get/audit_2/audit/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных проверенных ресурсов */
    "/get/audit_2/audit/log/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLog"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение страниц, по которым был выполнен аудит */
    "/get/audit_2/audit/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditPages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки о выполненном аудите */
    "/get/audit_2/audit/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки страницы */
    "/get/audit_2/audit/summaryPage/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditSummaryPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт результатов индексации
     *
     *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
    "/get/audit_2/indexing/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание гостевой ссылки на просмотр позиций
     *
     *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
    "/get/audit_2/indexing/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки индексации */
    "/get/audit_2/indexing/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Построение отчета по одному URL
     *
     *     Отличия от get/audit_2/watcher:
     *     - отчет генерируется на основе объекта watcher_results, а не urls
     *     - параметры выбора периода отчета игнорируются
     *     - выбор прверок регулируется параметрами запроса filters, limit и offset */
    "/get/audit_2/watcher/byURL/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherByURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверок радара */
    "/get/audit_2/watcher/checks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherChecks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки радара */
    "/get/audit_2/watcher/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка договора в диадок */
    "/get/bank_2/diadoc/sendContract/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2DiadocSendContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка акта сверки в диадок
     *
     *     Параметры см. в bank_2_requisites::protected_get_printTotalReceipt(); */
    "/get/bank_2/diadoc/sendTotalReceipt/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2DiadocSendTotalReceipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт лога банка */
    "/get/bank_2/history/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2HistoryExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки проведенных операций */
    "/get/bank_2/history/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2HistorySummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перевод средств с реферального счета на бонусный */
    "/edit/bank_2/referrals/toBonus/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBank2ReferralsToBonus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение id тарифа пользователя по типу контракта */
    "/get/bank_2/requisites/contractTariffId/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2RequisitesContractTariffId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Скачивание документа в формате PDF */
    "/get/bank_2/requisites/print/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2RequisitesPrint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение акта сверки (акты по предоплате выводятся в одном платеже) */
    "/get/bank_2/requisites/printTotalReceipt/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2RequisitesPrintTotalReceipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Скачивание архива документов в формате PDF */
    "/get/bank_2/requisites/printZip/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2RequisitesPrintZip"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение календаря апдейтов */
    "/get/content_2/apometr/calendar/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrCalendar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение истории urls, найденых в выдаче, по запросу за конкретную проверку */
    "/get/content_2/apometr/cHHistory/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrCHHistory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение истории шторма за период в 2 суток */
    "/get/content_2/apometr/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrHistory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение поисковых запросов апометра */
    "/get/content_2/apometr/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrKeywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение апдейтов */
    "/get/content_2/apometr/updates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrUpdates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статьи */
    "/get/content_2/journal/articles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalArticles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение закладок авторов */
    "/get/content_2/journal/bookmarksAuthors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalBookmarksAuthors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение закладок */
    "/get/content_2/journal/bookmarks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalBookmarks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение инофрмации о курсах
     *
     *     Параметры выборки основаны на модели Models\Pages */
    "/get/content_2/journal/course/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение рубрики */
    "/get/content_2/journal/rubrics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalRubrics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение состояния подписки на рассылку журнала */
    "/edit/content_2/journal/subscribe/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2JournalSubscribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение меню справки */
    "/get/content_2/support/menu/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2SupportMenu"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Постановка задачи на подбор запросов */
    "/edit/keywords_2/collect/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditKeywords2CollectGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение стоимости подбора запросов
     * @description @see Keywords_2\Methods\Collect\AbstractRegular
     */
    "/get/keywords_2/collect/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2CollectPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Импорт запросов (по необходимости зависимых с ними групп и папок)
     *
     *     Доступные поля для импорта: group_folder_path|group_name|name|tags|target поля перекрывают аналогичные параметры в запросе
     * @description @see Keywords_2\Mods\Keywords\Import::fromHandle()
     */
    "/add/keywords_2/keywords/import/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddKeywords2KeywordsImport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Постановка задачи на проверку частоты запросов */
    "/edit/keywords_2/volumes/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditKeywords2VolumesGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение стоимости проверки частоты проектов */
    "/get/keywords_2/volumes/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2VolumesPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправление письма с лэндинга вакансий на hr@topvisor.com */
    "/add/landings_2/hr/feedback/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddLandings2HrFeedback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отписка от тарифа, оплаченного картой */
    "/edit/payments_2/tariff/delCard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffDelCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка оплаты тарифов: выставлять ли счета через диадок */
    "/edit/payments_2/tariff/nextToDiadoc/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffNextToDiadoc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Смена тарифа со следующего месяца */
    "/edit/payments_2/tariff/setNext/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffSetNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Включение/выключение ПС */
    "/edit/positions_2/searchers/enabled/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2SearchersEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление региона */
    "/add/positions_2/searchers/regions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPositions2SearchersRegions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление региона */
    "/del/positions_2/searchers/regions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelPositions2SearchersRegions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение региона */
    "/edit/positions_2/searchers/regions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2SearchersRegions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка сортировки ПС */
    "/edit/positions_2/searchers/sort/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2SearchersSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных графика */
    "/get/projects_2/analytics/graph/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2AnalyticsGraph"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перемещение конкурента (сортировка) */
    "/edit/projects_2/competitors/move/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2CompetitorsMove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка имени конкурента */
    "/edit/projects_2/competitors/name/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2CompetitorsName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Включение/выключение конкурентов */
    "/edit/projects_2/competitors/on/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2CompetitorsOn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перемещение проектов в папку */
    "/edit/projects_2/folders/move/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2FoldersMove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Переместить папку
     *
     *     Вложенные папки запрещены, поэтому перемещение происходит только в пределах одного списка */
    "/edit/projects_2/folders/moveFolder/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2FoldersMoveFolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение имени папки */
    "/edit/projects_2/folders/name/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2FoldersName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить подсазки конкурентов для добавления в проект
     *
     *     Доступ по API закрыт */
    "/get/projects_2/master/hintsCompetitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2MasterHintsCompetitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить подсазки запросов для добавления в проект
     *     Доступ по API закрыт */
    "/get/projects_2/master/hintsKeywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2MasterHintsKeywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Копирование проекта */
    "/add/projects_2/projects/copy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2ProjectsCopy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка избранных проектов */
    "/edit/projects_2/projects/favorite/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsFavorite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перемещение проекта (сортировка) */
    "/edit/projects_2/projects/move/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsMove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка имени проекта */
    "/edit/projects_2/projects/name/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование "on" проектов */
    "/edit/projects_2/projects/on/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsOn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение сортировки проектов */
    "/edit/projects_2/projects/sort/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование тегов проектов */
    "/edit/projects_2/projects/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsTags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование ссылки проекта */
    "/edit/projects_2/projects/url/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отмена передачи проекта */
    "/del/projects_2/rights/changeOwner/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2RightsChangeOwner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Инициализация передачи проекта другому пользователю */
    "/edit/projects_2/rights/changeOwner/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2RightsChangeOwner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о регистрации домена
     *
     *     Возвращает объект с параметрами:
     *     - wait_time, если данные не готовы
     *     - created, если данные готовы
     *     - paidtill, если данные готовы */
    "/get/projects_2/status/registrar/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2StatusRegistrar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации об SSL сертификате
     *     Возваращает объект с параметрами:
     *     - expire */
    "/get/projects_2/status/ssl/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2StatusSsl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание задачи */
    "/add/projects_2/tasks/volumes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2TasksVolumes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление ответа в тикете, только для админов */
    "/del/tickets_2/admin/message/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelTickets2AdminMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование текста ответа в тикете, только для админов */
    "/edit/tickets_2/admin/message/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление шаблона тикета */
    "/add/tickets_2/admin/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2AdminTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление шаблона */
    "/del/tickets_2/admin/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelTickets2AdminTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение шаблона */
    "/edit/tickets_2/admin/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение шаблона тикета */
    "/get/tickets_2/admin/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2AdminTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование тикета (для админов) */
    "/edit/tickets_2/admin/ticket/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перенос последниего сообщения (до 1 сообщения автора) в новый тикет */
    "/edit/tickets_2/admin/ticketSplit/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTicketSplit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение инфомрации о пользователе */
    "/get/tickets_2/admin/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2AdminUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка userId для тикетов без userId */
    "/edit/tickets_2/admin/userId/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminUserId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирваоние комменатрий админа */
    "/edit/tickets_2/tickets/adminComment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2TicketsAdminComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение краткой информации о тикетах
     *
     *     id последнего непрочитанного тикета, число непрочитанных тикетов */
    "/get/tickets_2/tickets/info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2TicketsInfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Пометка тикета как "прочитанный" для автора тикета или админов */
    "/edit/tickets_2/tickets/setReaded/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2TicketsSetReaded"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Написание текста */
    "/edit/tickets_2/tickets/writing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2TicketsWriting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение URL к карте сайта по файлу robots.txt для указанного домена */
    "/get/urls_2/import/recognizeLinkSitemapXml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUrls2ImportRecognizeLinkSitemapXml"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Привязка email к аккаунту */
    "/add/users_2/join/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUsers2JoinEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление фильтра группы */
    "/add/admin_2/accounting/group/filter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2AccountingGroupFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление фильтра группы */
    "/del/admin_2/accounting/group/filter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2AccountingGroupFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение фильтра группы */
    "/edit/admin_2/accounting/group/filter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2AccountingGroupFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Скачивание документа */
    "/get/admin_2/accounting/invoices/file/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingInvoicesFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Скачивание реестра исходящих операций
     * @description @POST string month - месяц в формате: YYYY-mm
     *     столбцы CSV: 'Дата акта', 'Номер акта', 'Контрагент', 'ИНН', 'Товар/услуга', 'Номенклатура', 'Кол-во', 'Цена', 'НДС', 'Сумма', 'Способ оплаты'
     */
    "/get/admin_2/accounting/operations/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingOperationsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение валюты пользователя */
    "/edit/admin_2/actions/account/currency/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsAccountCurrency"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Востановление поисковых запросов из бэкапа */
    "/edit/admin_2/actions/backup/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBackupKeywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Загрузить и разместить бекап в БД бекапов */
    "/edit/admin_2/actions/backup/loader/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBackupLoader"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Востановление удаленного проекта */
    "/edit/admin_2/actions/backup/project/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBackupProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Оплата реферального счета */
    "/edit/admin_2/actions/bank/referral/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBankReferral"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка акты в диадок */
    "/add/admin_2/actions/payments/diadoc/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2ActionsPaymentsDiadoc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Импортирование историй позиций из CSV */
    "/add/admin_2/actions/positions/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2ActionsPositionsHistory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сброс статуса проверки позиций */
    "/edit/admin_2/actions/positions/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsPositionsStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение домена проекта */
    "/edit/admin_2/actions/projects/domain/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsProjectsDomain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перевод проверок позиций яндекс */
    "/edit/admin_2/actions/robot/checks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsRobotChecks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение приоритета задач */
    "/edit/admin_2/actions/robot/priority/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsRobotPriority"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Снятие задачи с дэбага */
    "/edit/admin_2/actions/robot/task/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsRobotTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление файлов */
    "/del/admin_2/actions/slack/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2ActionsSlackFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление сообщений */
    "/del/admin_2/actions/slack/messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2ActionsSlackMessages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки по группам */
    "/get/admin_2/analytics/accounting/summaryForChart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsAccountingSummaryForChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение активности пользователей в формате для графика */
    "/get/admin_2/analytics/activity/chartByPeriod/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsActivityChartByPeriod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение конкурентов для графика */
    "/get/admin_2/analytics/competitors/summaryForOrdersChart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsCompetitorsSummaryForOrdersChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение суммы оплат по системам платежей за период */
    "/get/admin_2/analytics/payments/systems/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPaymentsSystems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение суммы оплат по тарифам за период */
    "/get/admin_2/analytics/payments/tariff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPaymentsTariff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа автоматических проверока по дням по часам */
    "/get/admin_2/analytics/positions/chartByDayByHourAuto/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPositionsChartByDayByHourAuto"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа автоматических проверок по часам */
    "/get/admin_2/analytics/positions/chartByHourAuto/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPositionsChartByHourAuto"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа проверок за месяц по часам */
    "/get/admin_2/analytics/positions/chartByHour/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPositionsChartByHour"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа проверок по часам по пользователям */
    "/get/admin_2/analytics/positions/chartCountUsersByHour/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPositionsChartCountUsersByHour"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики тикетов по миграциям */
    "/get/admin_2/analytics/tickets/chartByMigrations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByMigrations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики по кол-ву пользователей, открывших первый тикет */
    "/get/admin_2/analytics/tickets/chartByNew/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByNew"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики тикетов по оценкам */
    "/get/admin_2/analytics/tickets/chartByRates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByRates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистику тикетов по тегам */
    "/get/admin_2/analytics/tickets/chartByTags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByTags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики по среднему времени ожидания ответа на вопросы в тикетах */
    "/get/admin_2/analytics/tickets/chartByWaitTime/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByWaitTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики ответов на тикеты */
    "/get/admin_2/analytics/tickets/messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsMessages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Помечание лога как обработанного */
    "/edit/admin_2/logs/system/checked/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2LogsSystemChecked"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение графика с количеством подписок на рубрики с сегментцией по способам рассылки
     *
     *     График кешируется, первый запрос может выполняться дольше */
    "/get/admin_2/users/informer/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersInformerSubscriptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Запуск проверки аудита */
    "/edit/audit_2/audit/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2AuditCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение стоимости проверки аудита */
    "/get/audit_2/audit/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение гостевой ссылки на просмотр аудита позиций */
    "/get/audit_2/audit/export/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditExportLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт отчета Анализа сайта */
    "/get/audit_2/audit/export/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditExportSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о текущей ошибке на роботе */
    "/get/audit_2/audit/log/actualError/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLogActualError"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение данных для графика
     * @deprecated
     */
    "/get/audit_2/audit/log/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLogChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Экспорт результатов аудита
     * @deprecated
     */
    "/get/audit_2/audit/results/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditResultsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение результатов анализа страницы
     * @deprecated
     */
    "/get/audit_2/audit/results/page/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditResultsPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку индексации */
    "/edit/audit_2/indexing/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2IndexingCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Полуение стоимости проверки индексации */
    "/get/audit_2/indexing/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение гостевой ссылки на просмотр индексации
     *
     *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
    "/get/audit_2/indexing/export/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingExportLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт файла в хранилище */
    "/get/audit_2/indexing/export/toRepository/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingExportToRepository"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводок индексации для графика */
    "/get/audit_2/indexing/summary/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingSummaryChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку карты сайта */
    "/edit/audit_2/sitemap/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2SitemapCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Полуение стоимости проверки карты сайта */
    "/get/audit_2/sitemap/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2SitemapCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку радара */
    "/edit/audit_2/watcher/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2WatcherCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Полуение стоимости проверки радара */
    "/get/audit_2/watcher/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание гостевой ссылки на просмотр радара */
    "/get/audit_2/watcher/export/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherExportLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводок радара для графика */
    "/get/audit_2/watcher/summary/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherSummaryChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение календаря текстовых апдейтов */
    "/get/content_2/apometr/text/calendar/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrTextCalendar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение текстовых апдейтов */
    "/get/content_2/apometr/text/updates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrTextUpdates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение дат апдейтов */
    "/get/content_2/apometr/updates/dates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrUpdatesDates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание сертификата
     *
     *      Можно создавать только для пройденных курсов */
    "/add/content_2/journal/course/certificates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddContent2JournalCourseCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение сертификата
     *
     *     Можно менять только имя, если оно не указано */
    "/edit/content_2/journal/course/certificates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2JournalCourseCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение своего сертификата */
    "/get/content_2/journal/course/certificates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourseCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение модулей курса
     *
     *     Дополнительные поля:
     *      - lessons - см. includeLessons() */
    "/get/content_2/journal/course/chapters/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourseChapters"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение списка страниц по буквам для модуля SEO словарь
     *     Результат функции кешируется
     * @description @return array<string, array{url: string, h1: string}> - массив с ключом "Буква" и значением массив страниц Pages
     */
    "/get/content_2/journal/dictionary/articlesByLetter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalDictionaryArticlesByLetter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение стаьи для "Слово дня" в модуле SEO словарь
     * @description @return (array<string, array{url: string, menu_name: string, description: string, count_views: integer}> | null)
     */
    "/get/content_2/journal/dictionary/wordOfday/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalDictionaryWordOfday"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Постановка задачи на расширение группы */
    "/edit/keywords_2/collect/ext/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditKeywords2CollectExtGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение цены на расширение группы */
    "/get/keywords_2/collect/ext/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2CollectExtPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт регионов (CSV)
     *
     *     - searcher_key, name_or_key (название или код)[, country_code (2 буквенный код страны), lang, device, depth] */
    "/get/positions_2/searchers/regions/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPositions2SearchersRegionsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Импорт регионов (CSV) */
    "/add/positions_2/searchers/regions/import/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPositions2SearchersRegionsImport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка сортировки регионов */
    "/edit/positions_2/searchers/regions/sort/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2SearchersRegionsSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статуса проверки частоты задачи */
    "/get/projects_2/tasks/volumes/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2TasksVolumesStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение сортировки шаблонов */
    "/edit/tickets_2/admin/templates/sort/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTemplatesSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Копирование истории позиций */
    "/add/admin_2/actions/positions/history/copy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2ActionsPositionsHistoryCopy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сертификата по id */
    "/get/content_2/journal/course/certificates/byID/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourseCertificatesByID"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сертификата в виде изображения */
    "/get/content_2/journal/course/certificates/image/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourseCertificatesImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Фиксация события test */  
        /** Категория */
        "Analytics_2.Methods.Add": {
            ec?: string | null;
            /** Дейсвтие */
            ea?: string | null;
            /** Ярлык в base64 */
            el?: string | null;
            /** ID пользователя */
            uid?: number | null;
            /** Хеш для уникализации события */
            hash_id?: number | null;
            /** Хэш для проверки подлинности события */
            hash?: number | null;
        };
        /** Тип массива: string[] */
        "TV.API.Types.StringArray": string[];
        /** Результат успешного API запроса */
        ResponseSuccess: {
            /** Результат ответа API метода
             *
             *     Тип результата зависит от типа запроса и его настроек */
            errors?: null | null;
            /** Список ообщений, полученных при выполнении запроса */
            messages?: components["schemas"]["TV.API.Types.StringArray"] | null;
        };
        stdClass: Record<string, never>;
        /** Информация об ошибке */
        Error: {
            /** Код ошибки
             *
             *     Код ошибки 0 - deprecated */
            code: number;
            /** Описание ошибки */
            string: string;
            /** Объект с дополнительной информацией */
            detail: components["schemas"]["stdClass"];
        };
        /** Список ошибок */
        Errors: components["schemas"]["Error"][];
        /** Результат API запроса с ошибкой */
        ResponseError: {
            /** При ошибке результат отсутствует */
            result?: null | null;
            /**
             * Список ошибок, полученных при выполнении запроса
             * @description @requires
             */
            errors: components["schemas"]["Errors"];
            /** Список ообщений, полученных при выполнении запроса */
            messages?: components["schemas"]["TV.API.Types.StringArray"] | null;
        };
        /** @enum {string} */
        "Annotations_2.Types.ServiceName": "positions" | "audit" | "watcher" | "indexing";
        /** Добавление примечания */
        "Annotations_2.Methods.Add": {
            /** ID проекта */
            project_id: number;
            /** Имя сервиса */
            service: components["schemas"]["Annotations_2.Types.ServiceName"];
            /** Идентификатор отчета в сервисе */
            target_id: string;
            /** Комментарий, если не указан, комментарий добавлен не будет */
            text?: string;
        };
        /** Удаление примечания */
        "Annotations_2.Methods.Del": {
            /** ID примечания */
            id: number;
            /** ID проекта */
            project_id: number;
            /** Имя сервиса */
            service: components["schemas"]["Annotations_2.Types.ServiceName"];
        };
        /** Редактирование примечания */
        "Annotations_2.Methods.Edit": {
            /** ID примечания */
            id: number;
            /** ID проекта */
            project_id: number;
            /** Имя сервиса */
            service: components["schemas"]["Annotations_2.Types.ServiceName"];
            /** Текст комментария
             *
             *     Если не текст указан, комментарий будет удален */
            text?: string;
        };
        /**
         * Список полей объекта, которые надо вернуть в результате
         *
         *     Если запрос поддерижвает параметр fetch_style, формат ответа может быть разным, fields будет влиять на содержание данных в этом ответе
         *
         *     Использует поля модели
         * @description @see AbstractMethod::MODEL
         */
        fields: (string | number)[];
        /**
         * Список полей объекта, по которым необходимо выполнить сортировку
         *
         *     Поля могут быть строками или объектом: {name: string, direction: 'ASC' | 'DESC', orderValues: array}
         *
         *     Использует поля модели
         * @description @see AbstractMethod::MODEL
         */
        orders: (string | number)[];
        /**
         * Список фильтров по полям объекта
         *
         *     {name: string, operator: Field::AVAILABLE_OPERATORS, values: array}
         *
         *     Использует поля модели
         *
         *     Поля обязатлеьное, если $id не указан
         * @description @see AbstractMethod::MODEL
         *     @see Field::AVAILABLE_OPERATORS
         */
        filters: (string | number)[];
        /** Id объекта, для фильтрации объектов по id
         *
         *     Только для моделей с полем id */
        id: number | null;
        /** Количество объектов, которые необходимо получить в результате
         *
         *     Используется в паре с offset */
        limit: number | null;
        /** Число объектов, которое необходимо пропустить при получении резальтата
         *
         *     Используется в паре с limit */
        offset: number;
        /**
         * Определяет формат результата: коллекция, объект, значение
         *
         *     Примеры:
         *     - fetchAll - получить коллекцию объектов
         *     - fetch - получить один объект
         *     - fetchColumn - получить свойсвто объекта
         * @description @see Selector::AVAILABLE_FETCH_STYLES
         *     @see Selector::execFetch() - см. реализацию
         */
        fetch_style: string | null;
        /** Получение примечаний */
        "Annotations_2.Methods.Get": {
            /** ID проекта */
            project_id: number;
            /** Имя сервиса */
            service: components["schemas"]["Annotations_2.Types.ServiceName"];
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Annotations": {
            id?: unknown;
            user_id?: unknown;
            project_id?: unknown;
            service?: unknown;
            target_id?: unknown;
            text?: unknown;
            create_time?: unknown;
        };
        /** Результаты пагинации */
        Pagination: {
            /** Смещение для получения следующий порции данных
             *
             *     Вернется только в случае существования следующей порции */
            nextOffset?: number | null;
            /** Общее число результатов, без учета применения пагинации */
            total?: number | null;
        };
        /** Получение заархивированного приложения */
        "App_2.Methods.Get": Record<string, never>;
        /** @enum {string} */
        "TV.API.Types.Topvisor.Subdomain": "" | "journal";
        /** Добавление комментария */
        "Comments_2.Methods.Add": {
            subdomain?: components["schemas"]["TV.API.Types.Topvisor.Subdomain"];
            /** Текст комментария */
            text: string;
            /** Адрес страницы (нельзя указывать совместно с reply_id) */
            page_url?: string | null;
            /** Привязать к комментарию с id = reply_id  (нельзя указывать совместно с page_url) */
            reply_id?: number | null;
        };
        /** Удаление комментария
         *
         *     Удалять комментарии можно только в течение ограниченного времени
         *
         *     Админы могут удалять комментарии в любое время */
        "Comments_2.Methods.Del": {
            /** ID комментария */
            id: number;
        };
        /** Изменение комментария
         *
         *     Изменять комментарий можно только в течение ограниченного времени */
        "Comments_2.Methods.Edit": {
            /** ID комментария */
            id: number;
            /** Текст комментария, не может быть пустой строкой */
            text: string;
        };
        /** Получение комментариев
         *
         *     Возвращает набор комментариев со всеми подкомменатриями, limit, offset не виляют на получение вложенных комментариев */
        "Comments_2.Methods.Get": {
            subdomain?: components["schemas"]["TV.API.Types.Topvisor.Subdomain"];
            /** Адрес страницы (нельзя указывать совместно с reply_id) */
            page_url?: string | null;
            /** Получить ответы на комменатрий с id = reply_id (нельзя указывать совместно с page_url) */
            reply_id?: number | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Comments": {
            id?: unknown;
            site?: unknown;
            subdomain?: unknown;
            page_url?: unknown;
            reply_id?: unknown;
            user_id?: unknown;
            time?: unknown;
            text?: unknown;
            count_likes?: unknown;
            status?: unknown;
            user_name?: unknown;
            user_avatar?: unknown;
            author_alias?: unknown;
            author_count_pages?: unknown;
            like?: unknown;
            page_title?: unknown;
        };
        /** @enum {string} */
        "Payments_2.Types.System": "balance" | "card" | "card_ios" | "card_android" | "card_ap" | "card_gp" | "invoice" | "tinkoff_business" | "ap" | "ym" | "qw" | "sb" | "wm2" | "pp" | "pd" | "pd_invoice" | "rk" | "pt" | "lp" | "ppg" | "pr";
        /** @enum {string} */
        "Payments_2.Types.Country": "RU" | "UA" | "BY" | "KZ" | "other";
        /** Создание платежки и переход к оплате
         *
         *     Возвращает id платежа, если указан параметр $return_id = true
         *
         *     Производит редирект, если настроена форма оплаты на стороне платежной системы
         *
         *     Возвращает информацию о платеже, если ожидается вывод формы оплаты на сайте
         *
         *     При ошибке производит редирект на страницу с инофрмацией об ошибке */
        "Payments_2.Methods.Add": {
            /** Платежная система */
            system: components["schemas"]["Payments_2.Types.System"];
            /** Сумма платежа */
            sum: number;
            /** Страна реквизитов */
            country: components["schemas"]["Payments_2.Types.Country"];
            /** Номер договора/оферты для платежа */
            requisites_id?: string;
            /** ID тарифа (если указан, сумма будет переопределена) */
            tariff_id?: number;
            /** Число предоплаченных месяцев по тарифу
             *
             *     Примеры:
             *     - при оплате тарифа на 1 месяц должен быть равен 1
             *     - при оплате тарифа на 2 месяца должен быть равен 2 */
            tariff_count_month?: number;
            /** Комментарий */
            comment?: string;
            /** Комментарий */
            items?: (string | number)[];
            /** ID карты в системе оплаты для привязки */
            card_id?: string;
            /** Пробрасываемые данные в redirectToPay() для FinishAuthorize Tinkoff для Apple Pay и Google Pay */
            payment_data?: string;
            /** Email (указывается, если у пользователя не привязан email)
             *     TODO: Добавить тип Email */
            email?: string | null;
            /** Телефон (указывается для определенных систем оплаты) */
            phone?: string;
            /** Флаг - отменяемый платеж, используется для сохранения данных банковской карты пользователя, сумма платежа вернется пользователю после отмены */
            is_cancelable?: boolean;
            /** Возвратить id платежа, не выполняя redirectToPay() */
            return_id?: boolean;
        };
        /** Получение списка платежей */
        "Payments_2.Methods.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Payments": {
            "COUNT(*)"?: unknown;
            "HAS_DOC()"?: unknown;
            id?: unknown;
            external_id?: unknown;
            user_id?: unknown;
            system?: unknown;
            requisites_id?: unknown;
            data?: unknown;
            sum?: unknown;
            currency?: unknown;
            status?: unknown;
            recurrent_type?: unknown;
            tariff_id?: unknown;
            tariff_count_month?: unknown;
            date?: unknown;
            date_month?: unknown;
            date_finished?: unknown;
            date_month_finished?: unknown;
            fromBase64Data?: unknown;
        };
        /** @enum {integer} */
        "Qr_2.Types.TplN": 0 | 1 | 2;
        /** Генерация QR кода по тексту
         *
         *     Возвращает изображение в формате data:image/png;base64 */
        "Qr_2.Methods.Get": {
            /** Кодируемый текст */
            text: string;
            /** Кодируемый текст
             *
             *     - 0 - черно-белый
             *     - 1 - шашечки
             *     - 2 - группы с закруглениями */
            tpl_n?: components["schemas"]["Qr_2.Types.TplN"];
            /** Использовать ли брендированное лого */
            use_brand?: boolean;
            /** Использовать ли цвета из лого */
            use_logo_colors?: boolean;
            /** Использовать указанный цвет, цвет задается массивом из 3 элементов [r, g, b] */
            color?: (string | number)[] | null;
            /**
             * Размер точек QR кода в пикселях
             * @default 4
             */
            point_size: number;
        };
        /**
         * Тип рекуррентного платежа
         * @enum {string}
         */
        "Recurring_2.Types.Type": "refill" | "domainRenew";
        /** Краткий URL в punycode, не может содержать UTF-символы:
         *     - без схемы
         *     - без "www." в домене
         *     - без слешей на конце
         *     - без "<" и ">"
         *
         *     Будет проивзедено автоматическое приведение к формату
         *
         *     Разрешен ввод пустой строки, для удаления значения url */
        "TV.API.Types.Url": string;
        /** Удаление настроек автоопераций */
        "Recurring_2.Methods.Del": {
            type: components["schemas"]["Recurring_2.Types.Type"];
            /** Объект доменного платежа (в случае domainRenew - домен) */
            target: components["schemas"]["TV.API.Types.Url"];
        };
        /**
         * Платежная система рекуррентного платежа
         * @enum {string}
         */
        "Recurring_2.Types.System": "card" | "invoice";
        /** Настройка рекуррентного платежа */
        "Recurring_2.Methods.Edit": {
            system: components["schemas"]["Recurring_2.Types.System"];
            type: components["schemas"]["Recurring_2.Types.Type"];
            /** Сумма, при достижении которой произойдет автоплатеж */
            min_sum?: number | null;
            /** Cумма автоплатежа */
            refill_sum?: number | null;
            /** Объект доменного платежа (в случае domainRenew - домен) */
            target?: components["schemas"]["TV.API.Types.Url"] | null;
            /** Id карты в системе Тинькофф */
            cardId?: number | null;
        };
        /**
         * Тип тега, к каким объектам применяется
         * @enum {string}
         */
        "Tags_2.Types.Type": "tickets" | "projects" | "keywords" | "snippets" | "shortLinks" | "urls";
        /** Сохранение списка тегов */
        "Tags_2.Methods.Edit": {
            type: components["schemas"]["Tags_2.Types.Type"];
            /** Список тегов в формате:
             *     <code>
             *     {
             *        id:id,
             *        name:name,
             *        color_id:color_id
             *     }
             *     </code> */
            tags: (string | number)[];
            project_id?: number | null;
        };
        /** Получение списка тегов */
        "Tags_2.Methods.Get": {
            type: components["schemas"]["Tags_2.Types.Type"];
            project_id?: number | null;
        };
        /**
         * Флаг активности
         * @enum {integer}
         */
        "Urls_2.Types.Flag": -1 | 0 | 1 | 2;
        /**
         * Id тега
         * @enum {string}
         */
        "Tags_2.Types.TagId": "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20";
        /**
         * Список id тегов
         *
         *     Тип массива: TagId[]
         * @description @see Tags_2\Types\TagId
         */
        "Tags_2.Types.TagsIds": components["schemas"]["Tags_2.Types.TagId"][];
        /** ID проекта */
        project_id: number;
        /** Добавление url */
        "Urls_2.Methods.Add": {
            /** URL соответствующий домену проекта */
            url: components["schemas"]["TV.API.Types.Url"];
            /** Флаг активности в карте сайта
             *     - 1 - присутствовал в прошлых версиях карты сайта */
            sitemap?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в аудите */
            audit?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в радаре */
            indexing?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в индексации */
            watcher?: components["schemas"]["Urls_2.Types.Flag"] | null;
            tags?: components["schemas"]["Tags_2.Types.TagsIds"] | null;
            project_id: components["schemas"]["project_id"];
        };
        "Models.Urls": {
            "COUNT(*)"?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            "WATCHER_HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            id?: number;
            url?: string | null;
            project_id?: number | null;
            sitemap?: unknown;
            audit?: unknown;
            watcher?: unknown;
            indexing?: unknown;
            tags?: unknown;
            sitemap_lastmod?: unknown;
            sitemap_changefreq?: unknown;
            sitemap_priority?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "searcher_key"
             *       ]
             *     } */
            indexing_data?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "searcher_key"
             *       ]
             *     } */
            indexing_alert?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_http_codes?: (string | number)[] | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_http_codes_changed?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_redirects?: (string | number)[] | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_h1?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_h1_changed?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_title?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_title_changed?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_description?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_description_changed?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_content?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_content_changed?: number | null;
        };
        /** Изменение urls */
        "Urls_2.Methods.Edit": {
            /** Флаг активности в карте сайта
             *     - 1 - присутствовал в прошлых версиях карты сайта */
            sitemap?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в аудите */
            audit?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в радаре */
            indexing?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в индексации */
            watcher?: components["schemas"]["Urls_2.Types.Flag"] | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            project_id: components["schemas"]["project_id"];
        };
        /** Получение списка urls проекта */
        "Urls_2.Methods.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Оценка отзыва
         * @enum {string}
         */
        "Votes_2.Types.Rate": "1" | "2" | "3" | "4" | "5";
        /** Оставление отзыва */
        "Votes_2.Methods.Add": {
            /** Поддомен с которого оставлен отзыв */
            subdomain?: components["schemas"]["TV.API.Types.Topvisor.Subdomain"];
            /** Url (путь) с которого оставлен отзыв */
            url: string;
            /** Комментарий */
            comment?: string;
            /** Оценка */
            rate: components["schemas"]["Votes_2.Types.Rate"];
        };
        "Models.Votes": {
            id?: unknown;
            site?: unknown;
            subdomain?: unknown;
            url?: unknown;
            user_id?: unknown;
            rate?: unknown;
            created_time?: unknown;
            comment?: unknown;
            is_viewed?: unknown;
        };
        /** Получение своих отзывов */
        "Votes_2.Methods.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Admin_2.Methods.Actions.AbstractRegular": {
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Получение доступа к акаунту пользователя в режиме "призрак" */
        "Admin_2.Methods.Ghost.Get": {
            /** UserId, email или ИНН пользователя (параметр взаимоисключающий с project_id) */
            user_search?: string | null;
            /** UserId, email или ИНН пользователя в аккаунт которого входим */
            redirect_to?: string | null;
            /** ID проекта пользователя (параметр взаимоисключающий с user_search) */
            project_id?: number | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** @enum {string} */
        "TV.API.Types.Lang": "ru" | "en";
        /** Получение записей словаря */
        "Admin_2.Methods.I18n.Get": {
            /** Язык словаря */
            lang?: components["schemas"]["TV.API.Types.Lang"] | null;
            /** Категория словаря */
            category?: string | null;
            /** Поиск по словарю */
            search?: string | null;
            only_duplicates?: boolean;
        };
        /** Тип массива: int
         *
         *     Принимает: Любые целые числа и числа в строках
         *
         *     Хранит: int */
        "TV.API.Types.IntArray": number[];
        "Admin_2.Methods.Informer.Add": {
            /** Тип рассылки
             *
             *     - me
             *     - admin
             *     - news
             *     - api */
            type: string;
            /** Канал рассылки
             *
             *     - all
             *     - email
             *     - informer */
            send_in: string;
            lang: components["schemas"]["TV.API.Types.Lang"];
            /** Объект отправки */
            subject: string;
            /** Текст превью для письма */
            preview_text?: string | null;
            /** Текст письма
             *     Обязательно для email */
            message?: string | null;
            /** Текст письма
             *     Обязательно для informer */
            message_informer?: string | null;
            /** Ссылка */
            link?: string | null;
            /** Текст для добавляемой ссылки для E-mail */
            link_text?: string | null;
            /** Ограничение рассылки по id пользоваталей */
            users_ids?: components["schemas"]["TV.API.Types.IntArray"] | null;
            /** Ограничение рассылки по пользоваталям с договорами */
            only_ur?: boolean | null;
            /** Отладка email */
            debug?: boolean | null;
        };
        /** Сохранение текстового файла лога */
        "Admin_2.Methods.Logs.Edit": {
            /** Файл лога */
            log_file: string;
            /** Текст */
            log_text: string;
        };
        /** Загрузка текстового файла лога */
        "Admin_2.Methods.Logs.Get": {
            /** Файл лога */
            log_file: string;
        };
        "Admin_2.Methods.Ranks.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Analytics.Ranks": {
            "ACTIVATIONS()"?: unknown;
            id?: unknown;
            name_ru?: unknown;
            name_en?: unknown;
            bonus_RUB?: unknown;
            bonus_USD?: unknown;
            to_date?: unknown;
            limit?: unknown;
            site?: unknown;
            code?: unknown;
            retention_week?: unknown;
            retention_month?: unknown;
            payment_week?: unknown;
            payment_month?: unknown;
            payment_month_6?: unknown;
            payment_year?: unknown;
            new_user?: unknown;
            returned_user?: unknown;
            quitted_user?: unknown;
        };
        /**
         * E-mail
         * @example name@example.com
         */
        "TV.API.Types.Email": string;
        /** Добавление сотрудника */
        "Admin_2.Methods.Staff.Add": {
            /** Номер договора */
            id: number;
            /** Корпоративный e-mail */
            email: components["schemas"]["TV.API.Types.Email"];
            /** Личный e-mail */
            staff_email: components["schemas"]["TV.API.Types.Email"];
            /** Должность */
            post: string;
            /** Фамилия */
            surname: string;
            /** Имя */
            name: string;
            /** Отчество */
            patronymic: string;
            /** Должность (родительный падеж) */
            post_2: string;
            /** Фамилия (родительный падеж) */
            surname_2: string;
            /** Имя (родительный падеж) */
            name_2: string;
            /** Отчество (родительный падеж) */
            patronymic_2: string;
            /** Название отдела */
            department: string;
            /** Привелегии */
            posts: (string | number)[];
        };  
        /** Номер договора */
        "Admin_2.Methods.Staff.Edit": {
            id: number;
            /** Корпоративный e-mail */
            email: components["schemas"]["TV.API.Types.Email"];
            /** Личный e-mail */
            staff_email: components["schemas"]["TV.API.Types.Email"];
            /** Должность */
            post: string;
            /** Фамилия */
            surname: string;
            /** Имя */
            name: string;
            /** Отчество */
            patronymic: string;
            /** Должность (родительный падеж) */
            post_2: string;
            /** Фамилия (родительный падеж) */
            surname_2: string;
            /** Имя (родительный падеж) */
            name_2: string;
            /** Отчество (родительный падеж) */
            patronymic_2: string;
            /** Название отдела */
            department: string;
            /** Привелегии */
            posts: (string | number)[];
            /** Группа */
            group?: number | null;
        };
        /** Получение персонала, объект admin_staff */
        "Admin_2.Methods.Staff.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Admin.Staff": {
            "VACATIONS()"?: unknown;
            id?: unknown;
            site?: unknown;
            name?: unknown;
            lang?: unknown;
            timezone?: unknown;
            dateformat?: unknown;
            date_reg?: unknown;
            group?: unknown;
            phone?: unknown;
            email?: unknown;
            avatar?: unknown;
            staff_id?: unknown;
            staff_email?: unknown;
            staff_department?: unknown;
            staff_posts?: (string | number)[] | null;
            staff_post?: unknown;
            staff_name?: unknown;
            staff_surname?: unknown;
            staff_patronymic?: unknown;
            staff_post_2?: unknown;
            staff_name_2?: unknown;
            staff_surname_2?: unknown;
            staff_patronymic_2?: unknown;
            staff_access?: unknown;
        };
        /**
         * Дата
         * @example 2000-01-01
         */
        "TV.API.Types.Date": string;
        /** Изменение даты следующего списания по тарифу */  
        /** Дата следующего списания по тарифу */
        "Admin_2.Methods.TariffChangeExpire.Edit": {
            expire: components["schemas"]["TV.API.Types.Date"];
        };
        /** Поиск HTML шаблонов */
        "Admin_2.Methods.Tpl.Get": {
            /** Путь к шаблону */
            tpl: string;
        };
        /** Редактирование пользователей, объект admin_users */
        "Admin_2.Methods.Users.Edit": {
            /** Удалить пользователя */
            deleted?: boolean | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        "Models.Admin.Users": {
            "REQUISITES()"?: unknown;
            "ORG_NAME()"?: unknown;
            id?: unknown;
            site?: unknown;
            currency?: unknown;
            name?: unknown;
            lang?: unknown;
            timezone?: unknown;
            dateformat?: unknown;
            date_reg?: unknown;
            page_reg?: unknown;
            has_EDF?: unknown;
            group?: unknown;
            phone?: unknown;
            email?: unknown;
            avatar?: unknown;
            deleted?: unknown;
            balance_all?: unknown;
            balance_bonus?: unknown;
            balance_plan?: unknown;
            plan_id?: unknown;
            status?: unknown;
            status_paid?: unknown;
            status_used?: unknown;
            sum_payments?: unknown;
            average_expenses_3?: unknown;
            plan_expire?: unknown;
            referrer_id?: unknown;
        };
        /** Получение пользователей */
        "Admin_2.Methods.Users.Get": {
            /** Имя или id проекта */
            project?: string | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Admin_2.Methods.Votes.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение всех своих примечаний по всем проектам и сервисам */
        "Annotations_2.Methods.My.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение данных подтверждения
         *
         *     Возвращает результат подтверждения в виде
         *     массива с сообщением (acceptAction),
         *     логической переменной (acceptEmail),
         *     null при неправильно введенном типе */
        "App_2.Methods.Actions.Get": {
            /** Email пользователя */
            email: string;
            /** Код для генерации ссылки подтверждения */
            code: string;
            /**
             * Тип подтверждения
             * @default acceptAction
             */
            type_action: string;
        };
        /** Получение текста политики конфиденциальности */
        "App_2.Methods.Privacy.Get": {
            /** Язык страницы */
            lang?: components["schemas"]["TV.API.Types.Lang"] | null;
        };
        "Controller_2.Objects.Location": Record<string, never>;
        "Controller_2.Objects.OpenGraph": Record<string, never>;
        "Controller_2.Objects.Page.Options": {
            title: string;
            description: string;
            keywords: string;
            noindex: boolean;
            canonical: string;
            alternates: (string | number)[];
        };
        "Controller_2.Objects.Page.Article": {
            /** @default module */
            type: string;
            duration?: string | null;
            word_count?: string | null;
            htmlRaw: string;
            url: string;
            parent_url: string;
            publish_time?: string | null;
            h1: string;
            description?: string | null;
            menu_name?: string | null;
            intro?: string | null;
            html: string;
            image: string;
            tags: (string | number)[];
            count_views: number;
            count_unique_views?: number | null;
            count_likes: number;
            count_comments?: number | null;
            theme: string;
            noindex: boolean;
            quiz_id: string;
            /** @default ACTIVE */
            state: string;
            rubric_name: string;
            user_id: number;
            user_name?: string | null;
            user_description: string;
            user_avatar: string;
            view: number;
            like: number;
            bookmark: string;
            bookmark_author: string;
            author_alias: string;
            user_id_2?: number | null;
            user_id_3?: number | null;
        };
        "Tpl.Core.SecondMenu": Record<string, never>;
        "Tpl.Core.LeftMenu": {
            items: (string | number)[];
        };
        "TV.Core.Sites.Site": {
            /** Базовый домен сайта */
            host: string;
            /** @type class-string<TV\Types\Config\Site> config - Интерфейс конфигурации сайта, пример: `Config\Sites\{{ SiteName }}\ConfigSite::class` */
            config: string;
            /**
             * Настройки интеграций
             * @description @type array{
             *         yandex_client_id:string,
             *         yandex_client_id_auth:string,
             *         yandex_client_secret:string,
             *         google_client_id:string,
             *         google_client_secret:string,
             *         sms_client:string,
             *         selectel_api_key:string,
             *         vk_pixel_id:string,
             *         vk_group_id:string,
             *         vk_service_token:string,
             *         vk_group_token:string,
             *         telegram_token:string,
             *         telegram_token_apometr:string,
             *         tinkoff_business_token:string,
             *         tinkoff_openapi_token:string,
             *         tinkoff_security_key:string,
             *         tinkoff_ap_cert_pass:string,
             *         tinkoff_partner_key:string,
             *         tinkoff_partner_secret:string,
             *         botan_token_TopvisorBot:string,
             *         botan_token_ApometrBot:string,
             *         diadoc:string,
             *         fbAppId:string,
             *         fbTokens:array,
             *         twTokens:array
             *     }
             */
            configTPA: (string | number)[];
        };
        /** Движок работы с шаблонизатором
         *
         *     Является неотъемлемой частью Page */
        "Controller_2.Objects.TplEngine": Record<string, never>;
        "Controller_2.Objects.Page": {
            location: components["schemas"]["Controller_2.Objects.Location"];
            _GET: (string | number)[];
            openGraph: components["schemas"]["Controller_2.Objects.OpenGraph"];
            options: components["schemas"]["Controller_2.Objects.Page.Options"];
            article: components["schemas"]["Controller_2.Objects.Page.Article"];
            secondMenu: components["schemas"]["Tpl.Core.SecondMenu"];
            leftMenu: components["schemas"]["Tpl.Core.LeftMenu"];
            params: (string | number)[];
            site: components["schemas"]["TV.Core.Sites.Site"];
            subdomain: string;
            langContext: string;
            langUrl: string;
            modUrl: string;
            mod: string;
            subMod: string;
            /** @default regular */
            theme: string;
            jsonLDs: (string | number)[];
            htmlAttributes: (string | number)[];
            logo: string;
            redirect: string;
            /** @default 302 */
            redirectCode: number;
            tplEngine: components["schemas"]["Controller_2.Objects.TplEngine"];
            tplStaticPath: string;
            tplStatic: string;
            tplStaticRendered: string;
            /** @default mods/content.php */
            tplPath: string;
            tplRendered: string;
            tplSiteRendered: string;
            data: (string | number)[];
            rightsLabels: (string | number)[];
            isFullSize: boolean;
            showFooter: boolean;
            isAdaptive: boolean;
            additionalHeadCode: string;
            v: string;
            vJS: string;
        };
        /**
         * Модуль аудита
         * @enum {string}
         */
        "Audit_2.Types.Type": "audit" | "indexing" | "sitemap" | "watcher";
        /** Получение количества настроенных URL */
        "Audit_2.Methods.CountUrls.Get": {
            audit_type: components["schemas"]["Audit_2.Types.Type"];
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Id поисковой системы для индексации
         * @enum {string}
         */
        "Audit_2.Types.Indexing.SearcherKey": "0" | "1" | "5";
        /** Id поисковых систем для индексации */
        "Audit_2.Types.Indexing.SearcherKeys": components["schemas"]["Audit_2.Types.Indexing.SearcherKey"][];
        /**
         * Тип диапазона индексации
         * @enum {integer}
         */
        "Audit_2.Types.Indexing.TypeRange": 0 | 1 | 2 | 3 | 4 | 5 | 7 | 100;
        /** Получение отчета по проверке индексации
         *
         *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
        "Audit_2.Methods.Indexing.Get": {
            searchers_keys: components["schemas"]["Audit_2.Types.Indexing.SearcherKeys"];
            /**
             * Список полей индексации, которые необъодимо получить
             *
             *     См. поля indexing_* в объекте Urls
             * @default [
             *       "data"
             *     ]
             */
            indexing_fields: (string | number)[];
            /** Вернуть ли заголовки отчета */
            show_headers?: boolean;
            /** Вернуть ли суммарное количество страниц в индексе по URL */
            show_counts_indexing?: boolean;
            /** Вернуть ли даты проверок */
            show_exists_dates?: boolean;
            /** Фильтр по изменениям в указанной ПС в указанную дату
             *
             *     Формат записи: `{{ date }}:{{ searcher_key }}` */
            filter_by_alert?: string;
            /** Произвольные даты без использования диапазона */
            dates?: (string | number)[] | null;
            /** Дата начала диапазона */
            date1?: components["schemas"]["TV.API.Types.Date"] | null;
            /** Дата окончания диапазона */
            date2?: components["schemas"]["TV.API.Types.Date"] | null;
            /**
             * Период в днях
             * @default 7
             */
            period_days: number;
            /**
             * Тип диапазона дат
             * @default 7
             */
            type_range: components["schemas"]["Audit_2.Types.Indexing.TypeRange"];
            /**
             * Количество дней в диапазоне
             * @default 60
             */
            count_dates: number;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Тип отчета радара
         * @enum {string}
         */
        "Audit_2.Types.Settings.WatcherType": "title" | "description" | "h1" | "content";
        /** Типы отчетов радара */
        "Audit_2.Types.Settings.WatcherTypes": components["schemas"]["Audit_2.Types.Settings.WatcherType"][];
        /**
         * Регулярное выражение
         *
         *     Пустое значение разрешено
         *
         *     Управляющие символы "/" в начале и в конце строки будут удалены
         * @example /^year_(\d\d\d\d)$/
         */
        "TV.API.Types.RegExp": string;
        /**
         * Местоположение сервера для выполнения задач инструментов аудита
         * @enum {string}
         */
        "Audit_2.Types.Settings.ServerLocation": "EASTERN_EUROPE" | "WESTERN_EUROPE";
        /** Применение наастроек Анализа сайта */
        "Audit_2.Methods.Settings.Edit": {
            /**
             * User-Agent (аудит)
             *
             *     Можно указать id устройства
             * @description @see Audit_2\Types\Settings\Device
             */
            audit_user_agent?: string | null;
            /** Сохранять куки между запросами (аудит) */
            audit_use_cookie?: boolean | null;
            /** Проверять ссылки (аудит) */
            audit_scan_links?: boolean | null;
            /** Проверять изображения (аудит) */
            audit_scan_images?: boolean | null;
            /** Проверять JS (аудит) */
            audit_scan_js?: boolean | null;
            /** Проверять css (аудит) */
            audit_scan_css?: boolean | null;
            /** Ключ api для https://developers.google.com/speed/docs/insights/v5/get-started (аудит) */
            audit_api_key?: string | null;
            /** Паузы между проверками страниц сайта (аудит) */
            audit_page_delay?: number | null;
            /** Паузы между првоерками ресурсов страниц сайта (аудит) */
            audit_resource_delay?: number | null;
            /** Дополнитлеьные Cookies (аудит) */
            audit_cookies?: string | null;
            /** Использовать ли при запуске аудита автоматический сбор URL (аудит) */
            audit_auto_collect_pages?: boolean | null;
            /** Лимит страниц при автоматическом проходе по сайту (аудит) */
            audit_auto_collect_pages_limit?: number | null;
            /** Страница, с которой начинается автоматический сбор URL (аудит) */
            audit_auto_collect_pages_start_url?: components["schemas"]["TV.API.Types.Url"] | null;
            /** Поисковые системы (индексация) */
            indexing_searchers_keys?: components["schemas"]["Audit_2.Types.Indexing.SearcherKeys"] | null;
            /**
             * User-Agent (радар)
             *
             *     Можно указать id устройства
             * @description @see Audit_2\Types\Settings\Device
             */
            watcher_user_agent?: string | null;
            watcher_max_redirects?: number | null;
            /** Типы отчетов, которые необходимо построить (радар) */
            watcher_types?: components["schemas"]["Audit_2.Types.Settings.WatcherTypes"] | null;
            /**
             * Регулярное выражение для сбора контента (радар)
             *
             *     Если не указано, будут ипользоваться теги разметки
             * @description @see https://topvisor.com/support/watcher/settings/#tags
             */
            watcher_regexp?: components["schemas"]["TV.API.Types.RegExp"] | null;
            /** Вырезать из кода страницы javascript (радар) */
            watcher_ignore_js?: boolean | null;
            /** Вырезать из результатов html-тэги (радар) */
            watcher_strip_tags_from_result?: boolean | null;
            /** Дополнитлеьные cookies (радар) */
            watcher_cookies?: string | null;
            server_location?: components["schemas"]["Audit_2.Types.Settings.ServerLocation"] | null;
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Имя настройки для интсрумента аудита
         * @enum {string}
         */
        "Audit_2.Types.Settings.FieldName": "audit_user_agent" | "audit_use_cookie" | "audit_cookies" | "audit_scan_links" | "audit_scan_images" | "audit_scan_js" | "audit_scan_css" | "audit_api_key" | "audit_page_delay" | "audit_resource_delay" | "audit_auto_collect_pages" | "audit_auto_collect_pages_limit" | "audit_auto_collect_pages_start_url" | "indexing_searchers_keys" | "watcher_user_agent" | "watcher_cookies" | "watcher_max_redirects" | "watcher_types" | "watcher_regexp" | "watcher_ignore_js" | "watcher_strip_tags_from_result" | "server_location";
        /** Имена настроек для инструментов аудита */
        "Audit_2.Types.Settings.FieldNames": components["schemas"]["Audit_2.Types.Settings.FieldName"][];
        /** Получение настроек аудита */
        "Audit_2.Methods.Settings.Get": {
            fields: components["schemas"]["Audit_2.Types.Settings.FieldNames"];
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Тип диапазона радара
         * @enum {integer}
         */
        "Audit_2.Types.Watcher.TypeRange": 0 | 2 | 3 | 4 | 7 | 100;
        /**
         * Тип проверки радара
         * @enum {string}
         */
        "Audit_2.Types.Watcher.Type": "http_codes" | "redirects" | "h1" | "title" | "description" | "content";
        /**
         * Добавить в результат различия данных
         * @enum {integer}
         */
        "Audit_2.Types.Watcher.ShowDiff": 0 | 1 | 2 | 3;
        /** Получение результатов проверок радара
         *
         *     Отчет генерируется на основе объектов urls
         *
         *     Необходимо указать либо check_id1 и check_id2, либо checks_ids (вместе указывать нельзя) */
        "Audit_2.Methods.Watcher.Get": {
            /** ID проверок в произвольном порядке */
            checks_ids?: (string | number)[] | null;
            /** ID проверки начала диапазона */
            check_id1?: number | null;
            /** ID проверки конца диапазона */
            check_id2?: number | null;
            /** @default 7 */
            type_range: components["schemas"]["Audit_2.Types.Watcher.TypeRange"];
            /**
             * Максимальное число возвращаемых проверок (не более 60)
             * @default 60
             */
            count_ids: number;
            watcher_type: components["schemas"]["Audit_2.Types.Watcher.Type"];
            /**
             * Выбор столбцов данных с результатами проверки
             * @default [
             *       "http_codes",
             *       "redirects"
             *     ]
             */
            watcher_fields: (string | number)[];
            /** Добавить в результат заголовки отчета */
            show_headers?: boolean;
            show_diff?: components["schemas"]["Audit_2.Types.Watcher.ShowDiff"];
            /** Добавить в результат количество проверок */
            show_counts_watcher?: boolean;
            project_id: components["schemas"]["project_id"];
            fields?: components["schemas"]["fields"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            orders?: components["schemas"]["orders"];
            offset?: components["schemas"]["offset"];
        };
        /** Получение данных банка по БИК */
        "Bank_2.Methods.Bank.Get": {
            /** БИК банка */
            bik?: string;
        };
        /** Получение истории транзакций */
        "Bank_2.Methods.History.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.BalanceHistory": {
            "COUNT(*)"?: unknown;
            "TOTAL()"?: unknown;
            currency?: unknown;
            plus?: unknown;
            sum_group?: unknown;
            user_id?: number | null;
            by_user_id?: unknown;
            sum?: unknown;
            type?: unknown;
            info?: unknown;
            target?: unknown;
            target_id?: number | null;
            date?: unknown;
            project_name?: unknown;
            project_tags?: unknown;
            project_folder_id?: unknown;
            by_user_email?: unknown;
        };
        /** Предоставление инфомации по счету */
        "Bank_2.Methods.Info.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /**
         * Тип реквизитов
         * @enum {string}
         */
        "Bank_2.Types.Requisites.Type": "contract" | "offer" | "partnerOffer" | "fl223" | "domainsContract" | "domainsOffer" | "domainsPersonContract" | "domainsPersonOffer";
        /** Добавиление реквизитов */
        "Bank_2.Methods.Requisites.Add": {
            /** см. объект Bank_2\Objects\Requisites */
            data: string;
            type: components["schemas"]["Bank_2.Types.Requisites.Type"];
            /** Id тарифа, для договоров, ассоциируемых с тарифом (например fl223) */
            tariff_id?: number;
        };
        /** Закрытие договора (оферту закрыть невозможно) */
        "Bank_2.Methods.Requisites.Del": {
            /** Id реквезитов */
            id: string;
        };
        /** Изменение реквизитов */
        "Bank_2.Methods.Requisites.Edit": {
            /** Id реквезитов */
            id: string;
            /** Данные реквезитов
             *
             *     см. объект Bank_2\Objects\Requisites */
            data: string;
        };
        /** Получение списка договоров */
        "Bank_2.Methods.Requisites.Get": {
            /** Добавить информацию о доступных контрагентах организации для ЭДО */
            include_edc_data?: boolean;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Requisites": {
            "LABEL()"?: unknown;
            id?: unknown;
            user_id?: unknown;
            country?: unknown;
            contract_date?: unknown;
            contract_type?: unknown;
            contract_balance?: unknown;
            contract_tariff_id?: unknown;
            data?: unknown;
            signed?: unknown;
            deleted?: unknown;
            edc_connected?: unknown;
            fromBase64Data?: unknown;
        };
        /** Получение данных юридического лица по ИНН */
        "Bank_2.Methods.Ur.Get": {
            /** ИНН юридического лица */
            inn: string;
        };
        /** Получение комментариев автора. Без вложенности */
        "Comments_2.Methods.ByAuthor.Get": {
            /** ID автора */
            user_id: number;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Редактирование статуса лайка для комментария
         *
         *     Возвращает результат редактирования статуса лайка */
        "Comments_2.Methods.Like.Edit": {
            /** Id комментария */
            id: number;
            /** Установка лайка
             *     - 0: снять лайк
             *     - 1: поставить лайк */
            like: boolean;
        };
        /** Изменить настройки автора */
        "Content_2.Methods.Authors.Edit": {
            /** Имя для url страницы автора
             *
             *     Только латинские буквы, цифры и символ дефиса */
            alias?: string | null;
            /** Промо текст */
            promo_text?: string | null;
            /** Текс для промо кнопки */
            promo_label?: string | null;
            /** Ссылка для промо кнопки */
            promo_link?: components["schemas"]["TV.API.Types.Url"] | null;
            /** Отображать ли автора в списке авторов */
            show_in_author_list?: boolean | null;
        };
        /** Получение данных об авторе */
        "Content_2.Methods.Authors.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Content.Authors": {
            "IS_ACTIVE()"?: number | null;
            user_id?: number | null;
            alias?: string | null;
            promo_text?: string | null;
            promo_label?: string | null;
            promo_link?: string | null;
            count_pages?: number | null;
            count_views?: number | null;
            count_unique_views?: string | null;
            count_likes?: number | null;
            show_in_author_list?: number | null;
            user_site?: string | null;
            user_name?: string | null;
            user_avatar?: string | null;
            user_description?: string | null;
            bookmark_author?: number | null;
        };
        "Content_2.Methods.Redirects.AbstactRegular": {
            /** Сайт
             *
             *     * topvisor
             *     * thundo */
            site: string;
            /** С поддомена
             *
             *     * 'journal'
             *     * '' */
            subdomain: string;
            /** с пути (маска, * - любой символ) */
            path_mask: string;
        };
        /** Добавление правила редиректа (для админов) */
        "Content_2.Methods.Redirects.Add": {
            /** На путь */
            redirect_path: string;
            /** На поддомен */
            redirect_subdomain: string;
            /** Сайт
             *
             *     * topvisor
             *     * thundo */
            site: string;
            /** С поддомена
             *
             *     * 'journal'
             *     * '' */
            subdomain: string;
            /** с пути (маска, * - любой символ) */
            path_mask: string;
        };
        "Content_2.Methods.Redirects.Del": {
            /** Сайт
             *
             *     * topvisor
             *     * thundo */
            site: string;
            /** С поддомена
             *
             *     * 'journal'
             *     * '' */
            subdomain: string;
            /** с пути (маска, * - любой символ) */
            path_mask: string;
        };
        /** Изменение правила редиректа (для админов) */
        "Content_2.Methods.Redirects.Edit": {
            /** На путь */
            redirect_path: string;
            /** На поддомен */
            redirect_subdomain: string;
            /** Сайт
             *
             *     * topvisor
             *     * thundo */
            site: string;
            /** С поддомена
             *
             *     * 'journal'
             *     * '' */
            subdomain: string;
            /** с пути (маска, * - любой символ) */
            path_mask: string;
        };
        /** Получение списка правил (для админов) */
        "Content_2.Methods.Redirects.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.ContentsRedirects": {
            "PATH_MASK()"?: unknown;
            "PATH_MASK_SLASHES_COUNT()"?: unknown;
            site?: unknown;
            subdomain?: unknown;
            redirect_subdomain?: unknown;
            redirect_path?: unknown;
        };
        /** Получение RSS раздела сайта
         *
         *     Для выборки страниц используется модель: Pages */
        "Content_2.Methods.Rss.Get": {
            /**
             * Страницы раздела сайта в формате XML RSS
             * @default /
             */
            url: string;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Pages": {
            "COUNT(*)"?: unknown;
            "RAND()"?: unknown;
            "DURATION()"?: unknown;
            "WORD_COUNT()"?: unknown;
            "HTML_RAW()"?: unknown;
            "AUTHOR_LIKES()"?: unknown;
            "AUTHOR_VIEWS()"?: unknown;
            "AUTHOR_UNIQUE_VIEWS()"?: unknown;
            "USERS_IDS()"?: unknown;
            site?: unknown;
            subdomain?: unknown;
            url?: unknown;
            lang?: unknown;
            parent_url?: unknown;
            user_id?: unknown;
            user_id_2?: unknown;
            user_id_3?: unknown;
            create?: unknown;
            publish_time?: unknown;
            noindex?: unknown;
            theme?: unknown;
            quiz_id?: unknown;
            state?: unknown;
            required_posts_any?: unknown;
            h1?: unknown;
            title?: unknown;
            description?: unknown;
            intro?: unknown;
            html?: unknown;
            text?: unknown;
            menu_name?: unknown;
            order?: unknown;
            image?: unknown;
            og_json?: unknown;
            og?: unknown;
            tags?: unknown;
            count_views?: unknown;
            count_unique_views?: unknown;
            count_comments?: unknown;
            count_likes?: unknown;
            rubric_name?: unknown;
            user_name?: unknown;
            user_avatar?: unknown;
            user_description?: unknown;
            author_alias?: unknown;
            author_promo_text?: unknown;
            author_promo_label?: unknown;
            author_promo_link?: unknown;
            view?: unknown;
            like?: unknown;
            bookmark?: unknown;
            bookmark_author?: unknown;
        };
        /** Получение xml карты сайта */  
    /**
     * День недели, в который должен производиться запуск cron
     * @enum {string}
     */
        "Content_2.Methods.Sitemap.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Cron_2.Types.Day": "1" | "2" | "3" | "4" | "5" | "6" | "7";
        /** Дни недели, в которые должен производиться запуск cron */
        "Cron_2.Types.Days": components["schemas"]["Cron_2.Types.Day"][];
        /** Час в который должен производиться запуск cron
         *
         *     Пустое значение зарезервированно для запуска cron каждый час
         *
         *     Значение должно находиться в диапазоне от 0 до 23 включительно */
        "Cron_2.Types.Hour": string;
        /** Минута или интервал в минутах в который должен производиться запуск cron
         *
         *     Значение должно находится в диапазоне от 0 до 59 включительно
         *
         *     Если значение является интервалом, в начало ставится символ '*' */
        "Cron_2.Types.Minute": string;
        /** Имя команды cron */
        command: string;
        /** Добавление задачи cron */
        "Cron_2.Methods.Commands.Add": {
            /** Описание задачи */
            description: string;
            days: components["schemas"]["Cron_2.Types.Days"];
            hh: components["schemas"]["Cron_2.Types.Hour"];
            i: components["schemas"]["Cron_2.Types.Minute"];
            /** Статус активности задачи */
            on?: boolean;
            command: components["schemas"]["command"];
        };
        "Models.CronCommands": {
            "SERVICE()"?: unknown;
            command?: string | null;
            description?: string | null;
            days?: string | null;
            hh?: string | null;
            i?: string | null;
            on?: number | null;
            task_create_time?: unknown;
            task_start_time?: unknown;
            task_status?: string | null;
        };
        /** Удаление задачи cron */
        "Cron_2.Methods.Commands.Del": {
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            command: components["schemas"]["command"];
        };
        /** Изменение задачи cron */
        "Cron_2.Methods.Commands.Edit": {
            /** Описание задачи */
            description?: string | null;
            days?: components["schemas"]["Cron_2.Types.Days"] | null;
            hh?: components["schemas"]["Cron_2.Types.Hour"] | null;
            i?: components["schemas"]["Cron_2.Types.Minute"] | null;
            /** Статус активности задачи */
            on?: boolean | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            command: components["schemas"]["command"];
        };
        /** Получение задач cron */
        "Cron_2.Methods.Commands.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение списка имен сервисов, в которых есть команды cron */
        "Cron_2.Methods.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Тип массива: boolean
         *
         *     Принимает: 0|1|false|true
         *
         *     Хранит: false|true */
        "TV.API.Types.BoolArray": boolean[];
        /** @enum {integer} */
        "Example_2.Types.Number": 1 | 2 | 3;
        /** Тип: enum
         *
         *     Принимает: 0|1|false|true
         *
         *     Хранит: false|true */
        "Example_2.Types.EnumNumberArray": components["schemas"]["Example_2.Types.Number"][];
        /** Метод с примерами параметров типа Enum */
        "Example_2.Methods.Array.Get": {
            ints: components["schemas"]["TV.API.Types.IntArray"];
            strings: components["schemas"]["TV.API.Types.StringArray"];
            booleans: components["schemas"]["TV.API.Types.BoolArray"];
            enum_numbers: components["schemas"]["Example_2.Types.EnumNumberArray"];
        };
        /** Получение текущего времени */
        "Example_2.Methods.Custom.Get": {
            /**
             * Формат даты
             *
             *     Не обязательный параметр строкового типа со значением по умолчанию
             *
             *     Можно не указывать, но в exec() он не может быть пустым
             * @default Y-m-d H:i:s
             */
            format: string;
        };
        /** @enum {string} */
        "Example_2.Types.Letter": "a" | "b" | "c";
        /** Метод с примерами параметров типа Enum */
        "Example_2.Methods.Enum.Get": {
            number?: components["schemas"]["Example_2.Types.Number"] | null;
            number2: components["schemas"]["Example_2.Types.Number"];
            letter: components["schemas"]["Example_2.Types.Letter"];
        };
        "Example_2.Objects.Address": {
            city: string;
            street?: string | null;
        };
        "Example_2.Objects.User": {
            name: string;
            age: number;
            address: components["schemas"]["Example_2.Objects.Address"];
        };
        /** Метод с примерами параметров типа Object */
        "Example_2.Methods.Object.Get": {
            user: components["schemas"]["Example_2.Objects.User"];
        };
        /** Получение списка проектов */
        "Example_2.Methods.Projects.Get": {
            /** Имя проекта
             *
             *     Используется для фильтрации по имени проекта, см. self::exec()
             *
             *     Не обязательный параметр метода строкового типа */
            name?: string | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Projects": {
            "COUNT(*)"?: unknown;
            "IS_YOUTUBE()"?: unknown;
            "IS_APP_STORE()"?: unknown;
            "IS_GOOGLE_PLAY()"?: unknown;
            "GEN_SEARCH_STRING()"?: unknown;
            id?: unknown;
            user_id?: unknown;
            name?: string | null;
            url?: unknown;
            date?: unknown;
            last_view?: unknown;
            folder_id?: number | null;
            folder_name?: unknown;
            site?: unknown;
            update?: unknown;
            status_positions?: string | null;
            positions_time?: unknown;
            positions_date?: unknown;
            positions_percent?: unknown;
            status_positions_time?: unknown;
            status_positions_date?: unknown;
            status_positions_percent?: unknown;
            status_positions_by_keywords?: unknown;
            status_volumes?: unknown;
            status_claster?: unknown;
            status_audit?: unknown;
            status_audit_time?: unknown;
            status_audit_percent?: unknown;
            status_watcher?: unknown;
            status_watcher_percent?: unknown;
            status_indexing?: unknown;
            status_indexing_percent?: unknown;
            status_sitemap?: unknown;
            status_sitemap_percent?: unknown;
            status_urlsUpdater?: unknown;
            on?: unknown;
            subdomains?: unknown;
            filter?: unknown;
            auto_correct?: unknown;
            with_snippets?: unknown;
            do_snapshots?: unknown;
            do_snapshots_with_snippets?: unknown;
            report_last_time?: unknown;
            common_traffic?: unknown;
            guest_link_right?: unknown;
            is_task?: unknown;
            count_keywords?: unknown;
            right?: unknown;
            ord?: unknown;
            favorite?: unknown;
            tags?: unknown;
            user_email?: unknown;
            user_currency?: unknown;
            broker_count_campaigns?: unknown;
            broker_count_banners?: unknown;
            broker_count_banners_off?: unknown;
            domain_expire?: unknown;
            ssl_expire?: unknown;
            competitor?: unknown;
            competitor_ord?: unknown;
            pos_summary_up?: unknown;
            pos_summary_stay?: unknown;
            pos_summary_down?: unknown;
            pos_summary_avg?: unknown;
            pos_summary_visibility?: unknown;
        };
        /**
         * Куда добавлять добавляемые группы
         * @enum {string}
         */
        "Keywords_2.Types.Collect.ToType": "in_folder" | "in_folder_last";
        /**
         * Валюта
         *
         *     Этот общий тип, не зависящий от контекста
         *
         *     Дополниетольно нужно проверять в API методах через site()->checkAllowCurrency() в функции check()
         * @enum {string}
         */
        "TV.API.Types.Currency": "RUB" | "USD";
        "Keywords_2.Methods.Collect.AbstractRegular": {
            /** ID проекта */
            project_id: number;
            /** Список исходных запросов */
            keywords: (string | number)[];
            /**
             * Объекты определителей настроек ПС и регионов
             * @description @var array<int, array{region_key: int, searcher_key: (0 | 1 | 5 | 100 | 101 | 102 | 104 | 105 | 106), region_lang?: (string | null), also_searched?: (int | null), depth?: (int | null), hint_depth: (1 | 2 | 3), hint_generators: array<('letter' | 'letter_ru' | 'number' | 'space')>}>
             */
            qualifiers: (string | number)[];
            /** Минус фразы (только для searcher_key = 0 и searcher_key = 1) */
            keywords_minus?: (string | number)[];
            /** Id группы для размещения подобранных запросов */
            to_group_id?: number | null;
            /** Id папки для новых групп */
            to_id?: number;
            /** @default in_folder_last */
            to_type: components["schemas"]["Keywords_2.Types.Collect.ToType"];
            /** Собирать все запросы в одну группу (не несет смысл, если указан to_group_id) */
            in_one_group?: boolean;
            currency?: components["schemas"]["TV.API.Types.Currency"] | null;
            debug?: string | null;
        };
        /** Получение списка запросов проекта */
        "Keywords_2.Methods.Keywords.Get": {
            /** Id проекта */
            project_id: number;
            /** При фильтрации по ID папок также искать в подпапках */
            group_folder_id_depth?: boolean;
            /** Проверить корзину */
            show_trash?: boolean;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Keywords": {
            "COUNT(*)"?: unknown;
            "LENGTH(name)"?: unknown;
            "tagsNames()"?: unknown;
            id?: unknown;
            phrase_id?: unknown;
            project_id?: unknown;
            group_id?: unknown;
            tags?: unknown;
            target?: unknown;
            ord?: unknown;
            name?: unknown;
            group_name?: unknown;
            group_on?: unknown;
            group_ord?: unknown;
            group_folder_id?: unknown;
            group_folder_path?: unknown;
            group_folder_ord?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "region_index"
             *       ]
             *     } */
            target_status?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "project_id",
             *         "region_index"
             *       ]
             *     } */
            position?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "project_id",
             *         "region_index"
             *       ]
             *     } */
            relevant_url?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "project_id",
             *         "region_index"
             *       ]
             *     } */
            snippet_title?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "project_id",
             *         "region_index"
             *       ]
             *     } */
            snippet_body?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "project_id",
             *         "region_index"
             *       ]
             *     } */
            snippet_ext?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "project_id",
             *         "region_index"
             *       ]
             *     } */
            visitors?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "region_index"
             *       ]
             *     } */
            positionStatus?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "region_key",
             *         "searcher_key",
             *         "type"
             *       ]
             *     } */
            volume?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "position",
             *         "region_key",
             *         "searcher_key"
             *       ]
             *     } */
            cost_forecast?: unknown;
        };
        /** Получение частоты проекта или одной группы */
        "Keywords_2.Methods.Volumes.Get": {
            /** Id проекта */
            project_id: number;
            /** Ключ поисковика */
            searcher_key: number;
            /** Ключ региона */
            region_key: number;
            /** Индекс тип частоты */
            type: number;
            /** Id группы */
            group_id?: number | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Groups": {
            "COUNT(*)"?: unknown;
            id?: unknown;
            project_id?: unknown;
            folder_id?: unknown;
            name?: unknown;
            on?: unknown;
            status?: unknown;
            ord?: unknown;
            folder_path?: unknown;
            folder_ord?: unknown;
            count_keywords?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "region_key",
             *         "searcher_key",
             *         "type"
             *       ]
             *     } */
            volume?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "project_id",
             *         "region_index"
             *       ]
             *     } */
            "POSITIONS_AVG()"?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "project_id",
             *         "region_index"
             *       ]
             *     } */
            "POSITIONS_TOP10()"?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "project_id",
             *         "region_index"
             *       ]
             *     } */
            "POSITIONS_VISIBILITY()"?: unknown;
        };
        /**
         * Создать Open API схемы и скачать в zip
         *
         *     В результате вернет zip файл в потоке вывода
         * @description @see https://editor.swagger.io/ Редактор Open API
         */
        "OpenAPI_2.Methods.Download.Get": {
            /**
             * Формат схемы Open API, json или yaml
             * @default json
             */
            format: string;
        };
        /** Получение компании пользователя, через которых, были совершены платежи */
        "Payments_2.Methods.Companies.Get": Record<string, never>;
        /** Подписание контракта (только для админов) */
        "Payments_2.Methods.ContractSign.Edit": {
            /** Номер договора/оферты для платежа */
            requisites_id: string;
            /** Флаг обозначающий подписан ли контракт */
            signed: boolean;
        };
        /** Изменение платежных реквизитов тарифа */
        "Payments_2.Methods.NextRequisitesId.Edit": {
            /** ID следующего запроса */
            next_requisites_id: string;
        };
        /** Отправка заявки на подключение Тинькофф Бизнес */
        "Payments_2.Methods.UrTinkoffCreateApplication.Add": Record<string, never>;
        /** Валидация домена для подтверждения оплаты Apple Pay (system = card_ap) */
        "Payments_2.Methods.ValidateMerchantCardAP.Get": {
            /** URL для запроса к Apple Pay */
            validation_url: string;
        };
        /**
         * Id поисковой системы для проверки позиций
         * @enum {integer}
         */
        "Positions_2.Types.SearcherKey": 0 | 20 | 21 | 1 | 4 | 5 | 7 | 8 | 9;
        /** Добавление ПС */
        "Positions_2.Methods.Searchers.Add": {
            /** Id проекта */
            project_id: number;
            /** Ключ ПС */
            searcher_key: components["schemas"]["Positions_2.Types.SearcherKey"];
        };
        /** Удаление ПС */
        "Positions_2.Methods.Searchers.Del": {
            /** Id проекта */
            project_id: number;
            /** Id проекта */
            searcher_key: components["schemas"]["Positions_2.Types.SearcherKey"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /**
         * Право для гостевых ссылок
         * @enum {string}
         */
        "Positions_2.Types.Settings.GuestLinkRight": "volume" | "frequency" | "visitors" | "dates" | "summary" | "graphics" | "competitors";
        /** Права для гостевых ссылок */
        "Positions_2.Types.Settings.GuestLinkRights": components["schemas"]["Positions_2.Types.Settings.GuestLinkRight"][];
        /** Установка общих настроек проверки позиций проекта */
        "Positions_2.Methods.Settings.Edit": {
            /** Id проекта */
            project_id: number;
            /** Собирать ли снипиты */
            with_snippets?: boolean | null;
            /** Глубина сбора снимков
             *
             *     enum(0..9)
             *     - 0: не собирать
             *     - 1: 10
             *     - 8: 80
             *     - 9: 100 */
            do_snapshots?: number | null;
            /** Собирать ли сниппеты в снимках */
            do_snapshots_with_snippets?: boolean | null;
            /** Учитывать ли поддомены при проверке
             *
             *     - 1: находить позиции сайта, являющиеся поддоменом к основному */
            subdomains?: boolean | null;
            /** Ограничения
             *
             *     - 0: без ограничений
             *     - 1: умеренный
             *     - 2: семейный поиск */
            filter?: number | null;
            /** Учитывать ли регион */
            auto_correct?: boolean | null;
            /** Способ получения трафика
             *
             *     - 0: с учетом регионов
             *     - 1: без учета регионов */
            common_traffic?: boolean | null;
            /** Права для гостевых ссылок */
            guest_link_right?: components["schemas"]["Positions_2.Types.Settings.GuestLinkRights"] | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /**
         * Номер метрики
         * @enum {integer}
         */
        "Projects_2.Types.Analytics.Axe": 1 | 2 | 3 | 4 | 11 | 12 | 13;
        /**
         * Тип группировки
         * @enum {integer}
         */
        "Projects_2.Types.Analytics.Base": 1 | 11 | 13 | 2 | 3 | 6 | 4 | 5 | 12;
        /** Добавление графика */
        "Projects_2.Methods.Analytics.Add": {
            /** ID проекта */
            project_id: number;
            /** Номер метрики */
            axe: components["schemas"]["Projects_2.Types.Analytics.Axe"];
            /** Тип группировки */
            base_filter: components["schemas"]["Projects_2.Types.Analytics.Base"];
            /** Id графика, после которого нужно вставить новый график */
            insert_after_id?: number | null;
            /** Маленький график */
            narrow?: number | null;
            /** Сделать график доступным другим пользователям проекта (может настраивать только владелец проекта) */
            share?: number | null;
        };
        /** Удаление графика */
        "Projects_2.Methods.Analytics.Del": {
            /** ID графика */
            id: number;
        };
        /** Настройка графика */
        "Projects_2.Methods.Analytics.Edit": {
            /** ID графика */
            id: number;
            /** Данные графика */
            data?: string | null;
            /** Id графика, после которого нужно вставить новый график */
            insert_after_id?: number | null;
            /** Маленький график */
            narrow?: number | null;
            /** Сделать график доступным другим пользователям проекта (может настраивать только владелец проекта) */
            share?: number | null;
        };
        /** Получение списка графиков */
        "Projects_2.Methods.Analytics.Get": {
            /** ID проекта */
            project_id: number;
            /** ID */
            id?: number | null;
        };
        /** Краткий URL в punycode, не может содержать UTF-символы:
         *     - без схемы
         *     - без "www." в домене
         *     - без слешей на конце
         *     - без "<" и ">"
         *
         *     Будет проивзедено автоматическое приведение к формату
         *
         *     Разрешен ввод пустой строки, для удаления значения url */
        "TV.API.Types.UrlShort": string;
        /**
         * Тип массива: UrlShort[]
         * @description @see UrlShort
         */
        "TV.API.Types.UrlShortArray": components["schemas"]["TV.API.Types.UrlShort"][];
        /** Добавление конкурента
         *
         *     Ограничения: не более Projects_2\Competitors::MAX_COMPETITORS_PER_PROJECT конкурентов в одном проекте */
        "Projects_2.Methods.Competitors.Add": {
            /** ID проекта */
            project_id: number;
            /** Список url конкурентов */
            urls: components["schemas"]["TV.API.Types.UrlShortArray"];
            /** Список имен конкурентов (если указан, должен быть такой же длины как urls) */
            names?: (string | number)[] | null;
        };
        /** Удаление конкурентов
         *
         *     Обязательный параметр или ids или urls */
        "Projects_2.Methods.Competitors.Del": {
            /** ID проекта */
            project_id: number;
            /** ID конкурентов */
            ids?: components["schemas"]["TV.API.Types.IntArray"] | null;
            /** Url конкурентов */
            urls?: components["schemas"]["TV.API.Types.UrlShortArray"] | null;
        };
        /** Получение списка конкурентов */
        "Projects_2.Methods.Competitors.Get": {
            /** @default [
             *       "id",
             *       "name",
             *       "site",
             *       "on"
             *     ] */
            fields: (string | number)[];
            /** ID проекта */
            project_id: number;
            /** Вернуть ли в результате только включенных конкурентов */
            only_enabled?: boolean | null;
            /** Включить ли в результат основной проект */
            include_project?: boolean | null;
        };
        /** Добавление папки */
        "Projects_2.Methods.Folders.Add": {
            /** Имя папки */
            name: string;
        };
        /** Удаление папок */
        "Projects_2.Methods.Folders.Del": {
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        "Models.Projects.Folders": {
            id?: unknown;
            user_id?: unknown;
            name?: unknown;
            order?: unknown;
        };
        /** Получение списка папок */
        "Projects_2.Methods.Folders.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Добавление проекта */
        "Projects_2.Methods.Projects.Add": {
            /** Url проекта (домен или url страницы) */
            url: components["schemas"]["TV.API.Types.UrlShort"];
            /** Имя проекта (по умолчанию равен url проекта) */
            name?: string | null;
            /**
             * enum(1..10) tags - теги проекта (по умолчанию - [1])
             * @default [
             *       1
             *     ]
             */
            tags: (string | number)[];
            /** Id папки, к которой будет привязан проект */
            folder_id?: number | null;
            /** Активность проекта */
            on?: number | null;
            /** Является ли проект задачей */
            is_task?: boolean | null;
        };
        /** Удаление проектов */
        "Projects_2.Methods.Projects.Del": {
            /** Является ли проект - задачей */
            is_tasks?: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение списка проектов */
        "Projects_2.Methods.Projects.Get": {
            /** Добавить ли в результаты баланс владельца для гостевых проектов */
            show_owner_balance?: boolean | null;
            /** Добавить ли в результат дополнительно собираемую инфомрацию (Яндекс ИКС) */
            show_site_stat?: boolean | null;
            /** Добавить в результат список ПС и Регионов, привязанных к проекту
             *
             *     - 1 - включенные
             *     - 2 - все */
            show_searchers_and_regions?: number;
            /**
             * Добавить в результат сводку проверки позиций
             * @description @see /get/positions_2/summary/
             */
            include_positions_summary?: boolean | null;
            /**
             * Добавить в результат сводку с указанными параметрами
             * @deprecated
             */
            include_positions_summary_params?: (string | number)[] | null;
            /** Является ли проект задачей */
            is_task?: boolean | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Удаление прав у пользователя */
        "Projects_2.Methods.Rights.Del": {
            /** Email пользователя (если пользователь не зарегистрирован будет выслано приглашение) */
            email: components["schemas"]["TV.API.Types.Email"];
            /** ID проектов
             *
             *     Вместо project_ids можно укзывать project_id */
            projects_ids?: (string | number)[] | null;
            /** ID проекта
             *
             *     Вместо project_id можно укзывать projects_ids */
            project_id?: number | null;
        };
        /** Изменение прав на проект */
        "Projects_2.Methods.Rights.Edit": {
            /** Вместо project_ids можно укзывать project_id */
            projects_ids?: (string | number)[] | null;
            /** Email пользователя (если пользователь не зарегистрирован будет выслано приглашение) */
            email: components["schemas"]["TV.API.Types.Email"];
            /** Побитовая маска прав */
            rights?: components["schemas"]["TV.API.Types.BoolArray"] | null;
            /** ID проекта
             *
             *     Вместо project_id можно укзывать projects_ids */
            project_id?: number | null;
            /** Имя гостевого пользователя, назначаемое хозяином проекта */
            user_name?: string | null;
            /** Лимит трат пользователем в месяц */
            limit?: number | null;
        };
        /** Получение информации о настройке прав и смене владельца */
        "Projects_2.Methods.Rights.Get": {
            /** ID проекта */
            project_id: number;
        };
        /** Получение информации о домене и SSL сертификате
         *     Возвращает объект с параметрами:
         *     - domain_expire
         *     - ssl_expire */
        "Projects_2.Methods.Status.Get": {
            /** ID проекта */
            project_id: number;
        };
        /** Получение списка задач */
        "Projects_2.Methods.Tasks.Get": {
            /** Добавить ли в результаты баланс владельца для гостевых проектов */
            show_owner_balance?: boolean | null;
            /** Добавить ли в результат дополнительно собираемую инфомрацию (Яндекс ИКС) */
            show_site_stat?: boolean | null;
            /** Добавить в результат список ПС и Регионов, привязанных к проекту
             *
             *     - 1 - включенные
             *     - 2 - все */
            show_searchers_and_regions?: number;
            /**
             * Добавить в результат сводку проверки позиций
             * @description @see /get/positions_2/summary/
             */
            include_positions_summary?: boolean | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Удалить привязанную карту (system = card) */
        "Recurring_2.Methods.RecurringCard.Del": {
            /** Id карты в системе Тинькофф */
            card_id: number;
        };
        /** Получение привязанных карт пользователя */
        "Recurring_2.Methods.RecurringCard.Get": Record<string, never>;
        /** Загрузка файла на сервер
         *
         *     Процесс создания сообщения в тикет не завершен */
        "Tickets_2.Methods.Files.Add": {
            /** Имя файла */
            filename: string;
        };
        /** Удаление временных файлов для тикета
         *
         *     Процесс создания поста не завершен */
        "Tickets_2.Methods.Files.Del": {
            /** Название дирректории */
            name: string;
        };
        /** Получение списка временных файлов, загруженных для тикета
         *
         *     Процесс создания поста не завершен */
        "Tickets_2.Methods.Files.Get": Record<string, never>;
        /** Добавление сообщения к тикиту */
        "Tickets_2.Methods.Messages.Add": {
            /** Id тикета */
            ticket_id: number;
            /** Текст сообщения */
            text: string;
            /** Не проводить рассылку уведомлений */
            is_silent?: boolean;
        };
        /** Дать оценку тикету */
        "Tickets_2.Methods.Rate.Edit": {
            /** ID тикета */
            id: number;
            /** Оценка
             *
             *     Принимает оценку от 1 до 3 */
            rate?: number | null;
            /** Комментарий */
            comment?: string | null;
        };
        /**
         * Откуда поступил тикет
         * @enum {string}
         */
        "Tickets_2.Types.Tickets.Type": "system" | "other" | "email" | "ios" | "vk" | "chrome" | "twitter" | "facebook" | "telegram" | "android" | "guest";
        /** Создание тикета */
        "Tickets_2.Methods.Tickets.Add": {
            /** Текст тикета */
            text: string;
            /** @default system */
            type: components["schemas"]["Tickets_2.Types.Tickets.Type"];
            /** Язык тикета, нужен для подгрузки правильного языка в ответных письмах через почту */
            lang?: components["schemas"]["TV.API.Types.Lang"] | null;
            /** Данные среды пользователя */
            user_data?: (string | number)[] | null;
            /** URL страницы, с которой отправлен тикет
             *
             *     Не используется, если указан user_data */
            resource?: string | null;
            /** Не проводить рассылку уведомлений */
            is_silent?: boolean;
            /** Необходим только для незарегистрированных пользователей */
            email?: components["schemas"]["TV.API.Types.Email"] | null;
            /**
             * Id пользователя внутри социальной сети, из которой был отправлен тикет
             *
             *     Может быть в любом виде
             * @description @type string | int
             */
            social_user_id?: unknown;
            /** Данные для авторизации в сервисе-конкуренте для переноса проектов
             *
             *     Недокументированный параметр */
            secret?: string | null;
            /** Номер задачи redmine, связанной с тикетом
             *
             *     Недокументированный параметр */
            task_id?: number;
        };
        /** Редактирование тикета */
        "Tickets_2.Methods.Tickets.Edit": {
            /** Id тикета */
            id: number;
            /** Флаг того, что тикет закрыт */
            status?: boolean | null;
        };
        /** Получение списка тикетов с сообщениями */
        "Tickets_2.Methods.Tickets.Get": {
            fields_messages?: (string | number)[] | null;
            /** Добавить в результат данные пользователей, написавших сообщения в тикеты */
            show_messages_users?: boolean;
            /** Добавить в результат данные о том, что пишет собеседник */
            show_writings?: boolean;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Tickets": {
            "REQUISITES()"?: unknown;
            "LAST_MESSAGE_TEXT()"?: unknown;
            "LAST_MESSAGE_USER_ID()"?: unknown;
            "READED(0)"?: unknown;
            "READED(1)"?: unknown;
            id?: unknown;
            site?: unknown;
            user_id?: unknown;
            social_user_id?: unknown;
            type?: unknown;
            text?: unknown;
            create?: unknown;
            time?: unknown;
            status?: unknown;
            lang?: unknown;
            email?: unknown;
            user_data?: unknown;
            manager_id?: unknown;
            owner_readed?: unknown;
            answerer_readed?: unknown;
            admin_writing?: unknown;
            task_id?: unknown;
            tags?: unknown;
            rate?: unknown;
            rate_comment?: unknown;
            rate_time?: unknown;
            admin_comment?: unknown;
            "VS_USER_IS_ONLINE()"?: unknown;
            vs_user_name?: unknown;
            vs_user_email?: unknown;
            vs_user_avatar?: unknown;
            vs_user_lastactive?: unknown;
            social_nickname?: unknown;
            social_network?: unknown;
            social_last_message_time?: unknown;
            social_name?: unknown;
            social_type?: unknown;
            social_post_id?: unknown;
            social_reply_to_id?: unknown;
            message_id?: unknown;
            message_user_id?: unknown;
            message_text?: unknown;
            message_data?: unknown;
            message_files?: unknown;
            message_time?: unknown;
            message_noticed?: unknown;
        };
        /**
         * Формат экспорта urls
         * @enum {string}
         */
        "Urls_2.Types.Export.Output": "csv" | "csvUTF8s" | "xml";
        /** Экспорт urls в определенном формате */  
        /** Вывести fieldName в заголовках столбцов (для CSV) */
        "Urls_2.Methods.Export.Get": {
            output: components["schemas"]["Urls_2.Types.Export.Output"];
            show_fields_names?: boolean;
            /** Вывести fieldLabel в заголовках столбцов (для CSV) */
            show_fields_labels?: boolean;
            /** Вернуть данные в формате для копироваиня в буфер обмена
             *
             *     Не более 2000 результатов */
            forClipboard?: boolean;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Тип массива: Url[]
         * @description @see Url
         */
        "TV.API.Types.UrlArray": components["schemas"]["TV.API.Types.Url"][];
        /** Импортирование urls
         *
         *     Доступные поля для импорта:
         *     - url
         *     - sitemap
         *     - audit
         *     - indexing
         *     - watcher
         *     - tags */
        "Urls_2.Methods.Import.Add": {
            /** Список URL соответствующих домену проекта, допускается формат CSV
             *
             *     Можно передать в виде файла с именем urls, допускаются форматы CSV и XML (допустимы сжатые XML в .gz)
             *
             *     Нельзя передавать одновременно в виде массива и в виде файла или использовать совместно с link_sitemap_xml */
            urls?: components["schemas"]["TV.API.Types.UrlArray"] | null;
            /** Файл с содержимым для импорта, допускается формат XML (допустимы сжатые XML в .gz) */
            link_sitemap_xml?: components["schemas"]["TV.API.Types.Url"] | null;
            tags?: components["schemas"]["Tags_2.Types.TagsIds"] | null;
            /** Очистить список URL перед импортом */
            reset?: boolean;
            /** Недокументириуемый параметр
             *
             *     set(Audit_2\Types\Type => regexp) */
            setActiveByRegexpByType?: (string | number)[];
            /** Флаг активности в карте сайта
             *     - 1 - присутствовал в прошлых версиях карты сайта */
            sitemap?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в аудите */
            audit?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в радаре */
            indexing?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в индексации */
            watcher?: components["schemas"]["Urls_2.Types.Flag"] | null;
            debug?: boolean | null;
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Способ установки тегов
         * @enum {string}
         */
        "Urls_2.Types.Tags.Action": "set" | "add" | "remove";
        /** Изменение тегов */
        "Urls_2.Methods.Tags.Edit": {
            tags: components["schemas"]["Tags_2.Types.TagsIds"];
            action: components["schemas"]["Urls_2.Types.Tags.Action"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            project_id: components["schemas"]["project_id"];
        };
        /** Добавление комментария к отзыву
         *
         *     Оставить комментарий можно в течение часа поосле выставления оценки */
        "Votes_2.Methods.Comment.Edit": {
            /** Id отзыва */
            id: number;
            /** Комментарий */
            comment: string;
        };
        /** Изменение параметров контрагента */
        "Admin_2.Methods.Accounting.Counteragents.Edit": {
            name: string;
            document_number?: string | null;
            comments?: string | null;
            comments_2?: string | null;
        };
        /** Получение контрагента */
        "Admin_2.Methods.Accounting.Counteragents.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Admin.Accounting.Counteragents": {
            "GROUPS_NAMES()"?: unknown;
            id?: number;
            name?: string | null;
            inn?: string | null;
            document_number?: string | null;
            comments?: string | null;
            comments_2?: string | null;
            in_several_groups?: unknown;
            group_id?: unknown;
        };
        "Admin_2.Methods.Accounting.Group.Edit": {
            /** Id группы */
            group_id?: number | null;
            /** Имя группы (если передан group_id - будет редактирование имени группы) */
            name?: string | null;
            /** Приоритет группы (если передан group_id - будет редактирование приоритета группы) */
            priority?: string | null;
            /** Имя контрагента (для фильтра) */
            counteragent_name?: string | null;
            /** ИНН контрагента (для фильтра) */
            counteragent_inn?: string | null;
            /** Назначение операции (для фильтра) */
            purpose?: string | null;
            /** Тип
             *
             *     - plus
             *     - minus
             *
             *     Указывать, когда указывается одно из следующих полей [counteragent_name, counteragent_inn, purpose] */
            type?: string | null;
        };
        /** Получение групп */
        "Admin_2.Methods.Accounting.Group.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.EmptyModel": unknown;
        /** Добавление счета на оплату */
        "Admin_2.Methods.Accounting.Invoices.Add": {
            /** Дата документа */
            document_date: components["schemas"]["TV.API.Types.Date"];
            /** Номер документа */
            document_number: string;
            /** Имя файла */
            file_name: string;
            /** Данные файла */
            file_data: string;
            /** Имя организации */
            org_name: string;
            /** ИНН */
            inn: string;
            /** Сумма */
            sum: number;
        };
        /** Отмена отправки счета. Разрешено только для счетов со статусом pending или sending */
        "Admin_2.Methods.Accounting.Invoices.Del": {
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        "Models.Admin.Invoices": {
            id?: unknown;
            time?: unknown;
            external_name?: unknown;
            external_id?: unknown;
            document_date?: unknown;
            document_number?: unknown;
            org_name?: unknown;
            inn?: unknown;
            sum?: unknown;
            file_name?: unknown;
            file_data?: unknown;
            user_id?: unknown;
            status?: unknown;
        };
        /** Получение счетов на оплату */
        "Admin_2.Methods.Accounting.Invoices.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение внутренних операций */
        "Admin_2.Methods.Accounting.Operations.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Создание и проведение транзакции */
        "Admin_2.Methods.Actions.Bank.Edit": {
            /** Операция
             *
             *     - 2: бонусное пополнение
             *     - 1: пополнение
             *     - -1: списание */
            action: number;
            /** ID пользователя */
            userId: number;
            /** Сумма */
            sum: number;
            /** Причина */
            purpose: string;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Результат выполнения действия */
        "Admin_2.Objects.Actions.Result": {
            /** Запущено ли дейсвтие в тестовом режиме */
            isTest: boolean;
            /** Ассоциативный массив с информацией, связанной с выполняемым дейсвтием */
            info: (string | number)[];
            /** Время выполнения дейсвтия */
            executionTime: number;
            /** Информация о затраченных ресурсавах при выполнении дейсвтия */
            memory: (string | number)[];
        };
        /** Отмена проведения счета */
        "Admin_2.Methods.Actions.Payments.Del": {
            /** ID пользователя */
            userId: number;
            /** ID платежа */
            paymentId: number;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Проведение счета */
        "Admin_2.Methods.Actions.Payments.Edit": {
            /** ID пользователя */
            userId: number;
            /** ID платежа */
            paymentId: number;
            /** Сумма */
            sum?: number | null;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Востановление удаленной проверки */
        "Admin_2.Methods.Actions.Positions.Edit": {
            /** ID проекта */
            projectId: number;
            /** Дата */
            date: components["schemas"]["TV.API.Types.Date"];
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Востановление удаленного проекта */
        "Admin_2.Methods.Actions.Projects.Edit": {
            /** ID проекта */
            projectId: number;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Сбор статистики и трафика */
        "Admin_2.Methods.Actions.Projects.Get": {
            /** ID проекта */
            projectId: number;
            /** С какой даты */
            date1?: components["schemas"]["TV.API.Types.Date"] | null;
            /** По какую дату */
            date2?: components["schemas"]["TV.API.Types.Date"] | null;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Добавление бота в телеграм канал */
        "Admin_2.Methods.Actions.Telegram.Add": {
            /** Название бота */
            botName: string;
            /** ID чата для добавления */
            chatId: string;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Получение общей статистики по реферальной программе */
        "Admin_2.Methods.Affiliate.ReferralProgramStats.Get": Record<string, never>;
        /** Получение сводки числа рефералов по своему уровню */
        "Admin_2.Methods.Affiliate.ReferralsByLevel.Get": {
            /** Год для сводки */
            year: number;
            /** Валюта реферало */
            currency: components["schemas"]["TV.API.Types.Currency"];
        };
        /** Получение сводки по новым рефералам */
        "Admin_2.Methods.Affiliate.Referrals.Get": {
            /**
             * Год
             * @default 2013
             */
            year: number;
            /** Валюта партнеров */
            currency: components["schemas"]["TV.API.Types.Currency"];
        };
        /** Получение сводки числа партнеров по числу рефералов */
        "Admin_2.Methods.Affiliate.ReferrersByReferrals.Get": {
            /** Год для сводки */
            year: number;
            /** Валюта партнеров */
            currency: components["schemas"]["TV.API.Types.Currency"];
        };
        /** Получение сводки по новым партнерам */
        "Admin_2.Methods.Affiliate.Referrers.Get": {
            /** Год */
            year: number;
            /** Валюта партнеров
             *
             *      - RUB
             *      - USD */
            currency: components["schemas"]["TV.API.Types.Currency"];
        };
        /** Получение партнеров c кол-вом рефералов */
        "Admin_2.Methods.Affiliate.ReferrersWithReferrals.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение активности пользователей по статусам активности
         *     статусы активности:
         *            1. Активный - клиент, который пополнял баланс в сервисе хотя бы раз. При этом трата средств в течение месяца не мнее 100 рублей (или $5).
         *            2. Активный (новый) - в эту категорию попадают клиенты, которые первый раз перешли в статус "Активного клиента".
         *            3. Активный (постоянный) - в эту категорию попадют клиенты, которые не меняли свой статус активности за последний месяц
         *            4. Активный (вернувшийся) - в эту категорию попадют клиенты, которые вернули себе статус "Активный клиент".
         *            5. Стал не активным - в эту категорию попадют клиенты, которые потеряли статус "Активного клиента" и на протяжении 2 месяцев не возвращали
         *     себе этот статус. */
        "Admin_2.Methods.Analytics.Activity.Get": {
            currency: components["schemas"]["TV.API.Types.Currency"];
            /** Валюта */
            limit: number;
            /** Дата */
            date: components["schemas"]["TV.API.Types.Date"];
        };
        /** Получение числа активных пользователей */
        "Admin_2.Methods.Analytics.CountOnlineUsers.Get": Record<string, never>;
        /** Получение мероприятий */
        "Admin_2.Methods.Analytics.Events.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Analytics.Events": {
            COUNT?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "action",
             *         "category",
             *         "label",
             *         "label_2",
             *         "label_3"
             *       ]
             *     } */
            COUNT_QUALIFIERS?: unknown;
            time?: unknown;
            category?: unknown;
            action?: unknown;
            label?: unknown;
            label_2?: unknown;
            label_3?: unknown;
            user_id?: unknown;
            hash_id?: unknown;
        };
        /**
         * Имя сегмента, на которые делится период отчета
         *
         *     Отчет делится на равные части - сегменты, за каждый сегмент выводится сводка с агрегацией по этому сегменту
         *
         *     Пример: вывод количества регистраций за каждый **месяц** в отчете
         * @enum {string}
         */
        "Admin_2.Types.Analytics.Segment": "day" | "month" | "year";
        /** Получение суммы оплат за период */
        "Admin_2.Methods.Analytics.Payments.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            /** Длина периода */
            limit: number;
        };
        "Admin_2.Methods.Analytics.Get": {
            /** Дата */
            date: components["schemas"]["TV.API.Types.Date"];
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            currency: components["schemas"]["TV.API.Types.Currency"];
            /** Имя поля
             *
             *     - sum
             *     - discount
             *     - count_users */
            field_name: string;
            /** Длина периода */
            limit?: number | null;
        };
        /** Получение статистики */
        "Admin_2.Methods.Analytics.Statistics.Get": Record<string, never>;
        "Admin_2.Methods.Analytics.Tickets.AbstractTicketsStats": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            /** Длина периода */
            limit: number;
            /** Максимальная дата отчета */
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение тикетов */
        "Admin_2.Methods.Analytics.Tickets.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение категорий словаря */
        "Admin_2.Methods.I18n.Categories.Get": Record<string, never>;
        /** Получение данных из системного лога */
        "Admin_2.Methods.Logs.System.Get": {
            fields?: components["schemas"]["fields"];
            orders?: components["schemas"]["orders"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset?: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Admin_2.Methods.Ranks.Activations.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Analytics.RanksUsers": {
            code?: unknown;
            email?: unknown;
            rank?: unknown;
            retention_week?: unknown;
            retention_month?: unknown;
            payment_week?: unknown;
            payment_month?: unknown;
            payment_month_6?: unknown;
            payment_year?: unknown;
            new_user?: unknown;
            returned_user?: unknown;
            quitted_user?: unknown;
        };
        /** Рейтинг по сообщениям в слеке за предыдущий месяц */
        "Admin_2.Methods.Slack.Rate.Get": Record<string, never>;
        /** Настройка доступа */
        "Admin_2.Methods.Staff.Access.Edit": {
            /** ID пользователя */
            user_id: number;
            /** Название доступа
             *
             *     - ftp
             *     - mysql
             *     - vpn
             *     - httpAuth */
            name: string;
            /** Подкатегория доступа */
            category: string;
            /** Выдать или забрать доступ */
            value: boolean;
            /** Перевыдать доступ, сбросить пароль */
            recreate?: boolean | null;
            /** Логин администратора */
            login?: string | null;
            /** Пароль администратора */
            password?: string | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение из бд данные сотрудников указанного поста */
        "Admin_2.Methods.Staff.ByPost.Get": {
            /** Пост сотрудников */
            post: string;
        };
        /** Печать договора */  
        /** Параметры, передаваемые в шаблон */
        "Admin_2.Methods.Staff.ContractPrint.Get": {
            props: (string | number)[];
        };
        /** Получение возможных posts */
        "Admin_2.Methods.Staff.Posts.Get": Record<string, never>;
        /** Добавление отпуска для сотрудника */
        "Admin_2.Methods.Staff.Vacation.Add": {
            /** ID юзера */
            user_id: number;
            /** Дата начала */
            date1: components["schemas"]["TV.API.Types.Date"];
            /** Дата окончания */
            date2: components["schemas"]["TV.API.Types.Date"];
            /** Тип
             *
             *     - vacation
             *     - day_off */
            type: (string | number)[];
        };
        /** Удаление данных об отпуске */
        "Admin_2.Methods.Staff.Vacation.Del": {
            /** ID события */
            id: number;
        };
        /** Печать заявления на отпуск */
        "Admin_2.Methods.Staff.VacationPrint.Get": {
            id: number;
        };
        /** Получение схему HTML шаблона */
        "Admin_2.Methods.Tpl.Schema.Get": {
            /** Путь к шаблону */
            tpl: string;
            /** Язык шаблона (при пустом значении используется язык пользователя) */
            lang?: components["schemas"]["TV.API.Types.Lang"] | null;
        };
        /** Добавление промокоды к достижению */
        "Admin_2.Methods.Users.Promocodes.Add": {
            rank_id: number;
            /** single_code - многоразовый промокод */
            single_code?: string | null;
            /** Список многоразовых промокодов */
            codes?: (string | number)[] | null;
        };
        "Models.Users.Verif": {
            email?: unknown;
            code?: unknown;
            action?: unknown;
            params?: unknown;
            data?: unknown;
            date?: unknown;
        };
        /** Получение промокодов
         *
         *     В params хранится строка в формате:
         *     - {{ rank_id }}
         *     - {{ rank_id }},single_code - для многоразового кода */
        "Admin_2.Methods.Users.Promocodes.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** @enum {string} */
        "Admin_2.Types.Users.Ranks.Category": "" | "journal";
        /** Добавление достижение */
        "Admin_2.Methods.Users.Ranks.Add": {
            name_id?: string | null;
            category?: components["schemas"]["Admin_2.Types.Users.Ranks.Category"] | null;
            name_ru?: string | null;
            name_en?: string | null;
            descr_ru?: string | null;
            descr_en?: string | null;
            descr_how_to_use_ru?: string | null;
            descr_how_to_use_en?: string | null;
            bonus_RUB?: number | null;
            bonus_USD?: number | null;
            cashback_expenses?: number | null;
            cashback_first_payment?: number | null;
            discount?: number | null;
            referrer_id?: number | null;
            from_date?: string | null;
            to_date?: string | null;
            max_count_usage?: number | null;
            currency?: string | null;
            only_new_users?: boolean | null;
            color?: string | null;
            always_visible?: boolean | null;
        };
        "Models.Admin.Users.Ranks": {
            "COUNT_CODES()"?: unknown;
            id?: unknown;
            name_id?: unknown;
            category?: unknown;
            name?: unknown;
            name_ru?: unknown;
            name_en?: unknown;
            descr?: unknown;
            descr_ru?: unknown;
            descr_en?: unknown;
            descr_how_to_use?: unknown;
            descr_how_to_use_ru?: unknown;
            descr_how_to_use_en?: unknown;
            bonus?: unknown;
            bonus_RUB?: unknown;
            bonus_USD?: unknown;
            cashback_expenses?: unknown;
            cashback_first_payment?: unknown;
            discount?: unknown;
            referrer_id?: unknown;
            from_date?: unknown;
            to_date?: unknown;
            limit?: unknown;
            currency?: unknown;
            only_new_users?: unknown;
            color?: unknown;
            always_visible?: unknown;
            site?: unknown;
        };
        /** Измение достижение */
        "Admin_2.Methods.Users.Ranks.Edit": {
            id: number;
            name_id?: string | null;
            category?: components["schemas"]["Admin_2.Types.Users.Ranks.Category"] | null;
            name_ru?: string | null;
            name_en?: string | null;
            descr_ru?: string | null;
            descr_en?: string | null;
            descr_how_to_use_ru?: string | null;
            descr_how_to_use_en?: string | null;
            bonus_RUB?: number | null;
            bonus_USD?: number | null;
            cashback_expenses?: number | null;
            cashback_first_payment?: number | null;
            discount?: number | null;
            referrer_id?: number | null;
            from_date?: string | null;
            to_date?: string | null;
            max_count_usage?: number | null;
            currency?: string | null;
            only_new_users?: boolean | null;
            color?: string | null;
            always_visible?: boolean | null;
        };
        /** Получение достижения */
        "Admin_2.Methods.Users.Ranks.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** ID проверки аудита */
        check_id: number;
        /**
         * Получение сводки анализа сайта
         * @deprecated
         */
        "Audit_2.Methods.Audit.Browse.Get": {
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Получение общей информации о проверках
         *     - только для проверки, которая не завершена
         *     - в ответе будут заменены значения кодов ответа на текущие: count_000, count_1xx, count_2xx, count_3xx, count_4xx, count_5xx
         *     - в ответе будет заменено значение count_pages и count_all на текущие
         *     - в ответ будет добавлены значения robot_step и robot_count_tasks_allм */
        "Audit_2.Methods.Audit.Checks.Get": {
            /** Добавить в результат данные о незавершенной проверке */
            show_raw_data?: boolean;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        "Models.Audit.Checks": {
            "DURATION()"?: unknown;
            id?: unknown;
            project_id?: unknown;
            device?: unknown;
            scan_links?: unknown;
            scan_images?: unknown;
            scan_js?: unknown;
            scan_css?: unknown;
            robots_txt_exists?: unknown;
            sitemap_xml_exists?: unknown;
            www_redirect_exists?: unknown;
            ssl_redirect_exists?: unknown;
            tls_exists?: unknown;
            fatal?: unknown;
            rkn_no_ban?: unknown;
            notice?: unknown;
            error?: unknown;
            time_start?: unknown;
            time_finish?: unknown;
            count_pages?: unknown;
            count_all?: unknown;
            count_000?: unknown;
            count_1xx?: unknown;
            count_2xx?: unknown;
            count_3xx?: unknown;
            count_4xx?: unknown;
            count_5xx?: unknown;
            complete?: unknown;
            count_warnings?: unknown;
            count_errors?: unknown;
            count_problems?: unknown;
            is_mobile?: unknown;
            domain_check_rkn_no_ban?: unknown;
            domain_check_webmaster_no_errors?: unknown;
            domain_check_robots_txt_exists?: unknown;
            domain_check_sitemap_xml_exists?: unknown;
            domain_check_www_redirect_exists?: unknown;
            domain_check_ssl_redirect_exists?: unknown;
            domain_check_tls_exists?: unknown;
            pages_check_http_code_200_errors?: unknown;
            pages_check_redirects_not_exists_errors?: unknown;
            pages_check_redirects_many_not_exists_errors?: unknown;
            pages_check_ttfb_max_errors?: unknown;
            pages_check_cacheable_errors?: unknown;
            pages_check_robots_txt_allowed_errors?: unknown;
            pages_check_sitemap_xml_exists_errors?: unknown;
            pages_check_sitemap_xml_exists_with_canonical_errors?: unknown;
            pages_check_sitemap_included_none_blocked_errors?: unknown;
            pages_check_noindex_off_errors?: unknown;
            pages_check_nofollow_off_errors?: unknown;
            pages_check_title_exists_errors?: unknown;
            pages_check_title_length_max_errors?: unknown;
            pages_check_title_is_unique_errors?: unknown;
            pages_check_description_exists_errors?: unknown;
            pages_check_description_is_unique_errors?: unknown;
            pages_check_description_length_min_errors?: unknown;
            pages_check_description_length_max_errors?: unknown;
            pages_check_h1_exists_errors?: unknown;
            pages_check_html_lang_exists_errors?: unknown;
            pages_check_url_length_errors?: unknown;
            pages_check_canonical_exists_errors?: unknown;
            pages_check_alternate_errors?: unknown;
            pages_check_http_resources_count_errors?: unknown;
            pages_check_links_exists_errors?: unknown;
            pages_check_refresh_not_exists_errors?: unknown;
            pages_check_compression_exists_errors?: unknown;
            pages_check_schema_exists_errors?: unknown;
            pages_check_og_title_exists_errors?: unknown;
            pages_check_og_description_exists_errors?: unknown;
            pages_check_og_image_exists_errors?: unknown;
            pages_check_og_url_exists_errors?: unknown;
            pages_check_og_url_canonical_errors?: unknown;
            pages_check_lcp_max_errors?: unknown;
            pages_check_fid_max_errors?: unknown;
            pages_check_inp_max_errors?: unknown;
            pages_check_cls_max_errors?: unknown;
            pages_check_fcp_max_errors?: unknown;
            pages_check_si_max_errors?: unknown;
            pages_check_tbt_max_errors?: unknown;
            links_check_http_code_200_errors?: unknown;
            links_check_redirects_not_exists_errors?: unknown;
            links_check_redirects_many_not_exists_errors?: unknown;
            links_check_ttfb_max_errors?: unknown;
            links_check_url_slash_unique_errors?: unknown;
            links_check_url_format_good_errors?: unknown;
            links_check_title_or_content_exists_errors?: unknown;
            links_check_nofollow_off_errors?: unknown;
            images_check_http_code_200_errors?: unknown;
            images_check_redirects_not_exists_errors?: unknown;
            images_check_redirects_many_not_exists_errors?: unknown;
            images_check_ttfb_max_errors?: unknown;
            images_check_cacheable_errors?: unknown;
            images_check_alt_exists_errors?: unknown;
            images_check_alt_length_max_errors?: unknown;
            images_check_size_max_errors?: unknown;
            images_check_robots_disallow_off_errors?: unknown;
            images_check_modern_format_errors?: unknown;
            js_check_http_code_200_errors?: unknown;
            js_check_redirects_not_exists_errors?: unknown;
            js_check_redirects_many_not_exists_errors?: unknown;
            js_check_ttfb_max_errors?: unknown;
            js_check_compression_exists_errors?: unknown;
            js_check_cacheable_errors?: unknown;
            js_check_is_minified_errors?: unknown;
            js_check_no_render_blocking_errors?: unknown;
            css_check_http_code_200_errors?: unknown;
            css_check_redirects_not_exists_errors?: unknown;
            css_check_redirects_many_not_exists_errors?: unknown;
            css_check_ttfb_max_errors?: unknown;
            css_check_compression_exists_errors?: unknown;
            css_check_cacheable_errors?: unknown;
            css_check_is_minified_errors?: unknown;
            css_check_no_render_blocking_errors?: unknown;
        };
        /** Получение проверенных css */
        "Audit_2.Methods.Audit.Css.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Css": {
            "COUNT(*)"?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            url_ids?: unknown;
            url_id?: unknown;
            url?: unknown;
            count?: unknown;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            redirects?: (string | number)[] | null;
            locations?: unknown;
            ttfb?: unknown;
            count_pages?: unknown;
            compression?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            robots_txt_mention?: unknown;
            robots_txt_blocked?: unknown;
            minified?: unknown;
            broken?: unknown;
            notice?: unknown;
            error?: unknown;
            warning_all?: unknown;
            render_blocking?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_compression_exists?: unknown;
            check_cacheable?: unknown;
            check_is_minified?: unknown;
            check_no_render_blocking?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
        };
        /**
         * Тип очтета аудита
         * @enum {string}
         */
        "Audit_2.Types.Audit.TargetType": "pages" | "links" | "images" | "js" | "css";
        /** @enum {string} */
        "TV.API.Types.ExportFormat": "csv" | "xlsx";
        /** Экспорт результатов проверки файла */
        "Audit_2.Methods.Audit.Export.Get": {
            target_type: components["schemas"]["Audit_2.Types.Audit.TargetType"];
            /** Тип отчета для фильтра по ресурсам страницы
             *
             *     Только для $target_type = pages */
            filters_resources_target_type?: components["schemas"]["Audit_2.Types.Audit.TargetType"] | null;
            /** Фильтр по ресурсам страницы, API fitlers для объекта, тип которого указан в filters_extra_target_type
             *
             *     Только для $target_type = pages */
            filters_resources?: (string | number)[];
            /** Формат экспортируемого файла */
            output: components["schemas"]["TV.API.Types.ExportFormat"];
            project_id: components["schemas"]["project_id"];
            fields?: components["schemas"]["fields"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Получение проверенных изображений */
        "Audit_2.Methods.Audit.Images.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Images": {
            "COUNT(*)"?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            url_id?: unknown;
            url_ids?: unknown;
            url?: unknown;
            alt?: unknown;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            redirects?: (string | number)[] | null;
            locations?: unknown;
            count?: unknown;
            ttfb?: unknown;
            count_pages?: unknown;
            size?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            robots_txt_mention?: unknown;
            robots_txt_blocked?: unknown;
            extension?: unknown;
            content_type?: unknown;
            modern_format?: unknown;
            broken?: unknown;
            search?: unknown;
            notice?: unknown;
            error?: unknown;
            warning_all?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_cacheable?: unknown;
            check_alt_exists?: unknown;
            check_alt_length_max?: unknown;
            check_size_max?: unknown;
            check_robots_disallow_off?: unknown;
            check_modern_format?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
        };
        /** Получение проверенных js */
        "Audit_2.Methods.Audit.Js.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Js": {
            "COUNT(*)"?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            url_ids?: unknown;
            url_id?: unknown;
            url?: unknown;
            count?: unknown;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            redirects?: (string | number)[] | null;
            ttfb?: unknown;
            count_pages?: unknown;
            compression?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            robots_txt_mention?: unknown;
            robots_txt_blocked?: unknown;
            minified?: unknown;
            broken?: unknown;
            notice?: unknown;
            error?: unknown;
            warning_all?: unknown;
            render_blocking?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_compression_exists?: unknown;
            check_cacheable?: unknown;
            check_is_minified?: unknown;
            check_no_render_blocking?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
        };
        /** Получение проверенных ссылок */
        "Audit_2.Methods.Audit.Links.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Links": {
            "COUNT(*)"?: unknown;
            search?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            project_id?: unknown;
            url_id?: unknown;
            url_ids?: unknown;
            url?: unknown;
            type?: unknown;
            content?: string | null;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            count?: unknown;
            title?: unknown;
            redirects?: (string | number)[] | null;
            nofollow?: unknown;
            sponsored?: unknown;
            ugc?: unknown;
            external?: unknown;
            broken?: unknown;
            ttfb?: unknown;
            count_pages?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_url_slash_unique?: unknown;
            check_url_format_good?: unknown;
            check_title_or_content_exists?: unknown;
            check_nofollow_off?: unknown;
            notice?: unknown;
            error?: unknown;
            warning_all?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
        };
        /**
         * Дата с временем
         * @example 2000-01-01 00:00:00
         */
        "TV.API.Types.Datetime": string;
        /** Получение данных проверенных ресурсов */
        "Audit_2.Methods.Audit.Log.Get": {
            /** Фильтр по периоду */
            time1?: components["schemas"]["TV.API.Types.Datetime"] | null;
            /** Фильтр по периоду */
            time2?: components["schemas"]["TV.API.Types.Datetime"] | null;
            /** Добавить url к записям */
            show_urls?: boolean;
            /** Добавить массив locations - адреса страницы и редиректы с HTTP кодами */
            show_locations?: boolean;
            /** Фильтр по категориям кодов */
            http_codes_hundreds?: components["schemas"]["TV.API.Types.IntArray"] | null;
            /**
             * Номер страницы (для использования в SQL)
             * @default 1
             */
            page: number;
            project_id: components["schemas"]["project_id"];
            limit?: components["schemas"]["limit"];
            offset?: components["schemas"]["offset"];
            check_id: components["schemas"]["check_id"];
        };
        /** Получение страниц, по которым был выполнен аудит */
        "Audit_2.Methods.Audit.Pages.Get": {
            /** Тип отчета для фильтра по ресурсам страницы */
            filters_resources_target_type?: components["schemas"]["Audit_2.Types.Audit.TargetType"] | null;
            /** Фильтр по ресурсам страницы, API fitlers для объекта, тип которого указан в filters_extra_target_type */
            filters_resources?: (string | number)[];
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Pages": {
            dummy_opener_summary_page?: unknown;
            "COUNT(*)"?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            url_id?: unknown;
            url?: unknown;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            tls_version?: unknown;
            redirects?: (string | number)[] | null;
            meta_robots_none?: unknown;
            x_robots_tag_none?: unknown;
            meta_robots_noindex?: unknown;
            x_robots_tag_noindex?: unknown;
            meta_robots_nofollow?: unknown;
            x_robots_tag_nofollow?: unknown;
            canonical?: unknown;
            canonical_count?: unknown;
            http_resources_count?: unknown;
            html_lang?: unknown;
            hreflang?: unknown;
            rdfa?: unknown;
            json_ld?: unknown;
            microdata?: unknown;
            alternates?: unknown;
            refresh?: unknown;
            title?: unknown;
            description?: unknown;
            h1?: unknown;
            links_count?: unknown;
            images_count?: unknown;
            js_count?: unknown;
            css_count?: unknown;
            lastmod?: unknown;
            lastmod_since?: unknown;
            sitemap_xml_mention?: unknown;
            robots_txt_mention?: unknown;
            robots_txt_blocked?: unknown;
            og_title?: unknown;
            og_description?: unknown;
            og_image?: unknown;
            og_url?: unknown;
            og_type?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
            count_problems?: unknown;
            broken?: unknown;
            ttfb?: unknown;
            compression?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            search?: unknown;
            snippet_search?: unknown;
            title_dbl?: unknown;
            description_dbl?: unknown;
            lcp?: unknown;
            fid?: unknown;
            inp?: unknown;
            cls?: unknown;
            fcp?: unknown;
            si?: unknown;
            tti?: unknown;
            tbt?: unknown;
            cwv_performance?: unknown;
            backlinks_inner_count?: unknown;
            text_length?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_cacheable?: unknown;
            check_robots_txt_allowed?: unknown;
            check_sitemap_xml_exists?: unknown;
            check_sitemap_xml_exists_with_canonical?: unknown;
            check_sitemap_included_none_blocked?: unknown;
            check_noindex_off?: unknown;
            check_nofollow_off?: unknown;
            check_title_exists?: unknown;
            check_title_length_max?: unknown;
            check_title_is_unique?: unknown;
            check_description_exists?: unknown;
            check_description_is_unique?: unknown;
            check_description_length_min?: unknown;
            check_description_length_max?: unknown;
            check_h1_exists?: unknown;
            check_html_lang_exists?: unknown;
            check_url_length?: unknown;
            check_canonical_exists?: unknown;
            check_alternate?: unknown;
            check_http_resources_count?: unknown;
            check_links_exists?: unknown;
            check_refresh_not_exists?: unknown;
            check_compression_exists?: unknown;
            check_schema_exists?: unknown;
            check_og_title_exists?: unknown;
            check_og_description_exists?: unknown;
            check_og_image_exists?: unknown;
            check_og_url_exists?: unknown;
            check_og_url_canonical?: unknown;
            check_lcp_max?: unknown;
            check_fid_max?: unknown;
            check_inp_max?: unknown;
            check_cls_max?: unknown;
            check_fcp_max?: unknown;
            check_si_max?: unknown;
            check_tbt_max?: unknown;
        };
        /**
         * Фильтр по состоянию изменения в сводке
         * @enum {string}
         */
        "Audit_2.Types.Audit.Summary.FilterCheckState": "all" | "changed";
        /** Получение сводки о выполненном аудите */
        "Audit_2.Methods.Audit.Summary.Get": {
            /** Фильтр по состоянию сигнала (success, warning, error) */
            filter_check_type?: (string | number)[];
            filter_check_state?: components["schemas"]["Audit_2.Types.Audit.Summary.FilterCheckState"] | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Получение сводки страницы */
        "Audit_2.Methods.Audit.SummaryPage.Get": {
            /** Id ссылки на страницу */
            url_id: number;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Экспорт результатов индексации
         *
         *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
        "Audit_2.Methods.Indexing.Export.Get": {
            /** Поисковые системы */
            searchers_keys: components["schemas"]["Audit_2.Types.Indexing.SearcherKeys"];
            /**
             * Если указан, файл будет сохранен в указанной папке и будет возвращен путь к файлу
             *
             *     Для внутреннего использования
             * @description @private
             */
            returnFilenameFromFolder?: string | null;
            /** Формат экспортируемого файла */
            output: components["schemas"]["TV.API.Types.ExportFormat"];
            /** Настройки экспорта */
            properties?: (string | number)[];
            /** Произвольные даты без использования диапазона */
            dates?: (string | number)[] | null;
            /** Дата начала диапазона */
            date1?: components["schemas"]["TV.API.Types.Date"] | null;
            /** Дата окончания диапазона */
            date2?: components["schemas"]["TV.API.Types.Date"] | null;
            /**
             * Период в днях
             * @default 7
             */
            period_days: number;
            /** @default 7 */
            type_range: components["schemas"]["Audit_2.Types.Indexing.TypeRange"];
            /**
             * Количество дней в диапазоне
             * @default 60
             */
            count_dates: number;
            project_id: components["schemas"]["project_id"];
            fields?: components["schemas"]["fields"];
        };
        /** Создание гостевой ссылки на просмотр позиций
         *
         *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
        "Audit_2.Methods.Indexing.Links.Get": {
            /** Диапазон значений шаблона */
            template_date_range: string;
            /** Произвольные даты без использования диапазона */
            dates?: (string | number)[] | null;
            /** Дата начала диапазона */
            date1?: string | null;
            /** Дата окончания диапазона */
            date2?: string | null;
            /**
             * Тип диапазона дат
             * @default 7
             */
            type_range: components["schemas"]["Audit_2.Types.Indexing.TypeRange"];
            /** Количество дней в диапазоне */
            count_dates?: number | null;
            /** Ппоисковые ключи */
            searchers_keys?: (string | number)[] | null;
            /** Теги */
            tags?: (string | number)[] | null;
            /** Динамический */
            dynamic?: (string | number)[] | null;
            /** Динаамические данные */
            data_dynamic?: (string | number)[] | null;
            /** Сортировка данных */
            data_sort?: (string | number)[] | null;
            project_id: components["schemas"]["project_id"];
        };
        /** Получение сводки индексации */
        "Audit_2.Methods.Indexing.Summary.Get": {
            /** Произвольные даты без диапазона */
            dates: (string | number)[];
            searcher_key?: components["schemas"]["Audit_2.Types.Indexing.SearcherKey"] | null;
            /** Отобразить количество изменений */
            show_counts_changes?: boolean;
            /** Отобразить количество страниц в индексе */
            show_counts_in_index?: boolean;
            /** Отобразить количество проверенных страниц */
            show_counts_all?: boolean;
            /**
             * Вернуть данные в формате для графика
             *
             *     Недокументируемый параметр
             * @description @private
             */
            forChart?: boolean;
            project_id: components["schemas"]["project_id"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Построение отчета по одному URL
         *
         *     Отличия от get/audit_2/watcher:
         *     - отчет генерируется на основе объекта watcher_results, а не urls
         *     - параметры выбора периода отчета игнорируются
         *     - выбор прверок регулируется параметрами запроса filters, limit и offset */
        "Audit_2.Methods.Watcher.ByURL.Get": {
            /** ID URL */
            url_id: number;
            /** Включать ли в результат названия столбцов */
            show_headers?: boolean;
            /**
             * Выбор столбцов данных с результатами проверки
             * @default [
             *       "http_codes",
             *       "redirects"
             *     ]
             */
            watcher_fields: (string | number)[];
            show_diff?: components["schemas"]["Audit_2.Types.Watcher.ShowDiff"];
            watcher_type: components["schemas"]["Audit_2.Types.Watcher.Type"];
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        "Models.Watcher.Results": {
            project_id?: unknown;
            check_id?: unknown;
            url_id?: unknown;
            http_codes?: (string | number)[] | null;
            http_codes_changed?: unknown;
            http_codes_md5?: unknown;
            redirects?: (string | number)[] | null;
            redirects_changed?: unknown;
            redirects_md5?: unknown;
            h1?: unknown;
            h1_changed?: unknown;
            h1_md5?: unknown;
            title?: unknown;
            title_changed?: unknown;
            title_md5?: unknown;
            description?: unknown;
            description_changed?: unknown;
            description_md5?: unknown;
            content?: unknown;
            content_changed?: unknown;
            content_md5?: unknown;
        };
        /** Получение проверок радара */
        "Audit_2.Methods.Watcher.Checks.Get": {
            project_id: components["schemas"]["project_id"];
        };
        /** Получение сводки радара */
        "Audit_2.Methods.Watcher.Summary.Get": {
            /** Тип проверки */
            watcher_types?: (string | number)[] | null;
            /** ID проверок */
            checks_ids: (string | number)[];
            /** Отобразить количество изменений по типам */
            show_counts_changes?: boolean;
            /** Недокументируемый параметр, данные для графика */
            forChart?: boolean;
            project_id: components["schemas"]["project_id"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Отправка договора в диадок */
        "Bank_2.Methods.Diadoc.SendContract.Get": {
            /** Id договора */
            requisites_id: string;
        };
        /** Отправка акта сверки в диадок
         *
         *     Параметры см. в bank_2_requisites::protected_get_printTotalReceipt(); */
        "Bank_2.Methods.Diadoc.SendTotalReceipt.Get": {
            /** Id организации */
            org_id: string;
            /** Дата начала диапазона */
            date1: components["schemas"]["TV.API.Types.Date"];
            /** Дата конца диапазона */
            date2: components["schemas"]["TV.API.Types.Date"];
            /** КПП организации */
            org_kpp?: string | null;
            /** Id договора */
            requisites_id?: string | null;
            /** Использовать подпись
             *
             *     Если true, то документ с подписью (не распространяется на договоры) */
            signed?: boolean;
        };
        /** Экспорт лога банка */
        "Bank_2.Methods.History.Export.Get": {
            output: string;
            /** Вывести итого по группам */
            show_summary_by_groups?: boolean;
            fields?: components["schemas"]["fields"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            orders?: components["schemas"]["orders"];
            limit?: components["schemas"]["limit"];
            offset?: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение сводки проведенных операций */
        "Bank_2.Methods.History.Summary.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Перевод средств с реферального счета на бонусный */
        "Bank_2.Methods.Referrals.ToBonus.Edit": {
            /** Cумма для перевода */
            sum: string;
        };
        /** Получение id тарифа пользователя по типу контракта */
        "Bank_2.Methods.Requisites.ContractTariffId.Get": {
            /** Тип контракта */
            contract_type: string;
        };
        /** Скачивание документа в формате PDF */
        "Bank_2.Methods.Requisites.Print.Get": {
            /** Id документа */
            target_id: string;
            /** Тип документа enum(RequisitesDocuments::$availableDocumentsTypes) */
            type: string;
            /** Использовать подпись
             *
             *     Если true, то документ с подписью (не распространяется на договоры) */
            signed?: boolean;
        };
        /** Получение акта сверки (акты по предоплате выводятся в одном платеже) */
        "Bank_2.Methods.Requisites.PrintTotalReceipt.Get": {
            /** Дата начала диапазона */
            date1: components["schemas"]["TV.API.Types.Date"];
            /** Дата конца диапазона */
            date2: components["schemas"]["TV.API.Types.Date"];
            /** Id организации */
            org_id: string;
            /** Для внутреннего использования */
            returnPdfDataForDiadoc?: boolean;
            /** Использовать подпись
             *
             *     Если true, то документ с подписью (не распространяется на договоры) */
            signed?: boolean;
        };
        /** Скачивание архива документов в формате PDF */
        "Bank_2.Methods.Requisites.PrintZip.Get": {
            /** Список id документов
             *
             *     Вместо targets_ids можно указывать набор параметров org_id, date1 и date2 */
            targets_ids?: components["schemas"]["TV.API.Types.IntArray"] | null;
            /** Id организации */
            org_id?: string | null;
            /** Дата начала диапазона */
            date1?: components["schemas"]["TV.API.Types.Date"] | null;
            /** Дата конца диапазона */
            date2?: components["schemas"]["TV.API.Types.Date"] | null;
            /** Тип документа enum(RequisitesDocuments::$availableDocumentsTypes) */
            type: string;
            /** Использовать подпись
             *
             *     Если true, то документ с подписью (не распространяется на договоры) */
            signed?: boolean;
        };
        /**
         * Устройство региона
         * @enum {integer}
         */
        "Positions_2.Types.RegionDevice": 0 | 1 | 2;
        /**
         * Тип выдачи
         * @enum {string}
         */
        "Content_2.Types.Apometr.Action": "0" | "xml";
        /** Получение календаря апдейтов */
        "Content_2.Methods.Apometr.Calendar.Get": {
            /** Индекс региона
             *
             *     Если не задан нужно задать параметры searcher_key, region_key, region_lang, region_device */
            region_index?: number | null;
            searcher_key?: components["schemas"]["Positions_2.Types.SearcherKey"] | null;
            /** Ключ региона */
            region_key?: number | null;
            /** Язык региона */
            region_lang?: string | null;
            region_device?: components["schemas"]["Positions_2.Types.RegionDevice"] | null;
            action?: components["schemas"]["Content_2.Types.Apometr.Action"];
            /** Дата, определяющая месяц, в формате YYYY-MM-01 */
            date_month?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение истории urls, найденых в выдаче, по запросу за конкретную проверку */
        "Content_2.Methods.Apometr.CHHistory.Get": {
            /** Дата и время проверки */
            datetime: components["schemas"]["TV.API.Types.Datetime"];
            /** Индекс региона */
            region_index: number;
            action: components["schemas"]["Content_2.Types.Apometr.Action"];
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Apometr.History": {
            time?: unknown;
            action?: unknown;
            region_index?: unknown;
            keyword_id?: unknown;
            url?: unknown;
            position?: unknown;
            d?: unknown;
            d_day?: unknown;
        };
        /** Получение истории шторма за период в 2 суток */
        "Content_2.Methods.Apometr.History.Get": {
            /** Индекс региона */
            region_index?: number | null;
            searcher_key?: components["schemas"]["Positions_2.Types.SearcherKey"];
            /** Ключ региона */
            region_key?: number;
            /**
             * Язык региона
             * @default ru
             */
            region_lang: string;
            region_device?: components["schemas"]["Positions_2.Types.RegionDevice"];
            /** Дата */
            date?: components["schemas"]["TV.API.Types.Date"] | null;
            /** Вернуть только средние значения по всем тематикам */
            avg?: boolean;
        };
        /** Получение поисковых запросов апометра */
        "Content_2.Methods.Apometr.Keywords.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Apometr.Keywords": {
            id?: unknown;
            lang?: unknown;
            name?: unknown;
            pool_id?: unknown;
        };
        /** Получение апдейтов */
        "Content_2.Methods.Apometr.Updates.Get": {
            /** @default 100 */
            limit: number;
            searcher_key: components["schemas"]["Positions_2.Types.SearcherKey"];
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение статьи */
        "Content_2.Methods.Journal.Articles.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение закладок авторов */
        "Content_2.Methods.Journal.BookmarksAuthors.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение закладок */
        "Content_2.Methods.Journal.Bookmarks.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение инофрмации о курсах
         *
         *     Параметры выборки основаны на модели Models\Pages */
        "Content_2.Methods.Journal.Course.Get": {
            /** Ссылка на урок для поулчения pageChapter и pageLesson */
            lessons_url?: string | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение рубрики */
        "Content_2.Methods.Journal.Rubrics.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Изменение состояния подписки на рассылку журнала */
        "Content_2.Methods.Journal.Subscribe.Edit": {
            /** Подписаться/отписаться
             *     * 1: подписаться
             *     * 0: отписаться */
            subscribe: boolean;
        };
        /** Получение меню справки */
        "Content_2.Methods.Support.Menu.Get": Record<string, never>;
        /** Постановка задачи на подбор запросов */
        "Keywords_2.Methods.Collect.Go.Edit": {
            /** ID проекта */
            project_id: number;
            /** Список исходных запросов */
            keywords: (string | number)[];
            /**
             * Объекты определителей настроек ПС и регионов
             * @description @var array<int, array{region_key: int, searcher_key: (0 | 1 | 5 | 100 | 101 | 102 | 104 | 105 | 106), region_lang?: (string | null), also_searched?: (int | null), depth?: (int | null), hint_depth: (1 | 2 | 3), hint_generators: array<('letter' | 'letter_ru' | 'number' | 'space')>}>
             */
            qualifiers: (string | number)[];
            /** Минус фразы (только для searcher_key = 0 и searcher_key = 1) */
            keywords_minus?: (string | number)[];
            /** Id группы для размещения подобранных запросов */
            to_group_id?: number | null;
            /** Id папки для новых групп */
            to_id?: number;
            /** @default in_folder_last */
            to_type: components["schemas"]["Keywords_2.Types.Collect.ToType"];
            /** Собирать все запросы в одну группу (не несет смысл, если указан to_group_id) */
            in_one_group?: boolean;
            currency?: components["schemas"]["TV.API.Types.Currency"] | null;
            debug?: string | null;
        };
        /**
         * Получение стоимости подбора запросов
         * @description @see Keywords_2\Methods\Collect\AbstractRegular
         */
        "Keywords_2.Methods.Collect.Price.Get": {
            /**
             * Отображать сумму с учетом скидки (по умолчанию: 1)
             * @default true
             */
            apply_discount: boolean;
            /** ID проекта */
            project_id: number;
            /** Список исходных запросов */
            keywords: (string | number)[];
            /**
             * Объекты определителей настроек ПС и регионов
             * @description @var array<int, array{region_key: int, searcher_key: (0 | 1 | 5 | 100 | 101 | 102 | 104 | 105 | 106), region_lang?: (string | null), also_searched?: (int | null), depth?: (int | null), hint_depth: (1 | 2 | 3), hint_generators: array<('letter' | 'letter_ru' | 'number' | 'space')>}>
             */
            qualifiers: (string | number)[];
            /** Минус фразы (только для searcher_key = 0 и searcher_key = 1) */
            keywords_minus?: (string | number)[];
            /** Id группы для размещения подобранных запросов */
            to_group_id?: number | null;
            /** Id папки для новых групп */
            to_id?: number;
            /** @default in_folder_last */
            to_type: components["schemas"]["Keywords_2.Types.Collect.ToType"];
            /** Собирать все запросы в одну группу (не несет смысл, если указан to_group_id) */
            in_one_group?: boolean;
            currency?: components["schemas"]["TV.API.Types.Currency"] | null;
            debug?: string | null;
        };
        /**
         * Импорт запросов (по необходимости зависимых с ними групп и папок)
         *
         *     Доступные поля для импорта: group_folder_path|group_name|name|tags|target поля перекрывают аналогичные параметры в запросе
         * @description @see Keywords_2\Mods\Keywords\Import::fromHandle()
         */
        "Keywords_2.Methods.Keywords.Import.Add": {
            /** Id проекта */
            project_id: number;
            /** Массив ключевых запросов в формате CSV
             *
             *     - array keywords - массив ключевых запросов, допускается формат CSV
             *     - file(txt, csv) keywords - файл с содержимым для импорта, допускается формат CSV
             *     - resource keywords - указатель на файл с содержимым для импорта, допускается формат CSV
             *     - нельзя передавать keywords одновременно в виде массива, в виде файла или в виде ресурса */
            keywords?: unknown;
            /** Id папки, если папка не указана будет использована корневая папка проекта */
            folder_id?: number | null;
            /** Id группы, если не указан будет создана новая группа в указанной папке */
            group_id?: number | null;
            /** Имя группы, если не указан group_id, если группа с таким именем уже существует, то будет исползоваться она */
            group_name?: string | null;
            /**
             * Активность создаваемых групп (по умолчанию: 1 - активные)
             * @default true
             */
            group_on: boolean;
            /** Переносить ли дубли (по умолчанию: 0 - не переносить) */
            move_duplicate?: boolean | null;
            /** Id группы для переноса дублей, если не указана будет использован параметр move_duplicate_group_name */
            move_duplicate_group_id?: number | null;
            /** Имя группы для переноса дублей, если группы с таким именем в папке move_duplicate_folder_id нет, она будет создана */
            move_duplicate_group_name?: string | null;
            /** Id папки для переноса дублей, если не указана, то будет использоваться корневая папка проекта */
            move_duplicate_folder_id?: number | null;
            /** Вырезать ли плюсы, точки, запятые, апострофы, кавычки (по умолчанию: 0 - не вырезать) */
            remove_special_chars?: boolean | null;
            /** Массив номеров тегов */
            tags?: components["schemas"]["Tags_2.Types.TagsIds"] | null;
        };
        /** Постановка задачи на проверку частоты запросов */
        "Keywords_2.Methods.Volumes.Go.Edit": {
            /** Id проекта */
            project_id: number;
            /** Проверять ли запросы
             *
             *     - 0: проверять
             *     - 1: не проверять запросы с актуальной частотой
             *     - 2: не проверять запросы с частотой */
            no_recheck?: number | null;
            /** Запустить проверку по всем регионам проекта (только Яндекс и Google) */
            check_all_regions?: boolean;
            /**
             * Тип объекта фильтрации
             * @default keywords
             */
            target_type: string;
            /** Объекты определителей частоты (параметр не обязатален, если check_all_regions = true)
             *
             *     - int qualifier.region_key - ключ региона
             *     - enum(0, 1) qualifier.searcher_key - ключ ПС
             *     - enum(1, 2, 3, 5, 6) qualifier.type - индекс тип частоты (для Яндекс 1, 2, 3, 5 или 6, для Google всегда 3) */
            qualifiers?: (string | number)[] | null;
            /** Валюта */
            currency?: components["schemas"]["TV.API.Types.Currency"] | null;
            /** При фильтрации по ID папок также искать в подпапках
             *
             *     Для объекта фильтрации типа keywords */
            group_folder_id_depth?: boolean;
            /** Проверить корзину
             *
             *     Для объекта фильтрации типа keywords */
            show_trash?: boolean;
            fields?: components["schemas"]["fields"];
            orders?: components["schemas"]["orders"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset?: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение стоимости проверки частоты проектов */
        "Keywords_2.Methods.Volumes.Price.Get": {
            /** Id проекта */
            project_id: number;
            /** Проверять ли запросы
             *
             *     - 0: проверять
             *     - 1: не проверять запросы с актуальной частотой
             *     - 2: не проверять запросы с частотой */
            no_recheck?: number | null;
            /**
             * Отображать ли сумму с учетом скидки
             * @default 1
             */
            apply_discount: number;
            /** Запустить проверку по всем регионам проекта (только Яндекс и Google) */
            check_all_regions?: boolean;
            /**
             * Тип объекта фильтрации
             * @default keywords
             */
            target_type: string;
            /** Объекты определителей частоты (параметр не обязатален, если check_all_regions = true)
             *
             *     - int qualifier.region_key - ключ региона
             *     - enum(0, 1) qualifier.searcher_key - ключ ПС
             *     - enum(1, 2, 3, 5, 6) qualifier.type - индекс тип частоты (для Яндекс 1, 2, 3, 5 или 6, для Google всегда 3) */
            qualifiers?: (string | number)[] | null;
            fields?: components["schemas"]["fields"];
            orders?: components["schemas"]["orders"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset?: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Отправление письма с лэндинга вакансий на hr@topvisor.com */
        "Landings_2.Methods.Hr.Feedback.Add": {
            /** Имя и фамилия */
            name: string;
            /** Email */
            email: string;
            /** Номер телефона */
            phone: string;
            /** Ссылка на телеграм, можно укзать логин */
            telegram: string;
            /** Прикрепленное сообщение */
            comment: string;
        };
        /** Отписка от тарифа, оплаченного картой */
        "Payments_2.Methods.Tariff.DelCard.Edit": Record<string, never>;
        /** Настройка оплаты тарифов: выставлять ли счета через диадок */
        "Payments_2.Methods.Tariff.NextToDiadoc.Edit": {
            /** Флаг - применение настройки тарифов */
            next_to_diadoc: boolean;
        };
        /** Смена тарифа со следующего месяца */
        "Payments_2.Methods.Tariff.SetNext.Edit": {
            /** Id тарифа */
            id: number;
        };
        /** Включение/выключение ПС */
        "Positions_2.Methods.Searchers.Enabled.Edit": {
            /** Id проекта */
            project_id: number;
            /** Ключ ПС */
            searcher_key: components["schemas"]["Positions_2.Types.SearcherKey"];
            /** - 1 - включить
             *     - 0 - выключить */
            enabled: number;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Добавление региона */
        "Positions_2.Methods.Searchers.Regions.Add": {
            /** Id проекта */
            project_id: number;
            /** Ключ ПС */
            searcher_key: components["schemas"]["Positions_2.Types.SearcherKey"];
            /** Ключ региона
             *
             *     Для разных ПС список доступных регионов может быть разный */
            region_key: number;
            /** Язык региона
             *
             *     Для разных ПС список языков разный */
            region_lang?: string | null;
            /** Устройство региона */
            region_device?: components["schemas"]["Positions_2.Types.RegionDevice"];
            /**
             * Глубина региона
             *
             *     - 1-3 для Яндекса (ПК)
             *     - 1-10 для Google
             *     - 1-3 для GooglePlay
             * @default 1
             */
            region_depth: number;
        };
        /** Удаление региона */
        "Positions_2.Methods.Searchers.Regions.Del": {
            /** Id проекта */
            project_id: number;
            /** Регион, который требуется удалить */
            region_index: number;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Изменение региона */
        "Positions_2.Methods.Searchers.Regions.Edit": {
            /** Id проекта */
            project_id: number;
            /** Регион, который требуется изменить */
            region_index: number;
            /** Язык региона
             *
             *     Для разных ПС список языков разный */
            region_lang?: string | null;
            /** Устройство региона */
            region_device?: components["schemas"]["Positions_2.Types.RegionDevice"] | null;
            /** Глубина региона
             *
             *     - 1-3 для Яндекса (ПК)
             *     - 1-10 для Google
             *     - 1-3 для GooglePlay */
            region_depth?: number | null;
            /** Включен */
            enabled?: boolean | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Id поисковых системы для проверки позиций */
        "Positions_2.Types.SearchersKeys": components["schemas"]["Positions_2.Types.SearcherKey"][];
        /** Настройка сортировки ПС */
        "Positions_2.Methods.Searchers.Sort.Edit": {
            /** Id проекта */
            project_id: number;
            /** Ключи ПС */
            searchers_keys?: components["schemas"]["Positions_2.Types.SearchersKeys"] | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение данных графика */
        "Projects_2.Methods.Analytics.Graph.Get": {
            /** ID проекта */
            project_id: number;
            /** Номер метрики */
            axe: components["schemas"]["Projects_2.Types.Analytics.Axe"];
            /** Данные графика */
            data: (string | number)[];
            /** Сравнение метрики */
            compare_axe?: number | null;
        };
        /** Перемещение конкурента (сортировка) */
        "Projects_2.Methods.Competitors.Move.Edit": {
            /** ID проекта */
            project_id: number;
            /** ID конкурента */
            id: number;
            /** Переместить к указанному конкуренту */
            to_id: number;
            /**
             * Позиция перемещения
             *
             *     - before
             *     - after
             * @default after
             */
            to_type: string;
        };
        /** Установка имени конкурента */
        "Projects_2.Methods.Competitors.Name.Edit": {
            /** ID проекта */
            project_id: number;
            /** ID конкурента */
            id: number;
            /** Имя */
            name: string;
        };
        /** Включение/выключение конкурентов */
        "Projects_2.Methods.Competitors.On.Edit": {
            /** ID проекта */
            project_id: number;
            /** ID конкурентов */
            ids: components["schemas"]["TV.API.Types.IntArray"];
            /** Активность проекта
             *
             *     - -1 - выключен
             *     - 0 - включен */
            on: number;
        };
        /** Перемещение проектов в папку */
        "Projects_2.Methods.Folders.Move.Edit": {
            /** Id папки */
            folder_id: number;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Переместить папку
         *
         *     Вложенные папки запрещены, поэтому перемещение происходит только в пределах одного списка */
        "Projects_2.Methods.Folders.MoveFolder.Edit": {
            /** Id папки, которую надо перенести */
            id: number;
            /** Id папки, после которой надо разместить перемещаемую папку
             *
             *     Укажите 0, если надо переместить папку в начало списка */
            insert_after_id: number;
        };
        /** Изменение имени папки */
        "Projects_2.Methods.Folders.Name.Edit": {
            /** Id папки */
            id: number;
            /** Имя папки */
            name: string;
        };
        /** Получить подсазки конкурентов для добавления в проект
         *
         *     Доступ по API закрыт */
        "Projects_2.Methods.Master.HintsCompetitors.Get": {
            /** ID проекта */
            project_id: number;
        };
        /** Получить подсазки запросов для добавления в проект
         *     Доступ по API закрыт */
        "Projects_2.Methods.Master.HintsKeywords.Get": {
            /** ID проекта */
            project_id: number;
        };
        /** Копирование проекта */
        "Projects_2.Methods.Projects.Copy.Add": {
            /** ID проекта */
            project_id: number;
            /** Копировать ли запросы проекта */
            copy_keywords?: boolean | null;
            /** Копировать ли позиции по запросам проекта (если copy_keywords = 1) */
            copy_positions?: boolean | null;
        };
        /** Настройка избранных проектов */
        "Projects_2.Methods.Projects.Favorite.Edit": {
            /**
             * Флаг того, что проект ибранный
             * @default true
             */
            favorite: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Перемещение проекта (сортировка) */
        "Projects_2.Methods.Projects.Move.Edit": {
            /** ID проекта */
            id: number;
            /** Переместить к указанному проекту */
            to_id: number;
            /**
             * Позиция перемещения:
             *     - before
             *     - after
             * @default after
             */
            to_type: string;
        };
        /** Установка имени проекта */
        "Projects_2.Methods.Projects.Name.Edit": {
            /** Новое имя проекта */
            name: string;
            /** ID проекта */
            id: number;
        };
        /** Редактирование "on" проектов */
        "Projects_2.Methods.Projects.On.Edit": {
            /** Активность проекта
             *     - -1 - архив
             *     - 0 - обычный */
            on: number;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Изменение сортировки проектов */
        "Projects_2.Methods.Projects.Sort.Edit": {
            orders: (string | number)[];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Редактирование тегов проектов */
        "Projects_2.Methods.Projects.Tags.Edit": {
            /**
             * enum(1..10) tags - теги проекта (по умолчанию - [1])
             * @default [
             *       1
             *     ]
             */
            tags: (string | number)[];
            /** ID проекта */
            id: number;
        };
        /** Редактирование ссылки проекта */
        "Projects_2.Methods.Projects.Url.Edit": {
            /** ID проекта */
            id: number;
            /** Новая ссылка */
            url: components["schemas"]["TV.API.Types.UrlShort"];
        };
        /** Отмена передачи проекта */
        "Projects_2.Methods.Rights.ChangeOwner.Del": {
            /** ID проекта */
            project_id: number;
            /** Почта */
            email: components["schemas"]["TV.API.Types.Email"];
        };
        /** Инициализация передачи проекта другому пользователю */
        "Projects_2.Methods.Rights.ChangeOwner.Edit": {
            /** ID проекта */
            project_id: number;
            /** Почта */
            email: components["schemas"]["TV.API.Types.Email"];
        };
        /** Получение информации о регистрации домена
         *
         *     Возвращает объект с параметрами:
         *     - wait_time, если данные не готовы
         *     - created, если данные готовы
         *     - paidtill, если данные готовы */
        "Projects_2.Methods.Status.Registrar.Get": {
            /** Домен */
            domain: components["schemas"]["TV.API.Types.UrlShort"];
        };
        /** Получение информации об SSL сертификате
         *     Возваращает объект с параметрами:
         *     - expire */
        "Projects_2.Methods.Status.Ssl.Get": {
            /** Домен */
            domain: components["schemas"]["TV.API.Types.Url"];
        };
        "Keywords_2.Types.Region": {
            /** Ключ региона */
            key: number;
            /** Ключ поисковика */
            searcher_key: components["schemas"]["Positions_2.Types.SearcherKey"];
            /** Язык региона
             *
             *     Для каждой ПС доступен разный */
            lang?: string | null;
            /** Тип проверки частот. Для гугла всегда 3 */
            types: (string | number)[];
            /** Девайс */
            device?: components["schemas"]["Positions_2.Types.RegionDevice"] | null;
            /**
             * Глубина региона
             *
             *     - 1-3 для Яндекса (ПК)
             *     - 1-10 для Google
             *     - 1-3 для GooglePlay
             * @default 1
             */
            depth: number;
        };
        /** Массив регионов */
        "Keywords_2.Types.RegionsArray": components["schemas"]["Keywords_2.Types.Region"][];
        /** Создание задачи */
        "Projects_2.Methods.Tasks.Volumes.Add": {
            /** Url проекта (домен или url страницы) */
            url: components["schemas"]["TV.API.Types.UrlShort"];
            /** Массив ключевых запросов в формате CSV
             *
             *     - array keywords - массив ключевых запросов, допускается формат CSV */
            keywords: (string | number)[];
            /** Вырезать ли плюсы, точки, запятые, апострофы, кавычки (по умолчанию: 0 - не вырезать) */
            remove_special_chars?: boolean | null;
            /** Проверять ли запросы
             *
             *     - 0: проверять
             *     - 1: не проверять запросы с актуальной частотой
             *     - 2: не проверять запросы с частотой */
            no_recheck?: number | null;
            /** Объекты определителей частоты (параметр не обязатален, если check_all_regions = true) */
            regions: components["schemas"]["Keywords_2.Types.RegionsArray"];
        };
        /** Удаление ответа в тикете, только для админов */
        "Tickets_2.Methods.Admin.Message.Del": {
            /** ID ответа */
            id: number;
        };
        /** Редактирование текста ответа в тикете, только для админов */
        "Tickets_2.Methods.Admin.Message.Edit": {
            /** ID редактируемого поста тикета */
            id: number;
            /** Текст сообщения */
            text: string;
        };
        /** Добавление шаблона тикета */
        "Tickets_2.Methods.Admin.Templates.Add": {
            /** Название */
            name: string;
            /** Текст */
            text: string;
        };
        /** Удаление шаблона */
        "Tickets_2.Methods.Admin.Templates.Del": {
            /** ID шаблона */
            id: number;
        };
        /** Изменение шаблона */
        "Tickets_2.Methods.Admin.Templates.Edit": {
            /** ID шаблона */
            id: number;
            /** Название */
            name: string;
            /** Текст */
            text: string;
        };
        /** Получение шаблона тикета */
        "Tickets_2.Methods.Admin.Templates.Get": {
            /** Текст для поиска */
            search?: string | null;
        };
        /** Редактирование тикета (для админов) */
        "Tickets_2.Methods.Admin.Ticket.Edit": {
            id: number;
            /** Флаг того, что тикет важный */
            is_important?: boolean | null;
            /** Номер задачи redmine, связанной с тикетом */
            task_id?: number | null;
            /** Доступные теги тикета */
            tags?: components["schemas"]["Tags_2.Types.TagsIds"] | null;
            /** Статус тикета */
            status?: boolean | null;
        };
        /** Перенос последниего сообщения (до 1 сообщения автора) в новый тикет */
        "Tickets_2.Methods.Admin.TicketSplit.Edit": {
            /** Id тикета */
            id: number;
        };
        /** Получение инфомрации о пользователе */
        "Tickets_2.Methods.Admin.User.Get": {
            /** ID пользователя */
            id: number;
        };
        /** Установка userId для тикетов без userId */
        "Tickets_2.Methods.Admin.UserId.Edit": {
            /** ID тикета */
            id: number;
            /** ID юзера для установки */
            user_id: number;
        };
        /** Редактирваоние комменатрий админа */
        "Tickets_2.Methods.Tickets.AdminComment.Edit": {
            /** ID тикета */
            id: number;
            /** Комментарий */
            comment?: string | null;
        };
        /** Получение краткой информации о тикетах
         *
         *     id последнего непрочитанного тикета, число непрочитанных тикетов */
        "Tickets_2.Methods.Tickets.Info.Get": Record<string, never>;
        /** Пометка тикета как "прочитанный" для автора тикета или админов */
        "Tickets_2.Methods.Tickets.SetReaded.Edit": {
            /** Id тикета */
            id: number;
        };
        /** Написание текста */
        "Tickets_2.Methods.Tickets.Writing.Edit": {
            /** ID тикета */
            id: number;
            /** Текст
             *
             *     text = '' - отмена написания
             *
             *     text = null - написания со скрытым содержимым (без текста) */
            text?: string | null;
        };
        /** Получение URL к карте сайта по файлу robots.txt для указанного домена */
        "Urls_2.Methods.Import.RecognizeLinkSitemapXml.Get": {
            /** Домен */
            domain: string;
        };
        /** Привязка email к аккаунту */
        "Users_2.Methods.Join.Email.Add": {
            email: string;
            pass?: string | null;
        };
        /** Добавление фильтра группы */
        "Admin_2.Methods.Accounting.Group.Filter.Add": {
            /** Id группы */
            group_id: number;
            /** Тип
             *
             *     - plus
             *     - minus */
            type: string;
            /** Имя контрагента */
            counteragent_name: string;
            /** ИНН контрагента */
            counteragent_inn: string;
            /** Назначение операции */
            purpose?: string | null;
        };
        /** Удаление фильтра группы */
        "Admin_2.Methods.Accounting.Group.Filter.Del": {
            /** ID группы */
            group_id: number;
            /** ID фильтра */
            filter_id: number;
        };
        /** Изменение фильтра группы */
        "Admin_2.Methods.Accounting.Group.Filter.Edit": {
            /** ID фильтра */
            filter_id: number;
            /** Тип
             *
             *     - plus
             *     - minus */
            type: string;
            /** Имя контрагента */
            counteragent_name: string;
            /** ИНН контрагента */
            counteragent_inn: string;
            /** Назначение операции */
            purpose?: string | null;
        };
        /** Скачивание документа */
        "Admin_2.Methods.Accounting.Invoices.File.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /**
         * Скачивание реестра исходящих операций
         * @description @POST string month - месяц в формате: YYYY-mm
         *     столбцы CSV: 'Дата акта', 'Номер акта', 'Контрагент', 'ИНН', 'Товар/услуга', 'Номенклатура', 'Кол-во', 'Цена', 'НДС', 'Сумма', 'Способ оплаты'
         */
        "Admin_2.Methods.Accounting.Operations.Export.Get": {
            /** Месяц */
            month: string;
        };
        /** Изменение валюты пользователя */
        "Admin_2.Methods.Actions.Account.Currency.Edit": {
            /** ID пользователя */
            userId: number;
            /** Валюта */
            currency: string;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Востановление поисковых запросов из бэкапа */
        "Admin_2.Methods.Actions.Backup.Keywords.Edit": {
            pass_admin_actions: string;
            /** Этап:
             *     - 1: Загрузить и подготовить бекапы
             *     - 2: Выполнить восстановление */
            step: number;
            /** Сервер, с которого делались бекапы */
            server_name: string;
            /** ID проекта */
            project_id: number;
            /** Тип
             *
             *     Может принимать одно из значений TYPES_SETTINGS_AVAILIBLE или TYPES_MOVE_AVAILIBLE */
            type: string;
            /** Дата бекапа */
            date: components["schemas"]["TV.API.Types.Date"];
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Загрузить и разместить бекап в БД бекапов */
        "Admin_2.Methods.Actions.Backup.Loader.Edit": {
            pass_admin_actions: string;
            /** Сервер, с которого делались бекапы */
            server_name: string;
            /** Имя БД */
            db_name: string;
            /** Имя таблицы */
            table_name: string;
            /** Дата бекапа чата для добавления */
            date: components["schemas"]["TV.API.Types.Date"];
            /** Регулярное выражение для импорта только нужных блоков INSERT
             *
             *     Бекапы хрянятся в .sql файлах с INSERT командами, в одном INSERT может быть много строк */
            insert_filter_regexp?: components["schemas"]["TV.API.Types.RegExp"] | null;
            /** Ключ задачи, участвует в генерации имени БД бекапа
             *
             *     Может потребоваться в случае выполнения одновременных бекапов одной и тоже же таблицы за одну и ту же дату */
            task_key?: string | null;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Востановление удаленного проекта */
        "Admin_2.Methods.Actions.Backup.Project.Edit": {
            pass_admin_actions: string;
            /** Этап:
             *     - 1: Загрузить и подготовить бекапы
             *     - 2: Выполнить восстановление */
            step: number;
            /** Сервер, с которого делались бекапы */
            server_name: string;
            /** ID пользователя */
            user_id: number;
            /** ID проекта */
            project_id: number;
            /** Дата бекапа */
            date: components["schemas"]["TV.API.Types.Date"];
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Оплата реферального счета */
        "Admin_2.Methods.Actions.Bank.Referral.Edit": {
            /** ID пользователя */
            userId: number;
            /** ID акта
             *
             *     Укажите `sum=`, если API не раблотает и данных акта нет */
            entityId?: string | null;
            /** Дата акта в формате d.m.Y */
            date: string;
            /** Пароль в диадоке */
            pass: string;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Отправка акты в диадок */
        "Admin_2.Methods.Actions.Payments.Diadoc.Add": {
            /** ID пользователя */
            userId: number;
            /** ID платежа */
            paymentId?: number | null;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Импортирование историй позиций из CSV */
        "Admin_2.Methods.Actions.Positions.History.Add": {
            /** Строка в формате csv
             *
             *     Пример: ```
             *     Запрос;2024-01-01;2024-01-01
             *     Привет;5;5
             *     Как дела;3;1
             *     ``` */
            csv?: string | null;
            /** ID проекта */
            projectId?: number | null;
            /** Индекс региона */
            regionIndex?: number | null;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Сброс статуса проверки позиций */
        "Admin_2.Methods.Actions.Positions.Status.Edit": {
            /** ID проекта */
            projectId: number;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Изменение домена проекта */
        "Admin_2.Methods.Actions.Projects.Domain.Edit": {
            /** ID пользователя */
            userId: number;
            /** Список для замены
             *
             *     Пример: ```
             *     example.com;example2.com
             *     example3.com;example4.com
             *     12345;example5.com
             *     ``` */
            projects: string;
            /** Изменить ли имена проектов */
            needRenameProject: boolean;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Перевод проверок позиций яндекс */
        "Admin_2.Methods.Actions.Robot.Checks.Edit": {
            /** Поисковик */
            modEngine: string;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Изменение приоритета задач */
        "Admin_2.Methods.Actions.Robot.Priority.Edit": {
            /** ID сайта или проекта */
            siteOrProjectId?: string | null;
            /** ID пользователя */
            userId?: number | null;
            /** Приоритет */
            priority: number;
            /**
             * Для чего изменяется приоритет
             * @default positions
             */
            for: string;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Снятие задачи с дэбага */
        "Admin_2.Methods.Actions.Robot.Task.Edit": {
            /** ID проекта */
            projectId: number;
            /** ID задачи */
            taskId?: number | null;
            /** Откуда снять задачу */
            type: string;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Удаление файлов */
        "Admin_2.Methods.Actions.Slack.Files.Del": {
            /** Токен */
            token: string;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Удаление сообщений */
        "Admin_2.Methods.Actions.Slack.Messages.Del": {
            /** Токен */
            token: string;
            /** Канал, в котором будут удалены сообщения */
            channel: string;
            /** Количество секунд */
            secunds: string;
            /** @default 1 */
            onlyMy: number;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Получение сводки по группам */
        "Admin_2.Methods.Analytics.Accounting.SummaryForChart.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            currency: components["schemas"]["TV.API.Types.Currency"];
            /** Дата начала отсчета периода */
            date: components["schemas"]["TV.API.Types.Date"];
            /** Тип операций (расход, приход, все операции)
             *
             *     - profit: приход
             *     - charges: расход */
            operations_type?: string | null;
            /**
             * Длина периода
             * @default 12
             */
            limit: number;
            /** Фильтр по объектам групп, см. Admin_2\Accounting\Group */
            filters?: (string | number)[] | null;
        };
        /** Получение активности пользователей в формате для графика */
        "Admin_2.Methods.Analytics.Activity.ChartByPeriod.Get": {
            currency: components["schemas"]["TV.API.Types.Currency"];
            /** Валюта */
            limit: number;
            /** Дата */
            date: components["schemas"]["TV.API.Types.Date"];
        };
        /** Получение конкурентов для графика */
        "Admin_2.Methods.Analytics.Competitors.SummaryForOrdersChart.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            /** Длина периода */
            limit: number;
            currency?: components["schemas"]["TV.API.Types.Currency"] | null;
            /** Сортировать ли по типу */
            order_by_type?: number | null;
            /** Инлекс региона */
            region_index?: number | null;
        };
        /** Получение суммы оплат по системам платежей за период */
        "Admin_2.Methods.Analytics.Payments.Systems.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            currency: components["schemas"]["TV.API.Types.Currency"];
            /** Длина периода */
            limit: number;
        };
        /** Получение суммы оплат по тарифам за период */
        "Admin_2.Methods.Analytics.Payments.Tariff.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            currency: components["schemas"]["TV.API.Types.Currency"];
            /** Длина периода */
            limit: number;
        };
        /** Получение числа автоматических проверока по дням по часам */
        "Admin_2.Methods.Analytics.Positions.ChartByDayByHourAuto.Get": Record<string, never>;
        /** Получение числа автоматических проверок по часам */
        "Admin_2.Methods.Analytics.Positions.ChartByHourAuto.Get": Record<string, never>;
        /** Получение числа проверок за месяц по часам */
        "Admin_2.Methods.Analytics.Positions.ChartByHour.Get": Record<string, never>;
        /** Получение числа проверок по часам по пользователям */
        "Admin_2.Methods.Analytics.Positions.ChartCountUsersByHour.Get": Record<string, never>;
        /** Получение статистики тикетов по миграциям */
        "Admin_2.Methods.Analytics.Tickets.ChartByMigrations.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            /** Длина периода */
            limit: number;
            /** Максимальная дата отчета */
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение статистики по кол-ву пользователей, открывших первый тикет */
        "Admin_2.Methods.Analytics.Tickets.ChartByNew.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            /** Длина периода */
            limit: number;
            /** Максимальная дата отчета */
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение статистики тикетов по оценкам */
        "Admin_2.Methods.Analytics.Tickets.ChartByRates.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            /** Длина периода */
            limit: number;
            /** Максимальная дата отчета */
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение статистику тикетов по тегам */
        "Admin_2.Methods.Analytics.Tickets.ChartByTags.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            /** Длина периода */
            limit: number;
            /** Максимальная дата отчета */
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение статистики по среднему времени ожидания ответа на вопросы в тикетах */
        "Admin_2.Methods.Analytics.Tickets.ChartByWaitTime.Get": {
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            /** Длина периода */
            limit: number;
            /** Максимальная дата отчета */
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение статистики ответов на тикеты */
        "Admin_2.Methods.Analytics.Tickets.Messages.Get": {
            /** Поля
             *
             *     - date
             *     - count_messages
             *     - count_tickets
             *     - count_messages_user:%userId%
             *     - percent_messages_user:%userId%
             *     - vacations_by_user_id */
            fields: (string | number)[];
            period: components["schemas"]["Admin_2.Types.Analytics.Segment"];
            /** Длина периода */
            limit: number;
            /** Максимальная дата отчета */
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Помечание лога как обработанного */
        "Admin_2.Methods.Logs.System.Checked.Edit": {
            /** ID лога */
            id: number;
            /** Проверен ли лог */
            checked: boolean;
        };
        /** Получение графика с количеством подписок на рубрики с сегментцией по способам рассылки
         *
         *     График кешируется, первый запрос может выполняться дольше */
        "Admin_2.Methods.Users.Informer.Subscriptions.Get": {
            tariff_id?: number | null;
        };
        /** Сокращенный тип с данными для вывода hightcharts
         *
         *     https://www.highcharts.com/ */
        "TV.Objects.Highcharts.Chart": {
            /** Категории
             *
             *     Для обчных графиков это значения на оси X */
            categories: (string | number)[];
            /** Набор серий
             *
             *     Серия - это объект, выводимый на графике, например линия.
             *
             *     Серия обязательно должна иметь поле data, в котором перечисляются значения для категорий. Значения должны идти в таком же порядке, что и
             *     категории */
            series: (string | number)[];
            /** Дополнительгная информация */
            additionalData: (string | number)[];
        };
        /** Запуск проверки аудита */
        "Audit_2.Methods.Audit.Checker.Go.Edit": {
            /** Запуск в режиме отладки */
            debug?: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение стоимости проверки аудита */
        "Audit_2.Methods.Audit.Checker.Price.Get": {
            /**
             * Отображать ли сумму с учетом скидки
             * @default true
             */
            apply_discount: boolean;
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение гостевой ссылки на просмотр аудита позиций */
        "Audit_2.Methods.Audit.Export.Links.Get": {
            /** Название просмотра (используется на странице с просмотром проверки) */
            view_name?: string;
            /** Шаблон просмотра (используется на странице с просмотром проверки) */
            view_template: (string | number)[];
            /** Логи фильтра по категориям кодов (используется на странице с просмотром проверки) */
            log_http_codes_hundreds: (string | number)[];
            /** Тип сигнала просмотра (используется на странице с просмотром проверки) */
            view_signal_type: (string | number)[];
            /** Внешние ссылки (используется на странице с просмотром проверки) */
            links_external?: string;
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Экспорт отчета Анализа сайта */
        "Audit_2.Methods.Audit.Export.Summary.Get": {
            /** Формат экспортируемого файла */
            output: string;
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Получение информации о текущей ошибке на роботе */
        "Audit_2.Methods.Audit.Log.ActualError.Get": {
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        DateTime: Record<string, never>;
        /**
         * Получение данных для графика
         * @deprecated
         */
        "Audit_2.Methods.Audit.Log.Chart.Get": {
            /** Фильтр по периоду */
            time1?: components["schemas"]["DateTime"] | null;
            /** Фильтр по периоду */
            time2?: components["schemas"]["DateTime"] | null;
            /**
             * Номер страницы (для использования в SQL)
             * @default 1
             */
            page: number;
            limit?: components["schemas"]["limit"];
            offset?: components["schemas"]["offset"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /**
         * Тип отчета аудита для экспорта
         * @enum {integer}
         */
        "Audit_2.Types.Audit.Results.Export.TypeReport": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
        /**
         * Экспорт результатов аудита
         * @deprecated
         */
        "Audit_2.Methods.Audit.Results.Export.Get": {
            type_report: components["schemas"]["Audit_2.Types.Audit.Results.Export.TypeReport"];
            /**
             * Формат экспорта
             * @default pdf
             */
            format: string;
            /** Данные поиска во всех табличных разделах (только для PDF) */
            search?: string | null;
            /** Данные фильтрации во всех табличных разделах (только для PDF) */
            filter?: string | null;
            /** Вид ссылок (только для PDF) */
            external?: string | null;
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /**
         * Получение результатов анализа страницы
         * @deprecated
         */
        "Audit_2.Methods.Audit.Results.Page.Get": {
            /** Ссылка на анализируемую страницу */
            url: string;
            /** Поиск */
            search?: string | null;
            orders?: components["schemas"]["orders"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Отправка проектов на проверку индексации */
        "Audit_2.Methods.Indexing.Checker.Go.Edit": {
            /** Запуск в режиме отладки */
            debug?: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Полуение стоимости проверки индексации */
        "Audit_2.Methods.Indexing.Checker.Price.Get": {
            /**
             * Отображать сумму с учетом скидки
             * @default 1
             */
            apply_discount: number;
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение гостевой ссылки на просмотр индексации
         *
         *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
        "Audit_2.Methods.Indexing.Export.Links.Get": {
            /** Поисковые ключи */
            searchers_keys?: (string | number)[] | null;
            /** Диапозон значений шаблона */
            template_date_range?: string | null;
            /** Произвольные даты без использования диапазона */
            dates?: (string | number)[] | null;
            /** Дата начала диапазона */
            date1?: string | null;
            /** Дата окончания диапазона */
            date2?: string | null;
            /** Тип диапазона дат */
            type_range: components["schemas"]["Audit_2.Types.Indexing.TypeRange"];
            /** Тип диапазона дат (при сравнении) */
            type_range_compare: components["schemas"]["Audit_2.Types.Indexing.TypeRange"];
            /** Количество дней в диапазоне */
            count_dates?: number;
            /** ID тегов */
            tags_ids?: (string | number)[] | null;
            /** Сортировка данных */
            data_sort?: (string | number)[] | null;
            /** Применение изменений только для */
            only_changed_for?: string | null;
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Хранилище для экспорта
         * @enum {string}
         */
        "Export_2.Types.Repository.Name": "gdrive";
        /** Экспорт файла в хранилище */
        "Audit_2.Methods.Indexing.Export.ToRepository.Get": {
            repository: components["schemas"]["Export_2.Types.Repository.Name"];
            project_id: components["schemas"]["project_id"];
        };
        /** Получение сводок индексации для графика */
        "Audit_2.Methods.Indexing.Summary.Chart.Get": {
            /** Произвольные даты без диапазона */
            dates: (string | number)[];
            searcher_key?: components["schemas"]["Audit_2.Types.Indexing.SearcherKey"] | null;
            /** Отобразить количество изменений */
            show_counts_changes?: boolean;
            /** Отобразить количество страниц в индексе */
            show_counts_in_index?: boolean;
            /** Отобразить количество проверенных страниц */
            show_counts_all?: boolean;
            /**
             * Вернуть данные в формате для графика
             *
             *     Недокументируемый параметр
             * @description @private
             */
            forChart?: boolean;
            project_id: components["schemas"]["project_id"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /**
         * Максимальное количество страниц для генерации карты сайта
         * @enum {string}
         */
        "Audit_2.Types.Sitemap.MaxPages": "100" | "1000" | "10000" | "100000" | "150000" | "300000";
        /** Отправка проектов на проверку карты сайта */
        "Audit_2.Methods.Sitemap.Checker.Go.Edit": {
            max_pages: components["schemas"]["Audit_2.Types.Sitemap.MaxPages"];
            /** Запуск в режиме отладки */
            debug?: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Полуение стоимости проверки карты сайта */
        "Audit_2.Methods.Sitemap.Checker.Price.Get": {
            /**
             * Отображать ли сумму с учетом скидки
             * @default 1
             */
            apply_discount: number;
            max_pages: components["schemas"]["Audit_2.Types.Sitemap.MaxPages"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Отправка проектов на проверку радара */
        "Audit_2.Methods.Watcher.Checker.Go.Edit": {
            /** Запуск в режиме отладки */
            debug?: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Полуение стоимости проверки радара */
        "Audit_2.Methods.Watcher.Checker.Price.Get": {
            /**
             * Отображать ли сумму с учетом скидки
             * @default 1
             */
            apply_discount: number;
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** ID проверки радара */
        "properties-check_id": number;
        /** Создание гостевой ссылки на просмотр радара */
        "Audit_2.Methods.Watcher.Export.Links.Get": {
            /** Выбранный элемент в меню */
            view_name?: string;
            /** Выводить полные тексты (для вкладки контент) */
            fulltext: boolean;
            /** @default all */
            changed: components["schemas"]["Audit_2.Types.Audit.Summary.FilterCheckState"];
            /** Фильтр по тегам */
            tags_ids?: (string | number)[] | null;
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["properties-check_id"];
        };
        /** Получение сводок радара для графика */
        "Audit_2.Methods.Watcher.Summary.Chart.Get": {
            /** Тип проверки */
            watcher_types?: (string | number)[] | null;
            /** ID проверок */
            checks_ids: (string | number)[];
            /** Отобразить количество изменений по типам */
            show_counts_changes?: boolean;
            /** Недокументируемый параметр, данные для графика */
            forChart?: boolean;
            project_id: components["schemas"]["project_id"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение календаря текстовых апдейтов */
        "Content_2.Methods.Apometr.Text.Calendar.Get": {
            /** Дата календаря */
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение текстовых апдейтов */
        "Content_2.Methods.Apometr.Text.Updates.Get": {
            /** @default 100 */
            limit: number;
            searcher_key: components["schemas"]["Positions_2.Types.SearcherKey"];
            date?: components["schemas"]["TV.API.Types.Date"] | null;
        };
        /** Получение дат апдейтов */
        "Content_2.Methods.Apometr.Updates.Dates.Get": {
            limit?: number | null;
        };
        /** Создание сертификата
         *
         *      Можно создавать только для пройденных курсов */
        "Content_2.Methods.Journal.Course.Certificates.Add": {
            /** Url курса относительно домена */
            course_url: string;
            /** Имя на кого выписывается сертификат */
            user_name: string;
        };
        /** Изменение сертификата
         *
         *     Можно менять только имя, если оно не указано */
        "Content_2.Methods.Journal.Course.Certificates.Edit": {
            /** Url курса относительно домена */
            course_url: string;
            /** Имя на кого выписывается сертификат */
            user_name: string;
        };
        /** Получение своего сертификата */
        "Content_2.Methods.Journal.Course.Certificates.Get": {
            /** Url курса относительно домена */
            course_url: string;
        };
        /** Получение модулей курса
         *
         *     Дополнительные поля:
         *      - lessons - см. includeLessons() */
        "Content_2.Methods.Journal.Course.Chapters.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /**
         * Получение списка страниц по буквам для модуля SEO словарь
         *     Результат функции кешируется
         * @description @return array<string, array{url: string, h1: string}> - массив с ключом "Буква" и значением массив страниц Pages
         */
        "Content_2.Methods.Journal.Dictionary.ArticlesByLetter.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /**
         * Получение стаьи для "Слово дня" в модуле SEO словарь
         * @description @return (array<string, array{url: string, menu_name: string, description: string, count_views: integer}> | null)
         */
        "Content_2.Methods.Journal.Dictionary.WordOfday.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /**
         * По каким параметрам расширять группу
         * @enum {string}
         */
        "Keywords_2.Types.Collect.Ext.Type": "groupName" | "groupNameWithKeywords" | "keywords";
        /** Определитель региона */
        "Keywords_2.Objects.Collect.Ext.Qualifier": {
            region_key: number;
            searcher_key: components["schemas"]["Positions_2.Types.SearcherKey"];
            region_lang?: string | null;
        };
        /** Массив определителей региона */
        "Keywords_2.Objects.Collect.Ext.QualifiersArray": components["schemas"]["Keywords_2.Objects.Collect.Ext.Qualifier"][];
        /** Постановка задачи на расширение группы */
        "Keywords_2.Methods.Collect.Ext.Go.Edit": {
            /** ID проекта */
            project_id: number;
            /** Минус фразы */
            keywords_minus?: (string | number)[] | null;
            /** Каким типом расширять группу */
            type: components["schemas"]["Keywords_2.Types.Collect.Ext.Type"];
            /** Объекты определителей настроек ПС и регионов */
            qualifiers: components["schemas"]["Keywords_2.Objects.Collect.Ext.QualifiersArray"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение цены на расширение группы */
        "Keywords_2.Methods.Collect.Ext.Price.Get": {
            /** ID проекта */
            project_id: number;
            /** Минус фразы */
            keywords_minus?: (string | number)[] | null;
            /**
             * Отображать сумму с учетом скидки (по умолчанию: 1)
             * @default true
             */
            apply_discount: boolean;
            /** Каким типом расширять группу */
            type: components["schemas"]["Keywords_2.Types.Collect.Ext.Type"];
            /** Объекты определителей настроек ПС и регионов */
            qualifiers: components["schemas"]["Keywords_2.Objects.Collect.Ext.QualifiersArray"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Экспорт регионов (CSV)
         *
         *     - searcher_key, name_or_key (название или код)[, country_code (2 буквенный код страны), lang, device, depth] */
        "Positions_2.Methods.Searchers.Regions.Export.Get": {
            /** Id проекта */
            project_id: number;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Импорт регионов (CSV) */
        "Positions_2.Methods.Searchers.Regions.Import.Add": {
            /** Id проекта */
            project_id: number;
            /** Массив регионов в формате CSV
             *
             *     array regions - массив регионов в формате CSV
             *     file(csv) regions - файл с содержимым для импорта в формат CSV
             *     - нельзя передавать regions одновременно в виде массива и в виде файла
             *
             *     формат csv (от 2 до 6 столбцов):
             *     - searcher_key, name_or_key (название или код)[, country_code (2 буквенный код страны), lang, device, depth] */
            regions?: unknown;
        };
        /** Настройка сортировки регионов */
        "Positions_2.Methods.Searchers.Regions.Sort.Edit": {
            /** Id проекта */
            project_id: number;
            /** Ключ ПС */
            searcher_key: components["schemas"]["Positions_2.Types.SearcherKey"];
            /** Ключи регионов */
            regions_indexes: components["schemas"]["TV.API.Types.IntArray"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение статуса проверки частоты задачи */
        "Projects_2.Methods.Tasks.Volumes.Status.Get": {
            /** Id проекта */
            project_id: number;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Изменение сортировки шаблонов */
        "Tickets_2.Methods.Admin.Templates.Sort.Edit": {
            /** ID шаблонов */
            ids: components["schemas"]["TV.API.Types.IntArray"];
        };
        /** Копирование истории позиций */
        "Admin_2.Methods.Actions.Positions.History.Copy.Add": {
            /** Откуда скопировать */
            projectId: number;
            /** Куда скопировать */
            projectId2: number;
            /** Пропустить пустые истории */
            skipEmpty: number;
            /** Являеется ли запуск - тестом */
            test: boolean;
        };
        /** Получение сертификата по id */
        "Content_2.Methods.Journal.Course.Certificates.ByID.Get": {
            /** Id сертификата */
            id: number;
        };
        /** Получение сертификата в виде изображения */
        "Content_2.Methods.Journal.Course.Certificates.Image.Get": {
            /** Формат файла
             *
             *     * pdf
             *     * png */
            format: string;
            /** Возвращаемый формат
             *
             *     * dataURL: вернуть в ответе как Data URL
             *     * inline вывести файл как есть */
            output?: string | null;
            /** devicePixelRatio, см. в js window.devicePixelRatio, имеет смысл для format = png */
            dpr?: number | null;
            /** Id сертификата */
            id: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AddAnalytics2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Analytics_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Annotations"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Annotations"];
                };
            };
        };
    };
    GetApp2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["App_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Id вставленного комментария */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Comments"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Comments"];
                };
            };
        };
    };
    AddPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Payments"];
                };
            };
        };
    };
    GetQr2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Qr_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelRecurring2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Recurring_2.Methods.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditRecurring2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Recurring_2.Methods.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTags2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tags_2.Methods.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetTags2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tags_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddUrls2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    EditUrls2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    GetUrls2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список urls проекта */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    AddVotes2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Votes_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Votes"];
                };
            };
        };
    };
    GetVotes2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Votes_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Votes"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Votes"];
                };
            };
        };
    };
    AbstractregularAdmin2Actions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.AbstractRegular"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Непосредтсвенный вызов API функции
                         *
                         *     Запрещено делать публичной, это приведет к поломке preCall()
                         *
                         *     В описании к функции отвечать на вопрос: `Что является результатом запроса?` Например: `Список пользователей`
                         *
                         *     TODO: Автоматической проверки нет, не менять protected */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Ghost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Ghost.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAdmin2I18n: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.I18n.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{lang: string, category: string, name: string, value: string} */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAdmin2Informer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Informer.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2Logs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Logs.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Logs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Logs.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Ranks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Ranks.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Analytics.Ranks"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Analytics.Ranks"];
                };
            };
        };
    };
    AddAdmin2Staff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2Staff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Staff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Staff"];
                };
            };
        };
    };
    EditAdmin2TariffChangeExpire: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.TariffChangeExpire.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Tpl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Tpl.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2Users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Users"];
                };
            };
        };
    };
    GetAdmin2Users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Users"];
                };
            };
        };
    };
    GetAdmin2Votes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Votes.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Votes"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Votes"];
                };
            };
        };
    };
    GetAnnotations2My: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.My.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Annotations"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Annotations"];
                };
            };
        };
    };
    GetApp2Actions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["App_2.Methods.Actions.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetApp2Privacy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["App_2.Methods.Privacy.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Controller_2.Objects.Page"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2CountUrls: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.CountUrls.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Количество настроенных URL */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2Indexing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список ссылок с данными по ним */
                        result: components["schemas"]["Models.Urls"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    EditAudit2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Settings.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Количество применных настроек */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Settings.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Настройки аудита */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2Watcher: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Генерируемый на основе urls, список результатов проверок радара */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetBank2Bank: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Bank.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetBank2History: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.History.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.BalanceHistory"];
                };
            };
        };
    };
    GetBank2Info: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Info.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddBank2Requisites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Requisites.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelBank2Requisites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Requisites.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditBank2Requisites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Requisites.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetBank2Requisites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Requisites.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Requisites"];
                };
            };
        };
    };
    GetBank2Ur: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Ur.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetComments2ByAuthor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.ByAuthor.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Comments"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Comments"];
                };
            };
        };
    };
    EditComments2Like: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Like.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditContent2Authors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Authors.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2Authors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Authors.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Content.Authors"];
                };
            };
        };
    };
    AbstactregularContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Redirects.AbstactRegular"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Непосредтсвенный вызов API функции
                         *
                         *     Запрещено делать публичной, это приведет к поломке preCall()
                         *
                         *     В описании к функции отвечать на вопрос: `Что является результатом запроса?` Например: `Список пользователей`
                         *
                         *     TODO: Автоматической проверки нет, не менять protected */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Redirects.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Redirects.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Redirects.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Redirects.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.ContentsRedirects"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.ContentsRedirects"];
                };
            };
        };
    };
    GetContent2Rss: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Rss.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    GetContent2Sitemap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Sitemap.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    AddCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Commands.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    DelCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Commands.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    EditCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Commands.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    GetCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Commands.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список задач cron */
                        result: components["schemas"]["Models.CronCommands"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    GetCron2Services: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список имен сервисов */
                        result: components["schemas"]["Models.CronCommands"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    GetExample2Array: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Example_2.Methods.Array.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Ассоциативный результирующий массив, с данными, переданными в метод и результатом genSet() */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetExample2Custom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Example_2.Methods.Custom.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetExample2Enum: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Example_2.Methods.Enum.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Ассоциативный результирующий массив, с данными, переданными в метод */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetExample2Object: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Example_2.Methods.Object.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Ассоциативный результирующий массив, с данными, переданными в метод */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetExample2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Example_2.Methods.Projects.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    AbstractregularKeywords2Collect: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Collect.AbstractRegular"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Непосредтсвенный вызов API функции
                         *
                         *     Запрещено делать публичной, это приведет к поломке preCall()
                         *
                         *     В описании к функции отвечать на вопрос: `Что является результатом запроса?` Например: `Список пользователей`
                         *
                         *     TODO: Автоматической проверки нет, не менять protected */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetKeywords2Keywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Keywords.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Keywords"];
                };
            };
        };
    };
    GetKeywords2Volumes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Volumes.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Groups"];
                };
            };
        };
    };
    GetOpenapi2Download: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpenAPI_2.Methods.Download.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetPayments2Companies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Companies.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2ContractSign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.ContractSign.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2NextRequisitesId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.NextRequisitesId.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddPayments2UrTinkoffCreateApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.UrTinkoffCreateApplication.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetPayments2ValidateMerchantCardAP: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.ValidateMerchantCardAP.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddPositions2Searchers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelPositions2Searchers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPositions2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Settings.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddProjects2Analytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Analytics.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelProjects2Analytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Analytics.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2Analytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Analytics.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2Analytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Analytics.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddProjects2Competitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Competitors.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelProjects2Competitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Competitors.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2Competitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Competitors.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddProjects2Folders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Folders.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @returns ?int id добавленной папки */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelProjects2Folders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Folders.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects.Folders"];
                };
            };
        };
    };
    GetProjects2Folders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Folders.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects.Folders"];
                };
            };
        };
    };
    AddProjects2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelProjects2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetProjects2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    DelProjects2Rights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Rights.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2Rights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Rights.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2Rights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Rights.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2Status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Status.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["stdClass"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2Tasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Tasks.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelRecurring2RecurringCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Recurring_2.Methods.RecurringCard.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetRecurring2RecurringCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Recurring_2.Methods.RecurringCard.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddTickets2Files: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Files.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelTickets2Files: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Files.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetTickets2Files: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Files.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddTickets2Messages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Messages.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Id добавленного сообщения */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2Rate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Rate.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddTickets2Tickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Id тикета */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2Tickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetTickets2Tickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Tickets"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Tickets"];
                };
            };
        };
    };
    GetUrls2Export: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Export.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddUrls2Import: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Import.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return ?array{'countSended': int, 'countDuplicated': int, 'countAdded': int, 'countChanged': int}
                         *
                         *     @throws Exception */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditUrls2Tags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Tags.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    EditVotes2Comment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Votes_2.Methods.Comment.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2AccountingCounteragents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Counteragents.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AccountingCounteragents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Counteragents.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Accounting.Counteragents"];
                };
            };
        };
    };
    EditAdmin2AccountingGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Group.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AccountingGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Group.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.EmptyModel"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.EmptyModel"];
                };
            };
        };
    };
    AddAdmin2AccountingInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Invoices.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelAdmin2AccountingInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Invoices.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Invoices"];
                };
            };
        };
    };
    GetAdmin2AccountingInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Invoices.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Invoices"];
                };
            };
        };
    };
    GetAdmin2AccountingOperations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Operations.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.EmptyModel"];
                };
            };
        };
    };
    EditAdmin2ActionsBank: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Bank.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelAdmin2ActionsPayments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Payments.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsPayments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Payments.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsPositions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Positions.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Projects.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2ActionsProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Projects.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAdmin2ActionsTelegram: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Telegram.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferralProgramStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Affiliate.ReferralProgramStats.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferralsByLevel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Affiliate.ReferralsByLevel.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferrals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Affiliate.Referrals.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferrersByReferrals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Affiliate.ReferrersByReferrals.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferrers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Affiliate.Referrers.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferrersWithReferrals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Affiliate.ReferrersWithReferrals.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.EmptyModel"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.EmptyModel"];
                };
            };
        };
    };
    GetAdmin2AnalyticsActivity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Activity.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsCountOnlineUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.CountOnlineUsers.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Events.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Analytics.Events"];
                };
            };
        };
    };
    GetAdmin2AnalyticsPayments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Payments.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsServices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Statistics.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AbstractticketsstatsAdmin2AnalyticsTickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Tickets.AbstractTicketsStats"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Непосредтсвенный вызов API функции
                         *
                         *     Запрещено делать публичной, это приведет к поломке preCall()
                         *
                         *     В описании к функции отвечать на вопрос: `Что является результатом запроса?` Например: `Список пользователей`
                         *
                         *     TODO: Автоматической проверки нет, не менять protected */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Tickets.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Tickets"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Tickets"];
                };
            };
        };
    };
    GetAdmin2I18nCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.I18n.Categories.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2LogsSystem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Logs.System.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2RanksActivations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Ranks.Activations.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Analytics.RanksUsers"];
                };
            };
        };
    };
    GetAdmin2SlackRate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Slack.Rate.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список пользователей */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2StaffAccess: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.Access.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Staff"];
                };
            };
        };
    };
    GetAdmin2StaffByPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.ByPost.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2StaffContractPrint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.ContractPrint.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAdmin2StaffPosts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.Posts.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAdmin2StaffVacation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.Vacation.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelAdmin2StaffVacation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.Vacation.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2StaffVacationPrint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Staff.VacationPrint.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAdmin2TplSchema: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Tpl.Schema.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAdmin2UsersPromocodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Promocodes.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @throws Exception */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Users.Verif"];
                };
            };
        };
    };
    GetAdmin2UsersPromocodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Promocodes.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Users.Verif"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Users.Verif"];
                };
            };
        };
    };
    AddAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Ranks.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Users.Ranks"];
                };
            };
        };
    };
    EditAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Ranks.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Users.Ranks"];
                };
            };
        };
    };
    GetAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Ranks.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Admin.Users.Ranks"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Users.Ranks"];
                };
            };
        };
    };
    GetAudit2AuditBrowse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Browse.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводка анализа сайта */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditChecks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Checks.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список выполненных (выполняемых) проверок аудита */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Checks"];
                };
            };
        };
    };
    GetAudit2AuditCss: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Css.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверенных css */
                        result: components["schemas"]["Models.Audit.Css"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Css"];
                };
            };
        };
    };
    GetAudit2AuditExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Export.Get"];
            };
        };
        responses: {
            /** @description Файл результатов проверки сайта */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAudit2AuditImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Images.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверенных изображений */
                        result: components["schemas"]["Models.Audit.Images"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Images"];
                };
            };
        };
    };
    GetAudit2AuditJs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Js.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверенных js */
                        result: components["schemas"]["Models.Audit.Js"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Js"];
                };
            };
        };
    };
    GetAudit2AuditLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверенных ссылок */
                        result: components["schemas"]["Models.Audit.Links"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Links"];
                };
            };
        };
    };
    GetAudit2AuditLog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Log.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Данные проверенных ресурсов */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditPages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Pages.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список страниц */
                        result: components["schemas"]["Models.Audit.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Pages"];
                };
            };
        };
    };
    GetAudit2AuditSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Summary.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводка о выполненном аудите
                         *
                         *     Возвращает объект со сводкой по категориям, пример:
                         *      - `$res['all']['all']['count_checks_success']` - количество пройденных проверок во всех категориях
                         *      - `$res['pages']['indexing']['count_checks_success']` - количество пройденных проверок в категории Страницы / Индексация
                         *      - `$res['all']['all']['count_checks_success']` - количество пройденных проверок во всех категориях */
                        result: components["schemas"]["Models.Audit.Checks"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Checks"];
                };
            };
        };
    };
    GetAudit2AuditSummaryPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.SummaryPage.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводка о выполненном аудите по одной странице */
                        result: components["schemas"]["Models.Audit.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Pages"];
                };
            };
        };
    };
    GetAudit2IndexingExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Export.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Результаты индексации */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2IndexingLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Короткая гостевая ссылка на просмотр позиций */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2IndexingSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Summary.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводка индексации */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2WatcherByURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.ByURL.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Отчет по одному URL */
                        result: components["schemas"]["Models.Watcher.Results"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Watcher.Results"];
                };
            };
        };
    };
    GetAudit2WatcherChecks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Checks.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверок радара */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2WatcherSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Summary.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводка с количеством изменений по каждому типу проверки */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetBank2DiadocSendContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Diadoc.SendContract.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: boolean;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetBank2DiadocSendTotalReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Diadoc.SendTotalReceipt.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: boolean;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetBank2HistoryExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.History.Export.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetBank2HistorySummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.History.Summary.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.BalanceHistory"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.BalanceHistory"];
                };
            };
        };
    };
    EditBank2ReferralsToBonus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Referrals.ToBonus.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetBank2RequisitesContractTariffId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Requisites.ContractTariffId.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetBank2RequisitesPrint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Requisites.Print.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetBank2RequisitesPrintTotalReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Requisites.PrintTotalReceipt.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetBank2RequisitesPrintZip: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bank_2.Methods.Requisites.PrintZip.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetContent2ApometrCalendar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Apometr.Calendar.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrCHHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Apometr.CHHistory.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Apometr.History"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Apometr.History"];
                };
            };
        };
    };
    GetContent2ApometrHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Apometr.History.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrKeywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Apometr.Keywords.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Apometr.Keywords"];
                };
            };
        };
    };
    GetContent2ApometrUpdates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Apometr.Updates.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalArticles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Articles.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    GetContent2JournalBookmarksAuthors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.BookmarksAuthors.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    GetContent2JournalBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Bookmarks.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    GetContent2JournalCourse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Course.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    GetContent2JournalRubrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Rubrics.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    EditContent2JournalSubscribe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Subscribe.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2SupportMenu: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Support.Menu.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditKeywords2CollectGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Collect.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Массив созданных групп */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetKeywords2CollectPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Collect.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<string, array{price: float, priceOriginal: float, qualifiers: array{region_key: int, searcher_key: (0 | 1 | 5 | 100 | 101 | 102 | 104 | 105 | 106), region_lang?: (string | null), also_searched?: (int | null), depth?: (int | null), hint_depth: (1 | 2 | 3), hint_generators: array<('letter' | 'letter_ru' | 'number' | 'space')>}, comment: string}>} */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddKeywords2KeywordsImport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Keywords.Import.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditKeywords2VolumesGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Volumes.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetKeywords2VolumesPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Volumes.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @throws Exception */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddLandings2HrFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Landings_2.Methods.Hr.Feedback.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffDelCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Tariff.DelCard.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffNextToDiadoc: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Tariff.NextToDiadoc.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffSetNext: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Tariff.SetNext.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPositions2SearchersEnabled: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Enabled.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddPositions2SearchersRegions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Regions.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelPositions2SearchersRegions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Regions.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPositions2SearchersRegions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Regions.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPositions2SearchersSort: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Sort.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2AnalyticsGraph: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Analytics.Graph.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2CompetitorsMove: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Competitors.Move.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2CompetitorsName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Competitors.Name.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2CompetitorsOn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Competitors.On.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2FoldersMove: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Folders.Move.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2FoldersMoveFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Folders.MoveFolder.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2FoldersName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Folders.Name.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2MasterHintsCompetitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Master.HintsCompetitors.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2MasterHintsKeywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Master.HintsKeywords.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddProjects2ProjectsCopy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Copy.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2ProjectsFavorite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Favorite.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    EditProjects2ProjectsMove: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Move.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2ProjectsName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Name.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2ProjectsOn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.On.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    EditProjects2ProjectsSort: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Sort.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    EditProjects2ProjectsTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Tags.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2ProjectsUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Projects.Url.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelProjects2RightsChangeOwner: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Rights.ChangeOwner.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditProjects2RightsChangeOwner: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Rights.ChangeOwner.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2StatusRegistrar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Status.Registrar.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["stdClass"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2StatusSsl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Status.Ssl.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["stdClass"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddProjects2TasksVolumes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Tasks.Volumes.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelTickets2AdminMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.Message.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.Message.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddTickets2AdminTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.Templates.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelTickets2AdminTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.Templates.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.Templates.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetTickets2AdminTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.Templates.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminTicket: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.Ticket.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminTicketSplit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.TicketSplit.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetTickets2AdminUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.User.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminUserId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.UserId.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2TicketsAdminComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.AdminComment.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetTickets2TicketsInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.Info.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2TicketsSetReaded: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.SetReaded.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2TicketsWriting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.Writing.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetUrls2ImportRecognizeLinkSitemapXml: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Import.RecognizeLinkSitemapXml.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** URL к карте сайта */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddUsers2JoinEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Users_2.Methods.Join.Email.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @throws Exception */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAdmin2AccountingGroupFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Group.Filter.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelAdmin2AccountingGroupFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Group.Filter.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2AccountingGroupFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Group.Filter.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AccountingInvoicesFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Invoices.File.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAdmin2AccountingOperationsExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Accounting.Operations.Export.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsAccountCurrency: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Account.Currency.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsBackupKeywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Backup.Keywords.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsBackupLoader: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Backup.Loader.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsBackupProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Backup.Project.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsBankReferral: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Bank.Referral.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAdmin2ActionsPaymentsDiadoc: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Payments.Diadoc.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAdmin2ActionsPositionsHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Positions.History.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsPositionsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Positions.Status.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsProjectsDomain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Projects.Domain.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsRobotChecks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Robot.Checks.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsRobotPriority: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Robot.Priority.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsRobotTask: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Robot.Task.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelAdmin2ActionsSlackFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Slack.Files.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelAdmin2ActionsSlackMessages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Slack.Messages.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsAccountingSummaryForChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Accounting.SummaryForChart.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsActivityChartByPeriod: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Activity.ChartByPeriod.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsCompetitorsSummaryForOrdersChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Competitors.SummaryForOrdersChart.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPaymentsSystems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Payments.Systems.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPaymentsTariff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Payments.Tariff.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPositionsChartByDayByHourAuto: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Positions.ChartByDayByHourAuto.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["stdClass"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPositionsChartByHourAuto: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Positions.ChartByHourAuto.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["stdClass"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPositionsChartByHour: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Positions.ChartByHour.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["stdClass"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPositionsChartCountUsersByHour: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Positions.ChartCountUsersByHour.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["stdClass"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByMigrations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Tickets.ChartByMigrations.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByNew: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Tickets.ChartByNew.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByRates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Tickets.ChartByRates.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Tickets.ChartByTags.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByWaitTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Tickets.ChartByWaitTime.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsMessages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Analytics.Tickets.Messages.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAdmin2LogsSystemChecked: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Logs.System.Checked.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2UsersInformerSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Informer.Subscriptions.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Данные для построения графика */
                        result: components["schemas"]["TV.Objects.Highcharts.Chart"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAudit2AuditCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Checker.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{projectIds: int[]}
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2AuditCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Checker.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<int, array{projectsIds: int[], price: float}>}
                         *
                         *     ```
                         *     {
                         *         "pricesByUsers": {
                         *                 "{{userId}}": {
                         *                     "projectsIds": [],
                         *                     "price": float,
                         *                     "priceOriginal": float
                         *                 }
                         *         }
                         *      }
                         *     ```
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2AuditExportLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Export.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Короткая гостевая ссылка на просмотр аудита позиций */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditExportSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Export.Summary.Get"];
            };
        };
        responses: {
            /** @description Файл отчета анализа сайта */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAudit2AuditLogActualError: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Log.ActualError.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Информацией о текущей ошибке на роботе
                         *
                         *     Вернет null, если ошибки на роботе нет */
                        result: components["schemas"]["stdClass"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditLogChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Log.Chart.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Данные для графика */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditResultsExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Results.Export.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Ответ об успешнности экспорта результатов аудита */
                        result: boolean;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditResultsPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Results.Page.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Результаты анализа страницы
                         *     ```
                         *     {
                         *            "result": {
                         *                'page_in_filter': bool,
                         *                'index': => int,
                         *                'snippet': => string,
                         *                'content': => string
                         *            }
                         *     }
                         *     ``` */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAudit2IndexingCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Checker.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{projectIds: int[]}
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2IndexingCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Checker.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<int, array{projectsIds: int[], price: float}>}
                         *
                         *     ```
                         *     {
                         *        "pricesByUsers": {
                         *            "{{userId}}": {
                         *                "projectsIds": [],
                         *                "price": float
                         *            }
                         *        }
                         *     }
                         *     ```
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2IndexingExportLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Export.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Короткая гостевая ссылка на просмотр индексации */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2IndexingExportToRepository: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Export.ToRepository.Get"];
            };
        };
        responses: {
            /** @description Будет произведен редиркт на файл в хранилище */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAudit2IndexingSummaryChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Summary.Chart.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводки индексации */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAudit2SitemapCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Sitemap.Checker.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{projectIds: int[]}
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2SitemapCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Sitemap.Checker.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<int, array{projectsIds: int[], price: float}>}
                         *
                         *     ```
                         *     {
                         *        "pricesByUsers": {
                         *            "{{userId}}": {
                         *                "projectsIds": [],
                         *                "price": float
                         *            }
                         *        }
                         *     }
                         *     ```
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    EditAudit2WatcherCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Checker.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{projectIds: int[]}
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2WatcherCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Checker.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<int, array{projectsIds: int[], price: float}>}
                         *
                         *     ```
                         *     {
                         *        "pricesByUsers": {
                         *            "{{userId}}": {
                         *                "projectsIds": [],
                         *                "price": float
                         *            }
                         *        }
                         *     }
                         *     ```
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2WatcherExportLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Export.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Короткая ссылка гостевого доступа для просмотра радара */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2WatcherSummaryChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Summary.Chart.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводки с количеством изменений по каждому типу проверки */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrTextCalendar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Apometr.Text.Calendar.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array<string, array<string, int>> */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrTextUpdates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Apometr.Text.Updates.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrUpdatesDates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Apometr.Updates.Dates.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddContent2JournalCourseCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Course.Certificates.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    EditContent2JournalCourseCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Course.Certificates.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalCourseCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Course.Certificates.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalCourseChapters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Course.Chapters.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    GetContent2JournalDictionaryArticlesByLetter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Dictionary.ArticlesByLetter.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    GetContent2JournalDictionaryWordOfday: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Dictionary.WordOfday.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Pages"];
                };
            };
        };
    };
    EditKeywords2CollectExtGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Collect.Ext.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetKeywords2CollectExtPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Keywords_2.Methods.Collect.Ext.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<string, array{price: float, priceOriginal: float, qualifiers: array{region_key: int, searcher_key: (0 | 1 | 5 | 100 | 101 | 102 | 104 | 105 | 106), region_lang?: (string | null), also_searched?: (int | null), depth?: (int | null), hint_depth: (1 | 2 | 3), hint_generators: array<('letter' | 'letter_ru' | 'number' | 'space')>}, comment: string}>} */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetPositions2SearchersRegionsExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Regions.Export.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddPositions2SearchersRegionsImport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Regions.Import.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPositions2SearchersRegionsSort: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Positions_2.Methods.Searchers.Regions.Sort.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetProjects2TasksVolumesStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects_2.Methods.Tasks.Volumes.Status.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    EditTickets2AdminTemplatesSort: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.Templates.Sort.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAdmin2ActionsPositionsHistoryCopy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Actions.Positions.History.Copy.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Admin_2.Objects.Actions.Result"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalCourseCertificatesByID: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Course.Certificates.ByID.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalCourseCertificatesImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Journal.Course.Certificates.Image.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
}
