/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {  
    /** Фиксация события */
    "/add/analytics_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAnalytics2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление примечания */
    "/add/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление примечания */
    "/del/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование примечания */
    "/edit/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение примечаний */
    "/get/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение заархивированного приложения */
    "/get/app_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление комментария */
    "/add/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление комментария
     *
     *     Удалять комментарии можно только в течение ограниченного времени
     *
     *     Админы могут удалять комментарии в любое время */
    "/del/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение комментария
     *
     *     Изменять комментарий можно только в течение ограниченного времени */
    "/edit/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение комментариев
     *
     *     Возвращает набор комментариев со всеми подкомменатриями, limit, offset не виляют на получение вложенных комментариев */
    "/get/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить полные данные об одной странице */
    "/get/content_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка упоминаний */
    "/get/mentions_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetMentions2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание платежки и переход к оплате
     *
     *     Возвращает id платежа, если указан параметр $return_id = true
     *
     *     Производит редирект, если настроена форма оплаты на стороне платежной системы
     *
     *     Возвращает информацию о платеже, если ожидается вывод формы оплаты на сайте
     *
     *     При ошибке производит редирект на страницу с информацией об ошибке */
    "/add/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка платежей */
    "/get/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Генерация QR кода по тексту
     *
     *     Возвращает изображение в формате data:image/png;base64 */
    "/get/qr_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetQr2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление теста */
    "/add/quiz_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddQuiz2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование теста */
    "/edit/quiz_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditQuiz2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение тестов */
    "/get/quiz_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetQuiz2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка рекуррентного платежа */
    "/edit/recurring_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditRecurring2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractregular/schedule_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractregularSchedule2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/del/schedule_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelSchedule2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Привязать расписание к объекту */
    "/edit/schedule_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditSchedule2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение рассписания */
    "/get/schedule_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSchedule2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сохранение списка тегов */
    "/edit/tags_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTags2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка тегов */
    "/get/tags_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTags2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сохранение шаблона */
    "/add/templates_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTemplates2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление шаблона */
    "/del/templates_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelTemplates2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение шаблона */
    "/edit/templates_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTemplates2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сохраненного списка шаблонов */
    "/get/templates_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTemplates2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление ссылки */
    "/add/tpvsr_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTpvsr2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование ссылки */
    "/edit/tpvsr_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTpvsr2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка ссылок пользователя */
    "/get/tpvsr_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTpvsr2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление url */
    "/add/urls_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUrls2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение urls */
    "/edit/urls_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUrls2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка urls проекта */
    "/get/urls_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUrls2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных пользователя */
    "/get/users_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Оставление отзыва */
    "/add/votes_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddVotes2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение своих отзывов */
    "/get/votes_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetVotes2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение скриншота (платная функция) */
    "/get/webscreens_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetWebscreens2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractregular/admin_2/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractregularAdmin2Actions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение доступа к акаунту пользователя в режиме "призрак" */
    "/get/admin_2/ghost/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Ghost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение записей словаря */
    "/get/admin_2/i18n/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2I18n"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/add/admin_2/informer/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2Informer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сохранение текстового файла лога */
    "/edit/admin_2/logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2Logs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Загрузка текстового файла лога */
    "/get/admin_2/logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Logs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/admin_2/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Ranks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление сотрудника */
    "/add/admin_2/staff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2Staff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit/admin_2/staff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2Staff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение персонала, объект admin_staff */
    "/get/admin_2/staff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Staff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение даты следующего списания по тарифу */
    "/edit/admin_2/tariffChangeExpire/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2TariffChangeExpire"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Поиск HTML шаблонов */
    "/get/admin_2/tpl/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Tpl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование пользователей, объект admin_users */
    "/edit/admin_2/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2Users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение пользователей */
    "/get/admin_2/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/admin_2/votes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2Votes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение всех своих примечаний по всем проектам и сервисам */
    "/get/annotations_2/my/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAnnotations2My"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных подтверждения
     *
     *     Возвращает результат подтверждения в виде
     *     массива с сообщением (acceptAction),
     *     логической переменной (acceptEmail),
     *     null при неправильно введенном типе */
    "/get/app_2/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2Actions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение текста политики конфиденциальности */
    "/get/app_2/privacy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2Privacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение количества настроенных URL */
    "/get/audit_2/countUrls/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2CountUrls"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение отчета по проверке индексации
     *
     *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
    "/get/audit_2/indexing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2Indexing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Применение настроек Анализа сайта */
    "/edit/audit_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение настроек аудита */
    "/get/audit_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение результатов проверок радара
     *
     *     Отчет генерируется на основе объектов urls
     *
     *     Необходимо указать либо check_id1 и check_id2, либо checks_ids (вместе указывать нельзя) */
    "/get/audit_2/watcher/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2Watcher"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных банка по БИК или Swift */
    "/get/bank_2/bank/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2Bank"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение истории транзакций */
    "/get/bank_2/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2History"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о балансе */
    "/get/bank_2/info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2Info"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавиление реквизитов */
    "/add/bank_2/requisites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddBank2Requisites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Закрытие договора (оферту закрыть невозможно) */
    "/del/bank_2/requisites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelBank2Requisites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение реквизитов */
    "/edit/bank_2/requisites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBank2Requisites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка договоров */
    "/get/bank_2/requisites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2Requisites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных юридического лица по ИНН */
    "/get/bank_2/ur/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2Ur"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование объявления */
    "/edit/broker_2/ads/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBroker2Ads"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение объявления рекламной кампании */
    "/get/broker_2/ads/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBroker2Ads"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление рекламной кампании в управление ставками */
    "/add/broker_2/campaigns/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddBroker2Campaigns"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление рекламной компании из управления ставками */
    "/del/broker_2/campaigns/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelBroker2Campaigns"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование рекламной кампании */
    "/edit/broker_2/campaigns/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBroker2Campaigns"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка рекламных кампаний */
    "/get/broker_2/campaigns/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBroker2Campaigns"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление групп рекламной кампании */
    "/add/broker_2/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddBroker2Groups"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение групп рекламной кампании */
    "/get/broker_2/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBroker2Groups"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление запросов рекламной кампании */
    "/del/broker_2/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelBroker2Keywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование объявлений (запросов) рекламной кампании */
    "/edit/broker_2/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBroker2Keywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение запросов рекламной кампании */
    "/get/broker_2/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBroker2Keywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение логов */
    "/get/broker_2/log/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBroker2Log"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение комментариев автора. Без вложенности */
    "/get/comments_2/byAuthor/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetComments2ByAuthor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование статуса лайка для комментария
     *
     *     Возвращает результат редактирования статуса лайка */
    "/edit/comments_2/like/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditComments2Like"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить настройки автора */
    "/edit/content_2/authors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2Authors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных об авторе */
    "/get/content_2/authors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Authors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование статуса закладки для автора */
    "/edit/content_2/bookmarkAuthor/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2BookmarkAuthor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование статуса закладки для страницы */
    "/edit/content_2/bookmark/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2Bookmark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование статуса лайка для страницы */
    "/edit/content_2/like/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2Like"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstracteditpage/content_2/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstracteditpageContent2Pages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание документа */
    "/add/content_2/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddContent2Pages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перенести документ в папку /archive/ */
    "/del/content_2/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelContent2Pages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение документа */
    "/edit/content_2/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2Pages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение документов */
    "/get/content_2/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Pages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractregular/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractregularContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление правила редиректа (для админов) */
    "/add/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление редиректа */
    "/del/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение правила редиректа (для админов) */
    "/edit/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка правил (для админов) */
    "/get/content_2/redirects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Redirects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение RSS раздела сайта
     *
     *     Для выборки страниц используется модель: Pages */
    "/get/content_2/rss/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Rss"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Поиск страниц */
    "/get/content_2/search/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение xml карты сайта */
    "/get/content_2/sitemap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Sitemap"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Поиск тегов */
    "/get/content_2/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Tags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление задачи cron */
    "/add/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление задачи cron */
    "/del/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение задачи cron */
    "/edit/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение задач cron */
    "/get/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка имен сервисов, в которых есть команды cron */
    "/get/cron_2/services/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetCron2Services"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Enum */
    "/get/example_2/array/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Array"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение текущего времени */
    "/get/example_2/custom/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Custom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Enum */
    "/get/example_2/enum/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Enum"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Object */
    "/get/example_2/object/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Object"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка проектов */
    "/get/example_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка уведомлений */
    "/edit/informer_2/config/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditInformer2Config"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение настроек уведомлений */
    "/get/informer_2/config/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetInformer2Config"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о сообщениях в информере */
    "/get/informer_2/info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetInformer2Info"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление сообщений из инфомера */
    "/del/informer_2/informer/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelInformer2Informer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка сообщений в информере */
    "/get/informer_2/informer/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetInformer2Informer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка запросов проекта */
    "/get/keywords_2/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2Keywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение частоты проекта или одной группы */
    "/get/keywords_2/volumes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2Volumes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение флага "прочитано" */
    "/edit/mentions_2/readed/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditMentions2Readed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление правила */
    "/add/mentions_2/rules/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddMentions2Rules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление правила */
    "/del/mentions_2/rules/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelMentions2Rules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка правил */
    "/get/mentions_2/rules/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetMentions2Rules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление поисковика
     *
     *     Изменит, если уже существует */
    "/add/mentions_2/searchers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddMentions2Searchers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление поисковика */
    "/del/mentions_2/searchers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelMentions2Searchers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка поисковиков */
    "/get/mentions_2/searchers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetMentions2Searchers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение тональности */
    "/edit/mentions_2/sentiment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditMentions2Sentiment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Создать Open API схемы и скачать в zip
     *
     *     В результате вернет zip файл в потоке вывода
     * @description @see https://editor.swagger.io/ Редактор Open API
     */
    "/get/openapi_2/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetOpenapi2Download"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение компании пользователя, через которых, были совершены платежи */
    "/get/payments_2/companies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2Companies"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Подписание контракта (только для админов) */
    "/edit/payments_2/contractSign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2ContractSign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение платежных реквизитов тарифа */
    "/edit/payments_2/nextRequisitesId/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2NextRequisitesId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Изменения подписки сейчас
     *
     *     Реализует две взаимоисключающие стратегии:
     *
     *     - Проведение доплаты по текущей подписке
     *     - Остановка текущей подписки и создание новой
     *        - Новая подписка получит скидку на первый платеж с учетом амортизации оплаты на действующую подписку
     *        - После оплаты новой подписки действующая подписка будет досрочно завершена
     *
     *     Выбор стратегии зависит от типа управления подпиской
     * @description @see Bank_2\Types\Subscriptions\Manager
     */
    "/edit/payments_2/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2Subscriptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка заявки на подключение Тинькофф Бизнес */
    "/add/payments_2/urTinkoffCreateApplication/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPayments2UrTinkoffCreateApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Валидация домена для подтверждения оплаты Apple Pay (system = card_ap) */
    "/get/payments_2/validateMerchantCardAP/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2ValidateMerchantCardAP"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление ПС */
    "/add/positions_2/searchers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPositions2Searchers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление ПС */
    "/del/positions_2/searchers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelPositions2Searchers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка общих настроек проверки позиций проекта */
    "/edit/positions_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление графика */
    "/add/projects_2/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2Analytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление графика */
    "/del/projects_2/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Analytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка графика */
    "/edit/projects_2/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2Analytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка графиков */
    "/get/projects_2/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Analytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление конкурента
     *
     *     Ограничения: не более Projects_2\Competitors::MAX_COMPETITORS_PER_PROJECT конкурентов в одном проекте */
    "/add/projects_2/competitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2Competitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление конкурентов
     *
     *     Обязательный параметр или ids или urls */
    "/del/projects_2/competitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Competitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка конкурентов */
    "/get/projects_2/competitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Competitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление папки */
    "/add/projects_2/folders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2Folders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление папок */
    "/del/projects_2/folders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Folders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка папок */
    "/get/projects_2/folders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Folders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление проекта */
    "/add/projects_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление проектов */
    "/del/projects_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка проектов */
    "/get/projects_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление прав у пользователя */
    "/del/projects_2/rights/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2Rights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение прав на проект */
    "/edit/projects_2/rights/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2Rights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о настройке прав и смене владельца */
    "/get/projects_2/rights/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Rights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о домене и SSL сертификате
     *     Возвращает объект с параметрами:
     *     - domain_expire
     *     - ssl_expire */
    "/get/projects_2/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Status"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка задач */
    "/get/projects_2/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2Tasks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractregular/quiz_2/questions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractregularQuiz2Questions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление вопроса */
    "/add/quiz_2/questions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddQuiz2Questions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление вопроса */
    "/del/quiz_2/questions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelQuiz2Questions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактировать вопрос */
    "/edit/quiz_2/questions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditQuiz2Questions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение вопроса */
    "/get/quiz_2/questions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetQuiz2Questions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление ответа */
    "/add/quiz_2/questionsResponses/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddQuiz2QuestionsResponses"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление результатов предыдущих попытки пройти тест */
    "/del/quiz_2/results/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelQuiz2Results"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение своих результатов прохождения теста */
    "/get/quiz_2/results/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetQuiz2Results"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение участников теста */
    "/get/quiz_2/resultsUsers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetQuiz2ResultsUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение теста с вопросами */
    "/get/quiz_2/withQuestions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetQuiz2WithQuestions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удалить привязанную карту (system = card) */
    "/del/recurring_2/recurringCard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelRecurring2RecurringCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение привязанных карт пользователя */
    "/get/recurring_2/recurringCard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetRecurring2RecurringCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить дополнительные параметры расписания */
    "/edit/schedule_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditSchedule2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получить дополнительные параметры расписания
     *
     *     Для каждого типа могут быть свои параметры
     * @description @see Schedule_2\Mods\Settings
     */
    "/get/schedule_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSchedule2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Проверить код для подтверждения действия */
    "/get/sms_2/checkPIN/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSms2CheckPIN"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправить код для подтверждения действия */
    "/get/sms_2/sendPIN/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSms2SendPIN"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractregular/snapshots_2/competitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractregularSnapshots2Competitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка конкурентов
     *
     *     Метод базируется на объекте keywords (доступны только фильтры) */
    "/get/snapshots_2/competitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2Competitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Выделение сайтов (доменов) как неважные */
    "/edit/snapshots_2/hiddenDomains/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditSnapshots2HiddenDomains"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка сайтов (доменов), которые выделены как неважные */
    "/get/snapshots_2/hiddenDomains/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2HiddenDomains"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractregular/snapshots_2/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractregularSnapshots2History"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение истории снимков выдачи
     *
     *     Метод базируется на объекте keywords (доступны только фильтры) */
    "/get/snapshots_2/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2History"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Вызов нескольких методов в одном вызове */
    "/get/system_2/calls/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2Calls"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание директории или загрузка файла
     *
     *     Вернет имя директории в случае создания директории или bool при загрузке файла */
    "/add/system_2/cloud/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddSystem2Cloud"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление файлов (файл будет перенесен в директорию /cloud/recycled) */
    "/del/system_2/cloud/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelSystem2Cloud"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение директорий и файлов из облака */
    "/get/system_2/cloud/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2Cloud"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение кешируемого HTML-шаблона */
    "/get/system_2/tpl/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2Tpl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных доступных столбцов для выборки */
    "/get/templates_2/availableFieldsData/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTemplates2AvailableFieldsData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление сохраненного списка столбцов */
    "/del/templates_2/fields/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelTemplates2Fields"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сохранение списка столбцов */
    "/edit/templates_2/fields/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTemplates2Fields"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сохраненного списока столбцов */
    "/get/templates_2/fields/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTemplates2Fields"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение дополнительных параметров к списку столбцов */
    "/get/templates_2/fieldsProperties/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTemplates2FieldsProperties"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Загрузка файла на сервер
     *
     *     Процесс создания сообщения в тикет не завершен */
    "/add/tickets_2/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2Files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление временных файлов для тикета
     *
     *     Процесс создания поста не завершен */
    "/del/tickets_2/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelTickets2Files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка временных файлов, загруженных для тикета
     *
     *     Процесс создания поста не завершен */
    "/get/tickets_2/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2Files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление сообщения к тикиту */
    "/add/tickets_2/messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2Messages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Дать оценку тикету */
    "/edit/tickets_2/rate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2Rate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание тикета */
    "/add/tickets_2/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2Tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование тикета */
    "/edit/tickets_2/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2Tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка тикетов с сообщениями */
    "/get/tickets_2/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2Tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики по ссылке */
    "/get/tpvsr_2/stat/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTpvsr2Stat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение тегов */
    "/edit/tpvsr_2/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTpvsr2Tags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить title ссылки */
    "/get/tpvsr_2/title/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTpvsr2Title"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт urls в определенном формате */
    "/get/urls_2/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUrls2Export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Импортирование urls
     *
     *     Доступные поля для импорта:
     *     - url
     *     - sitemap
     *     - audit
     *     - indexing
     *     - watcher
     *     - tags */
    "/add/urls_2/import/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUrls2Import"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение тегов */
    "/edit/urls_2/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUrls2Tags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Проверка на авторизацию пользователя */
    "/get/users_2/auth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2Auth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Выход из аккаунта */
    "/get/users_2/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2Logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractregular/users_2/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractregularUsers2Profile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение параметров активного пользователя */
    "/edit/users_2/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2Profile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Активация достижения */
    "/add/users_2/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUsers2Ranks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение достижений пользователя */
    "/get/users_2/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2Ranks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка рефералов */
    "/get/users_2/referrals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2Referrals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание заявки на регистрацию пользователя */
    "/add/users_2/reg/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUsers2Reg"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка телеграм аккаунтов
     *
     *     При указании project_id получает список телеграм аккаунтов по владельцу проекта */
    "/get/users_2/telegramAccounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2TelegramAccounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Нужно для обратной совместимости с приложениями
     * @deprecated
     * @description @deprecated
     */
    "/get/users_2/xml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2Xml"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление комментария к отзыву
     *
     *     Оставить комментарий можно в течение часа поосле выставления оценки */
    "/edit/votes_2/comment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditVotes2Comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение параметров контрагента */
    "/edit/admin_2/accounting/counteragents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2AccountingCounteragents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение контрагента */
    "/get/admin_2/accounting/counteragents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingCounteragents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit/admin_2/accounting/group/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2AccountingGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение групп */
    "/get/admin_2/accounting/group/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление счета на оплату */
    "/add/admin_2/accounting/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2AccountingInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отмена отправки счета. Разрешено только для счетов со статусом pending или sending */
    "/del/admin_2/accounting/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2AccountingInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение счетов на оплату */
    "/get/admin_2/accounting/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение внутренних операций */
    "/get/admin_2/accounting/operations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingOperations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание и проведение транзакции */
    "/edit/admin_2/actions/bank/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBank"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отмена проведения счета */
    "/del/admin_2/actions/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2ActionsPayments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Проведение счета */
    "/edit/admin_2/actions/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsPayments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Востановление удаленной проверки */
    "/edit/admin_2/actions/positions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsPositions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Востановление удаленного проекта */
    "/edit/admin_2/actions/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsProjects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сбор статистики и трафика */
    "/get/admin_2/actions/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2ActionsProjects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление бота в телеграм канал */
    "/add/admin_2/actions/telegram/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2ActionsTelegram"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение общей статистики по реферальной программе */
    "/get/admin_2/affiliate/referralProgramStats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferralProgramStats"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки числа рефералов по своему уровню */
    "/get/admin_2/affiliate/referralsByLevel/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferralsByLevel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки по новым рефералам */
    "/get/admin_2/affiliate/referrals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferrals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки числа партнеров по числу рефералов */
    "/get/admin_2/affiliate/referrersByReferrals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferrersByReferrals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки по новым партнерам */
    "/get/admin_2/affiliate/referrers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferrers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение партнеров c кол-вом рефералов */
    "/get/admin_2/affiliate/referrersWithReferrals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AffiliateReferrersWithReferrals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение активности пользователей по статусам активности
     *     статусы активности:
     *            1. Активный - клиент, который пополнял баланс в сервисе хотя бы раз. При этом трата средств в течение месяца не мнее 100 рублей (или $5).
     *            2. Активный (новый) - в эту категорию попадают клиенты, которые первый раз перешли в статус "Активного клиента".
     *            3. Активный (постоянный) - в эту категорию попадют клиенты, которые не меняли свой статус активности за последний месяц
     *            4. Активный (вернувшийся) - в эту категорию попадют клиенты, которые вернули себе статус "Активный клиент".
     *            5. Стал не активным - в эту категорию попадют клиенты, которые потеряли статус "Активного клиента" и на протяжении 2 месяцев не возвращали
     *     себе этот статус. */
    "/get/admin_2/analytics/activity/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsActivity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа активных пользователей */
    "/get/admin_2/analytics/countOnlineUsers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsCountOnlineUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение метрик из сервиса Аналитика */
    "/get/admin_2/analytics/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsEvents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение суммы оплат за период */
    "/get/admin_2/analytics/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPayments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/admin_2/analytics/services/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsServices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики */
    "/get/admin_2/analytics/statistics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsStatistics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/abstractticketsstats/admin_2/analytics/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AbstractticketsstatsAdmin2AnalyticsTickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение тикетов */
    "/get/admin_2/analytics/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение категорий словаря */
    "/get/admin_2/i18n/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2I18nCategories"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных из системного лога */
    "/get/admin_2/logs/system/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2LogsSystem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/admin_2/ranks/activations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2RanksActivations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Рейтинг по сообщениям в слеке за предыдущий месяц */
    "/get/admin_2/slack/rate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2SlackRate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка доступа */
    "/edit/admin_2/staff/access/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2StaffAccess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение из бд данные сотрудников указанного поста */
    "/get/admin_2/staff/byPost/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2StaffByPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Печать договора */
    "/get/admin_2/staff/contractPrint/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2StaffContractPrint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение возможных позиций сотрудников */
    "/get/admin_2/staff/posts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2StaffPosts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление отпуска для сотрудника */
    "/add/admin_2/staff/vacation/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2StaffVacation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление данных об отпуске */
    "/del/admin_2/staff/vacation/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2StaffVacation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Печать заявления на отпуск */
    "/get/admin_2/staff/vacationPrint/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2StaffVacationPrint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение схему HTML шаблона */
    "/get/admin_2/tpl/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2TplSchema"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление промокоды к достижению */
    "/add/admin_2/users/promocodes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2UsersPromocodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение промокодов
     *
     *     В params хранится строка в формате:
     *     - {{ rank_id }}
     *     - {{ rank_id }},single_code - для многоразового кода */
    "/get/admin_2/users/promocodes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersPromocodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление достижение */
    "/add/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Измение достижение */
    "/edit/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение достижения */
    "/get/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение сводки анализа сайта
     * @deprecated
     * @description @deprecated
     */
    "/get/audit_2/audit/browse/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditBrowse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение общей информации о проверках
     *     - только для проверки, которая не завершена
     *     - в ответе будут заменены значения кодов ответа на текущие: count_000, count_1xx, count_2xx, count_3xx, count_4xx, count_5xx
     *     - в ответе будет заменено значение count_pages и count_all на текущие
     *     - в ответ будет добавлены значения robot_step и robot_count_tasks_allм */
    "/get/audit_2/audit/checks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditChecks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных css */
    "/get/audit_2/audit/css/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditCss"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт результатов проверки файла */
    "/get/audit_2/audit/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных изображений */
    "/get/audit_2/audit/images/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditImages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных js */
    "/get/audit_2/audit/js/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditJs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных ссылок */
    "/get/audit_2/audit/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных проверенных ресурсов */
    "/get/audit_2/audit/log/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLog"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение страниц, по которым был выполнен аудит */
    "/get/audit_2/audit/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditPages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки о выполненном аудите */
    "/get/audit_2/audit/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки страницы */
    "/get/audit_2/audit/summaryPage/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditSummaryPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт результатов индексации
     *
     *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
    "/get/audit_2/indexing/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание гостевой ссылки на просмотр позиций
     *
     *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
    "/get/audit_2/indexing/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки индексации */
    "/get/audit_2/indexing/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Построение отчета по одному URL
     *
     *     Отличия от get/audit_2/watcher:
     *     - отчет генерируется на основе объекта watcher_results, а не urls
     *     - параметры выбора периода отчета игнорируются
     *     - выбор прверок регулируется параметрами запроса filters, limit и offset */
    "/get/audit_2/watcher/byURL/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherByURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверок радара */
    "/get/audit_2/watcher/checks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherChecks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки радара */
    "/get/audit_2/watcher/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка договора в диадок */
    "/get/bank_2/diadoc/sendContract/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2DiadocSendContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка акта сверки в диадок
     *
     *     Параметры см. в bank_2_requisites::protected_get_printTotalReceipt(); */
    "/get/bank_2/diadoc/sendTotalReceipt/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2DiadocSendTotalReceipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт лога банка */
    "/get/bank_2/history/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2HistoryExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки проведенных операций */
    "/get/bank_2/history/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2HistorySummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перевод средств с реферального счета на бонусный */
    "/edit/bank_2/referrals/toBonus/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBank2ReferralsToBonus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение id тарифа пользователя по типу контракта */
    "/get/bank_2/requisites/contractTariffId/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2RequisitesContractTariffId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Скачивание документа в формате PDF */
    "/get/bank_2/requisites/print/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2RequisitesPrint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение акта сверки (акты по предоплате выводятся в одном платеже) */
    "/get/bank_2/requisites/printTotalReceipt/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2RequisitesPrintTotalReceipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Скачивание архива документов в формате PDF */
    "/get/bank_2/requisites/printZip/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2RequisitesPrintZip"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение интерфейсов настройки всех планов подписки */
    "/get/bank_2/subscriptions/plans/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBank2SubscriptionsPlans"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение статуса объявлений */
    "/edit/broker_2/ads/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBroker2AdsStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка объявления на модерацию */
    "/edit/broker_2/ads/toModerate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBroker2AdsToModerate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Обновление данных таргетинга */
    "/edit/broker_2/campaigns/updateTargeting/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBroker2CampaignsUpdateTargeting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение групп рекламной кампании для редактора */
    "/get/broker_2/groups/editor/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBroker2GroupsEditor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение статуса запросов рекламной кампании */
    "/edit/broker_2/keywords/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditBroker2KeywordsStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспортирование архива логов */
    "/get/broker_2/log/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetBroker2LogExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Ручной запуск корректировки */
    "/add/broker_2/tasks/rateTask/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddBroker2TasksRateTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Оплатить отчет */
    "/edit/competitors_2/orders/pay/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditCompetitors2OrdersPay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение календаря апдейтов */
    "/get/content_2/apometr/calendar/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrCalendar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение истории urls, найденных в выдаче, за конкретную проверку
     * @deprecated
     * @description @deprecated Используйте Services\Content_2\Methods\Apometr\Snapshots\Top\Get
     */
    "/get/content_2/apometr/cHHistory/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrCHHistory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение истории шторма за период в 2 суток */
    "/get/content_2/apometr/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrHistory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение поисковых запросов апометра */
    "/get/content_2/apometr/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrKeywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение апдейтов */
    "/get/content_2/apometr/updates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrUpdates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статьи */
    "/get/content_2/journal/articles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalArticles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение закладок авторов */
    "/get/content_2/journal/bookmarksAuthors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalBookmarksAuthors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение закладок */
    "/get/content_2/journal/bookmarks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalBookmarks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение инофрмации о курсах
     *
     *     Параметры выборки основаны на модели Models\Pages */
    "/get/content_2/journal/course/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение рубрики */
    "/get/content_2/journal/rubrics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalRubrics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение состояния подписки на рассылку журнала */
    "/edit/content_2/journal/subscribe/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2JournalSubscribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сортировка документов */
    "/edit/content_2/pages/order/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2PagesOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение меню справки */
    "/get/content_2/support/menu/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2SupportMenu"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Регистрация токена */
    "/add/informer_2/push/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddInformer2PushToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление токена */
    "/del/informer_2/push/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelInformer2PushToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Постановка задачи на подбор запросов */
    "/edit/keywords_2/collect/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditKeywords2CollectGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение стоимости подбора запросов */
    "/get/keywords_2/collect/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2CollectPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Импорт запросов (по необходимости зависимых с ними групп и папок)
     *
     *     Доступные поля для импорта: group_folder_path|group_name|name|tags|target поля перекрывают аналогичные параметры в запросе
     * @description @see Keywords_2\Mods\Keywords\Import::fromHandle()
     */
    "/add/keywords_2/keywords/import/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddKeywords2KeywordsImport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Постановка задачи на проверку частоты запросов */
    "/edit/keywords_2/volumes/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditKeywords2VolumesGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Информация о стоимости запуска проверки позиций по проектам */
    "/get/keywords_2/volumes/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2VolumesPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправление письма с лэндинга вакансий на hr@topvisor.com */
    "/add/landings_2/hr/feedback/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddLandings2HrFeedback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка правил на проверку */
    "/edit/mentions_2/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditMentions2CheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение стоимости проверки */
    "/get/mentions_2/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetMentions2CheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение ключевых слов правила */
    "/edit/mentions_2/rules/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditMentions2RulesKeywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить имя правила */
    "/edit/mentions_2/rules/rename/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditMentions2RulesRename"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение глубины сбора упоминаний */
    "/edit/mentions_2/searchers/depth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditMentions2SearchersDepth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить активность поисковика */
    "/edit/mentions_2/searchers/enabled/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditMentions2SearchersEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Управление приостановкой/возобновлением рекуррентных платежей */
    "/edit/payments_2/recurrent/suspend/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2RecurrentSuspend"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменения подписки на следующий расчетный период
     *
     *     Изменение доступно только в рамках одной платежной системы
     *
     *     Если требуется изменить другие параметры подписки, это можно только путем остановки этой подписки и созданием новой подписки */
    "/edit/payments_2/subscriptions/next/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2SubscriptionsNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отписка от тарифа, оплаченного картой */
    "/edit/payments_2/tariff/delCard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffDelCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка оплаты тарифов: выставлять ли счета через диадок */
    "/edit/payments_2/tariff/nextToDiadoc/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffNextToDiadoc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Смена тарифа со следующего месяца */
    "/edit/payments_2/tariff/setNext/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffSetNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку позиций */
    "/edit/positions_2/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2CheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Информация о стоимости запуска проверки позиций по проектам */
    "/get/positions_2/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPositions2CheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Включение/выключение ПС */
    "/edit/positions_2/searchers/enabled/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2SearchersEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление региона */
    "/add/positions_2/searchers/regions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPositions2SearchersRegions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление региона */
    "/del/positions_2/searchers/regions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelPositions2SearchersRegions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение региона */
    "/edit/positions_2/searchers/regions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2SearchersRegions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка сортировки ПС */
    "/edit/positions_2/searchers/sort/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2SearchersSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных графика */
    "/get/projects_2/analytics/graph/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2AnalyticsGraph"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перемещение конкурента (сортировка) */
    "/edit/projects_2/competitors/move/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2CompetitorsMove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка имени конкурента */
    "/edit/projects_2/competitors/name/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2CompetitorsName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Включение/выключение конкурентов */
    "/edit/projects_2/competitors/on/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2CompetitorsOn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перемещение проектов в папку */
    "/edit/projects_2/folders/move/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2FoldersMove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Переместить папку
     *
     *     Вложенные папки запрещены, поэтому перемещение происходит только в пределах одного списка */
    "/edit/projects_2/folders/moveFolder/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2FoldersMoveFolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение имени папки */
    "/edit/projects_2/folders/name/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2FoldersName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить подсазки конкурентов для добавления в проект
     *
     *     Доступ по API закрыт */
    "/get/projects_2/master/hintsCompetitors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2MasterHintsCompetitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить подсазки запросов для добавления в проект
     *     Доступ по API закрыт */
    "/get/projects_2/master/hintsKeywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2MasterHintsKeywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Копирование проекта */
    "/add/projects_2/projects/copy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2ProjectsCopy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка избранных проектов */
    "/edit/projects_2/projects/favorite/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsFavorite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перемещение проекта (сортировка) */
    "/edit/projects_2/projects/move/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsMove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка имени проекта */
    "/edit/projects_2/projects/name/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование "on" проектов */
    "/edit/projects_2/projects/on/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsOn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение сортировки проектов */
    "/edit/projects_2/projects/sort/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование тегов проектов */
    "/edit/projects_2/projects/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsTags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование ссылки проекта */
    "/edit/projects_2/projects/url/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2ProjectsUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отмена передачи проекта */
    "/del/projects_2/rights/changeOwner/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelProjects2RightsChangeOwner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Инициализация передачи проекта другому пользователю */
    "/edit/projects_2/rights/changeOwner/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditProjects2RightsChangeOwner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о регистрации домена
     *
     *     Возвращает объект с параметрами:
     *     - wait_time, если данные не готовы
     *     - created, если данные готовы
     *     - paidtill, если данные готовы */
    "/get/projects_2/status/registrar/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2StatusRegistrar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации об SSL сертификате
     *     Возваращает объект с параметрами:
     *     - expire */
    "/get/projects_2/status/ssl/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2StatusSsl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание задачи */
    "/add/projects_2/tasks/volumes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddProjects2TasksVolumes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление нескольких ответов */
    "/add/quiz_2/questionsResponses/multi/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddQuiz2QuestionsResponsesMulti"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить список групп с пользователями */
    "/get/redmine_2/users/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetRedmine2UsersGroups"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправить тестовый отчет */
    "/edit/reports_2/positions/sendTest/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditReports2PositionsSendTest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить список email, используемых в любых расписаниях, к которым есть доступ у аккаунта */
    "/get/schedule_2/settings/emailsHints/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSchedule2SettingsEmailsHints"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных сводки конкурентов для графика */
    "/get/snapshots_2/competitors/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2CompetitorsChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт списка конкурентов */
    "/get/snapshots_2/competitors/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2CompetitorsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт истории снимков выдачи */
    "/get/snapshots_2/history/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2HistoryExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание гостевой ссылки на просмотр снимков выдачи */
    "/get/snapshots_2/history/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2HistoryLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Генерация нового API ключа */
    "/edit/system_2/api/genKey/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditSystem2ApiGenKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Вызов тестового API запроса */
    "/get/system_2/api/test/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2ApiTest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Скачивание файла из директории */
    "/get/system_2/cloud/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2CloudDownload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Переименовывание файла */
    "/edit/system_2/cloud/rename/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditSystem2CloudRename"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Фиксация события по ссылке на изображение
     *
     *     см. Analytics_2\Mods\Analytics::genEventImgLink() */
    "/add/system_2/common/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddSystem2CommonAnalytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение доступных запросы для построения отчета с кэшированием на 30 дней */
    "/get/system_2/common/competitorsQueries/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2CommonCompetitorsQueries"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Загрузка настроек OpenAPI */
    "/get/system_2/common/openAPI/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2CommonOpenAPI"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение превью страницы
     *
     *     Вернет изображение в формате image/png
     *
     *     Ссылка для теста https://topvisor.dev:17860/ajax/get.php?module=system_2&func=common_pagePreview&url={$shortUrl} */
    "/get/system_2/common/pagePreview/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2CommonPagePreview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение регионов для поисковиков с последующим кэшированием для Get запросов */
    "/get/system_2/common/regions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2CommonRegions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение снимка сайта
     *
     *     Вернет изображение в формате image/png */
    "/get/system_2/common/webScreensFree/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2CommonWebScreensFree"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение рекорда в тетрисе */
    "/edit/system_2/games/record/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditSystem2GamesRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение рекорда тетриса */
    "/get/system_2/games/record/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2GamesRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Логирование ошибки js и отправка в канал slack */
    "/add/system_2/log/error/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddSystem2LogError"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование параметра
     *
     *     Не хранить в параметрах конфиденциальную информацию */
    "/edit/system_2/properties/property/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditSystem2PropertiesProperty"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление ответа в тикете, только для админов */
    "/del/tickets_2/admin/message/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelTickets2AdminMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование текста ответа в тикете, только для админов */
    "/edit/tickets_2/admin/message/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление шаблона тикета */
    "/add/tickets_2/admin/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2AdminTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление шаблона */
    "/del/tickets_2/admin/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelTickets2AdminTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение шаблона */
    "/edit/tickets_2/admin/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение шаблона тикета */
    "/get/tickets_2/admin/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2AdminTemplates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование тикета (для админов) */
    "/edit/tickets_2/admin/ticket/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перенос последниего сообщения (до 1 сообщения автора) в новый тикет */
    "/edit/tickets_2/admin/ticketSplit/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTicketSplit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение инфомрации о пользователе */
    "/get/tickets_2/admin/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2AdminUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка userId для тикетов без userId */
    "/edit/tickets_2/admin/userId/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminUserId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирваоние комменатрий админа */
    "/edit/tickets_2/tickets/adminComment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2TicketsAdminComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение краткой информации о тикетах
     *
     *     id последнего непрочитанного тикета, число непрочитанных тикетов */
    "/get/tickets_2/tickets/info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2TicketsInfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Пометка тикета как "прочитанный" для автора тикета или админов */
    "/edit/tickets_2/tickets/setReaded/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2TicketsSetReaded"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Написание текста */
    "/edit/tickets_2/tickets/writing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2TicketsWriting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение всех источников по индексу источника */
    "/get/tpvsr_2/stat/referers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTpvsr2StatReferers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение URL к карте сайта по файлу robots.txt для указанного домена */
    "/get/urls_2/import/recognizeLinkSitemapXml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUrls2ImportRecognizeLinkSitemapXml"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Привязка email к аккаунту */
    "/add/users_2/join/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUsers2JoinEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление аватарки */
    "/del/users_2/profile/avatar/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelUsers2ProfileAvatar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение автара */
    "/edit/users_2/profile/avatar/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2ProfileAvatar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение пути на аватар пользователя от корня сайта */
    "/get/users_2/profile/avatar/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2ProfileAvatar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение валюты пользователя */
    "/edit/users_2/profile/currency/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2ProfileCurrency"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка сообщения на смену Email */
    "/edit/users_2/profile/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2ProfileEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение языка */
    "/edit/users_2/profile/lang/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2ProfileLang"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение пароля */
    "/edit/users_2/profile/pass/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2ProfilePass"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка заявки на сброс пароля (подтверждается методом Users_2\Mods::acceptEmail()) */
    "/edit/users_2/profile/retrievePass/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2ProfileRetrievePass"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение темы сайта */
    "/edit/users_2/profile/theme/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2ProfileTheme"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение временной зоны */
    "/edit/users_2/profile/timezone/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2ProfileTimezone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка достижения по промокоду */
    "/add/users_2/ranks/promocode/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUsers2RanksPromocode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение количество переходов и регистраций по реферальной ссылке (для графика) */
    "/get/users_2/referrals/chartCountsByDate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2ReferralsChartCountsByDate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Регистрация по приглашению (по реферальной программе) */
    "/add/users_2/referrals/invite/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUsers2ReferralsInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение общего числа проектов / запросов (автоматических / ручных) */
    "/get/users_2/stats/account/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2StatsAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление фильтра группы */
    "/add/admin_2/accounting/group/filter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2AccountingGroupFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление фильтра группы */
    "/del/admin_2/accounting/group/filter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2AccountingGroupFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение фильтра группы */
    "/edit/admin_2/accounting/group/filter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2AccountingGroupFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Скачивание документа */
    "/get/admin_2/accounting/invoices/file/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingInvoicesFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Скачивание реестра исходящих операций
     * @description @POST string month - месяц в формате: YYYY-mm
     *     столбцы CSV: 'Дата акта', 'Номер акта', 'Контрагент', 'ИНН', 'Товар/услуга', 'Номенклатура', 'Кол-во', 'Цена', 'НДС', 'Сумма', 'Способ оплаты'
     */
    "/get/admin_2/accounting/operations/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AccountingOperationsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Востановление поисковых запросов из бэкапа */
    "/edit/admin_2/actions/backup/keywords/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBackupKeywords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Загрузить и разместить бекап в БД бекапов */
    "/edit/admin_2/actions/backup/loader/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBackupLoader"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Востановление удаленного проекта */
    "/edit/admin_2/actions/backup/project/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBackupProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Оплата реферального счета */
    "/edit/admin_2/actions/bank/referral/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsBankReferral"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка акты в диадок */
    "/add/admin_2/actions/payments/diadoc/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2ActionsPaymentsDiadoc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Импортирование историй позиций из CSV */
    "/add/admin_2/actions/positions/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2ActionsPositionsHistory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сброс статуса проверки позиций */
    "/edit/admin_2/actions/positions/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsPositionsStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение домена проекта */
    "/edit/admin_2/actions/projects/domain/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsProjectsDomain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавить регионы Google в сервис */
    "/edit/admin_2/actions/regions/commitGoogle/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsRegionsCommitGoogle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Обновление регионов Google
     * @description @see https://developers.google.com/google-ads/api/data/geotargets
     */
    "/edit/admin_2/actions/regions/updateGoogle/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsRegionsUpdateGoogle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Перевод проверок позиций яндекс */
    "/edit/admin_2/actions/robot/checks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsRobotChecks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение приоритета задач */
    "/edit/admin_2/actions/robot/priority/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsRobotPriority"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Снятие задачи с дэбага */
    "/edit/admin_2/actions/robot/task/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsRobotTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление файлов */
    "/del/admin_2/actions/slack/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2ActionsSlackFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление сообщений */
    "/del/admin_2/actions/slack/messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAdmin2ActionsSlackMessages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение валюты пользователя */
    "/edit/admin_2/actions/user/currency/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsUserCurrency"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Замена email пользователя */
    "/edit/admin_2/actions/user/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2ActionsUserEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки по группам */
    "/get/admin_2/analytics/accounting/summaryForChart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsAccountingSummaryForChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение активности пользователей в формате для графика */
    "/get/admin_2/analytics/activity/chartByPeriod/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsActivityChartByPeriod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение конкурентов для графика */
    "/get/admin_2/analytics/competitors/summaryForOrdersChart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsCompetitorsSummaryForOrdersChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение суммы оплат по системам платежей за период */
    "/get/admin_2/analytics/payments/systems/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPaymentsSystems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение суммы оплат по тарифам за период */
    "/get/admin_2/analytics/payments/tariff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPaymentsTariff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа автоматических проверока по дням по часам */
    "/get/admin_2/analytics/positions/chartByDayByHourAuto/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPositionsChartByDayByHourAuto"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа автоматических проверок по часам */
    "/get/admin_2/analytics/positions/chartByHourAuto/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPositionsChartByHourAuto"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа проверок за месяц по часам */
    "/get/admin_2/analytics/positions/chartByHour/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPositionsChartByHour"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение числа проверок по часам по пользователям */
    "/get/admin_2/analytics/positions/chartCountUsersByHour/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsPositionsChartCountUsersByHour"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики тикетов по миграциям */
    "/get/admin_2/analytics/tickets/chartByMigrations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByMigrations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики по кол-ву пользователей, открывших первый тикет */
    "/get/admin_2/analytics/tickets/chartByNew/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByNew"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики тикетов по оценкам */
    "/get/admin_2/analytics/tickets/chartByRates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByRates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистику тикетов по тегам */
    "/get/admin_2/analytics/tickets/chartByTags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByTags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики по среднему времени ожидания ответа на вопросы в тикетах */
    "/get/admin_2/analytics/tickets/chartByWaitTime/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsChartByWaitTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики ответов на тикеты */
    "/get/admin_2/analytics/tickets/messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2AnalyticsTicketsMessages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Помечание лога как обработанного */
    "/edit/admin_2/logs/system/checked/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2LogsSystemChecked"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение графика с количеством подписок на рубрики с сегментцией по способам рассылки
     *
     *     График кешируется, первый запрос может выполняться дольше */
    "/get/admin_2/users/informer/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersInformerSubscriptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Запуск проверки аудита */
    "/edit/audit_2/audit/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2AuditCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Информация о стоимости запуска аудита по проектам */
    "/get/audit_2/audit/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение гостевой ссылки на просмотр аудита позиций */
    "/get/audit_2/audit/export/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditExportLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт отчета Анализа сайта */
    "/get/audit_2/audit/export/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditExportSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о текущей ошибке на роботе */
    "/get/audit_2/audit/log/actualError/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLogActualError"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение данных для графика
     * @deprecated
     * @description @deprecated
     */
    "/get/audit_2/audit/log/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLogChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Экспорт результатов аудита
     * @deprecated
     * @description @deprecated
     */
    "/get/audit_2/audit/results/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditResultsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение результатов анализа страницы
     * @deprecated
     * @description @deprecated
     */
    "/get/audit_2/audit/results/page/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditResultsPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку индексации */
    "/edit/audit_2/indexing/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2IndexingCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Информация о стоимости запуска индексации по проектам */
    "/get/audit_2/indexing/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение гостевой ссылки на просмотр индексации
     *
     *     Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя) */
    "/get/audit_2/indexing/export/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingExportLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт файла в хранилище */
    "/get/audit_2/indexing/export/toRepository/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingExportToRepository"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводок индексации для графика */
    "/get/audit_2/indexing/summary/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingSummaryChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку карты сайта */
    "/edit/audit_2/sitemap/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2SitemapCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Информация о стоимости запуска индексации по проектам */
    "/get/audit_2/sitemap/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2SitemapCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку радара */
    "/edit/audit_2/watcher/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2WatcherCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Информация о стоимости запуска индексации по проектам */
    "/get/audit_2/watcher/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание гостевой ссылки на просмотр радара */
    "/get/audit_2/watcher/export/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherExportLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводок радара для графика */
    "/get/audit_2/watcher/summary/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherSummaryChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение топа выдачи сайтов за определенную проверку */
    "/get/content_2/apometr/snapshots/top/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrSnapshotsTop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение календаря текстовых апдейтов */
    "/get/content_2/apometr/text/calendar/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrTextCalendar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение текстовых апдейтов */
    "/get/content_2/apometr/text/updates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrTextUpdates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение дат апдейтов */
    "/get/content_2/apometr/updates/dates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2ApometrUpdatesDates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание сертификата
     *
     *     Можно создавать только для пройденных курсов */
    "/add/content_2/journal/course/certificates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddContent2JournalCourseCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение сертификата
     *
     *     Можно менять только имя, если оно не указано */
    "/edit/content_2/journal/course/certificates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2JournalCourseCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение своего сертификата */
    "/get/content_2/journal/course/certificates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourseCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение модулей курса
     *
     *     Дополнительные поля:
     *      - lessons - см. includeLessons() */
    "/get/content_2/journal/course/chapters/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourseChapters"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка страниц по буквам для модуля SEO словарь
     *     Результат функции кешируется */
    "/get/content_2/journal/dictionary/articlesByLetter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalDictionaryArticlesByLetter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение стаьи для "Слово дня" в модуле SEO словарь */
    "/get/content_2/journal/dictionary/wordOfday/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalDictionaryWordOfday"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Постановка задачи на расширение группы */
    "/edit/keywords_2/collect/ext/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditKeywords2CollectExtGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение цены на расширение группы */
    "/get/keywords_2/collect/ext/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetKeywords2CollectExtPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт регионов (CSV)
     *
     *     - searcher_key, name_or_key (название или код)[, country_code (2 буквенный код страны), lang, device, depth] */
    "/get/positions_2/searchers/regions/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPositions2SearchersRegionsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Импорт регионов (CSV) */
    "/add/positions_2/searchers/regions/import/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPositions2SearchersRegionsImport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка сортировки регионов */
    "/edit/positions_2/searchers/regions/sort/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPositions2SearchersRegionsSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверки частоты задачи без проекта */
    "/get/projects_2/tasks/volumes/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2TasksVolumesPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статуса проверки частоты задачи */
    "/get/projects_2/tasks/volumes/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProjects2TasksVolumesStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт сводки с графика
     *
     *     Описание параметров смотреть в get/snapshots_2/competitors */
    "/get/snapshots_2/competitors/chart/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2CompetitorsChartExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт в хранилище
     *
     *     Производит редирект на файл в кранилище */
    "/get/snapshots_2/competitors/export/toRepository/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2CompetitorsExportToRepository"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт в хранилище
     *
     *     Производит редирект на файл в кранилище */
    "/get/snapshots_2/history/export/toRepository/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSnapshots2HistoryExportToRepository"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение сортировки шаблонов */
    "/edit/tickets_2/admin/templates/sort/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTemplatesSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение админской ссылки к тикетам. Только для админов */
    "/edit/tickets_2/admin/ticket/resourceAdmin/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTicketResourceAdmin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Поучение гостевой ссылки */
    "/get/tpvsr_2/stat/export/guestLinks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTpvsr2StatExportGuestLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка источников */
    "/get/tpvsr_2/stat/export/referrers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTpvsr2StatExportReferrers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление логотипа компании */
    "/del/users_2/profile/brand/logo/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelUsers2ProfileBrandLogo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение логотипа бренда */
    "/edit/users_2/profile/brand/logo/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUsers2ProfileBrandLogo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Установка ранга Twitter */
    "/add/users_2/ranks/promocode/twitter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUsers2RanksPromocodeTwitter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка месяцев */
    "/get/users_2/stats/account/listMonth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2StatsAccountListMonth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка проектов для статистики аккаунта */
    "/get/users_2/stats/account/listProjects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2StatsAccountListProjects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка используемых ПС в проекте */
    "/get/users_2/stats/account/listPs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2StatsAccountListPs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение статистики по ПС */
    "/get/users_2/stats/account/ps/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUsers2StatsAccountPs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Копирование истории позиций */
    "/add/admin_2/actions/positions/history/copy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2ActionsPositionsHistoryCopy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сертификата по id */
    "/get/content_2/journal/course/certificates/byID/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourseCertificatesByID"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сертификата в виде изображения */
    "/get/content_2/journal/course/certificates/image/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2JournalCourseCertificatesImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение токена авторизации для работы с safari web push
     *
     *     Создаст токен, если его не существует */
    "/get/informer_2/push/safari/webService/authToken/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetInformer2PushSafariWebServiceAuthToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Генерация тестового файла
     *
     *     Вернет случайный набор символов в формате application/json; charset=utf-8
     *
     *     URL для теста: https://topvisor.com/ajax/get.php?module=system_2&func=common_tests_speed_file&size=$size&token=$token */
    "/get/system_2/common/tests/speed/file/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSystem2CommonTestsSpeedFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AddAnalytics2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Analytics_2/Methods/Add.ts').components['schemas']['Analytics_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Analytics_2/Methods/Add.ts').components['schemas']['Analytics_2.Methods.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/Add.ts').components['schemas']['Annotations_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Annotations_2/Methods/Add.ts').components['schemas']['Annotations_2.Methods.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/Del.ts').components['schemas']['Annotations_2.Methods.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Annotations_2/Methods/Del.ts').components['schemas']['Annotations_2.Methods.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/Edit.ts').components['schemas']['Annotations_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Annotations_2/Methods/Edit.ts').components['schemas']['Annotations_2.Methods.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/Get.ts').components['schemas']['Annotations_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Annotations_2/Methods/Get.ts').components['schemas']['Annotations_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Annotations.ts').components['schemas']['Models.Annotations'];
                };
            };
        };
    };
    GetApp2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./App_2/Methods/Get.ts').components['schemas']['App_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Add.ts').components['schemas']['Comments_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Comments_2/Methods/Add.ts').components['schemas']['Comments_2.Methods.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Del.ts').components['schemas']['Comments_2.Methods.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Comments_2/Methods/Del.ts').components['schemas']['Comments_2.Methods.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Edit.ts').components['schemas']['Comments_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Comments_2/Methods/Edit.ts').components['schemas']['Comments_2.Methods.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Get.ts').components['schemas']['Comments_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Comments_2/Methods/Get.ts').components['schemas']['Comments_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Comments.ts').components['schemas']['Models.Comments'];
                };
            };
        };
    };
    GetContent2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Get.ts').components['schemas']['Content_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Get.ts').components['schemas']['Content_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetMentions2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Get.ts').components['schemas']['Mentions_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Get.ts').components['schemas']['Mentions_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Mentions.ts').components['schemas']['Models.Mentions.Mentions'];
                };
            };
        };
    };
    AddPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Add.ts').components['schemas']['Payments_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/Add.ts').components['schemas']['Payments_2.Methods.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Get.ts').components['schemas']['Payments_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/Get.ts').components['schemas']['Payments_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Payments.ts').components['schemas']['Models.Payments'];
                };
            };
        };
    };
    GetQr2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Qr_2/Methods/Get.ts').components['schemas']['Qr_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Qr_2/Methods/Get.ts').components['schemas']['Qr_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddQuiz2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Add.ts').components['schemas']['Quiz_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Add.ts').components['schemas']['Quiz_2.Methods.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditQuiz2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Edit.ts').components['schemas']['Quiz_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Edit.ts').components['schemas']['Quiz_2.Methods.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetQuiz2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Get.ts').components['schemas']['Quiz_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Get.ts').components['schemas']['Quiz_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Quizes.ts').components['schemas']['Models.Quizes'];
                };
            };
        };
    };
    EditRecurring2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Recurring_2/Methods/Edit.ts').components['schemas']['Recurring_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Recurring_2/Methods/Edit.ts').components['schemas']['Recurring_2.Methods.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AbstractregularSchedule2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Schedule_2/Methods/AbstractRegular.ts').components['schemas']['Schedule_2.Methods.AbstractRegular'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Schedule_2/Methods/AbstractRegular.ts').components['schemas']['Schedule_2.Methods.AbstractRegular.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelSchedule2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Schedule_2/Methods/Del.ts').components['schemas']['Schedule_2.Methods.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Schedule_2/Methods/Del.ts').components['schemas']['Schedule_2.Methods.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditSchedule2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Schedule_2/Methods/Edit.ts').components['schemas']['Schedule_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Schedule_2/Methods/Edit.ts').components['schemas']['Schedule_2.Methods.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSchedule2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Schedule_2/Methods/Get.ts').components['schemas']['Schedule_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Schedule_2/Methods/Get.ts').components['schemas']['Schedule_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTags2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tags_2/Methods/Edit.ts').components['schemas']['Tags_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tags_2/Methods/Edit.ts').components['schemas']['Tags_2.Methods.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTags2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tags_2/Methods/Get.ts').components['schemas']['Tags_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tags_2/Methods/Get.ts').components['schemas']['Tags_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddTemplates2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Templates_2/Methods/Add.ts').components['schemas']['Templates_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Templates_2/Methods/Add.ts').components['schemas']['Templates_2.Methods.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelTemplates2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Templates_2/Methods/Del.ts').components['schemas']['Templates_2.Methods.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Templates_2/Methods/Del.ts').components['schemas']['Templates_2.Methods.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTemplates2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Templates_2/Methods/Edit.ts').components['schemas']['Templates_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Templates_2/Methods/Edit.ts').components['schemas']['Templates_2.Methods.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTemplates2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Templates_2/Methods/Get.ts').components['schemas']['Templates_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Templates_2/Methods/Get.ts').components['schemas']['Templates_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddTpvsr2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tpvsr_2/Methods/Add.ts').components['schemas']['Tpvsr_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tpvsr_2/Methods/Add.ts').components['schemas']['Tpvsr_2.Methods.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTpvsr2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tpvsr_2/Methods/Edit.ts').components['schemas']['Tpvsr_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tpvsr_2/Methods/Edit.ts').components['schemas']['Tpvsr_2.Methods.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/ShortLink.ts').components['schemas']['Models.ShortLink'];
                };
            };
        };
    };
    GetTpvsr2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tpvsr_2/Methods/Get.ts').components['schemas']['Tpvsr_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tpvsr_2/Methods/Get.ts').components['schemas']['Tpvsr_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/ShortLink.ts').components['schemas']['Models.ShortLink'];
                };
            };
        };
    };
    AddUrls2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Urls_2/Methods/Add.ts').components['schemas']['Urls_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Urls_2/Methods/Add.ts').components['schemas']['Urls_2.Methods.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Urls.ts').components['schemas']['Models.Urls'];
                };
            };
        };
    };
    EditUrls2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Urls_2/Methods/Edit.ts').components['schemas']['Urls_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Urls_2/Methods/Edit.ts').components['schemas']['Urls_2.Methods.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Urls.ts').components['schemas']['Models.Urls'];
                };
            };
        };
    };
    GetUrls2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Urls_2/Methods/Get.ts').components['schemas']['Urls_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Urls_2/Methods/Get.ts').components['schemas']['Urls_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Urls.ts').components['schemas']['Models.Urls'];
                };
            };
        };
    };
    GetUsers2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Get.ts').components['schemas']['Users_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Get.ts').components['schemas']['Users_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddVotes2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Votes_2/Methods/Add.ts').components['schemas']['Votes_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Votes_2/Methods/Add.ts').components['schemas']['Votes_2.Methods.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Votes.ts').components['schemas']['Models.Votes'];
                };
            };
        };
    };
    GetVotes2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Votes_2/Methods/Get.ts').components['schemas']['Votes_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Votes_2/Methods/Get.ts').components['schemas']['Votes_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Votes.ts').components['schemas']['Models.Votes'];
                };
            };
        };
    };
    GetWebscreens2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Webscreens_2/Methods/Get.ts').components['schemas']['Webscreens_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AbstractregularAdmin2Actions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/AbstractRegular.ts').components['schemas']['Admin_2.Methods.Actions.AbstractRegular'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/AbstractRegular.ts').components['schemas']['Admin_2.Methods.Actions.AbstractRegular.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Ghost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Ghost/Get.ts').components['schemas']['Admin_2.Methods.Ghost.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAdmin2I18n: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/I18n/Get.ts').components['schemas']['Admin_2.Methods.I18n.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/I18n/Get.ts').components['schemas']['Admin_2.Methods.I18n.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAdmin2Informer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Informer/Add.ts').components['schemas']['Admin_2.Methods.Informer.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Informer/Add.ts').components['schemas']['Admin_2.Methods.Informer.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2Logs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Logs/Edit.ts').components['schemas']['Admin_2.Methods.Logs.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Logs/Edit.ts').components['schemas']['Admin_2.Methods.Logs.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Logs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Logs/Get.ts').components['schemas']['Admin_2.Methods.Logs.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Logs/Get.ts').components['schemas']['Admin_2.Methods.Logs.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Ranks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Ranks/Get.ts').components['schemas']['Admin_2.Methods.Ranks.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Ranks/Get.ts').components['schemas']['Admin_2.Methods.Ranks.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Analytics/Ranks.ts').components['schemas']['Models.Analytics.Ranks'];
                };
            };
        };
    };
    AddAdmin2Staff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/Add.ts').components['schemas']['Admin_2.Methods.Staff.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Staff/Add.ts').components['schemas']['Admin_2.Methods.Staff.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2Staff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/Edit.ts').components['schemas']['Admin_2.Methods.Staff.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Staff/Edit.ts').components['schemas']['Admin_2.Methods.Staff.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Staff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/Get.ts').components['schemas']['Admin_2.Methods.Staff.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Staff/Get.ts').components['schemas']['Admin_2.Methods.Staff.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Staff.ts').components['schemas']['Models.Admin.Staff'];
                };
            };
        };
    };
    EditAdmin2TariffChangeExpire: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/TariffChangeExpire/Edit.ts').components['schemas']['Admin_2.Methods.TariffChangeExpire.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/TariffChangeExpire/Edit.ts').components['schemas']['Admin_2.Methods.TariffChangeExpire.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2Tpl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Tpl/Get.ts').components['schemas']['Admin_2.Methods.Tpl.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Tpl/Get.ts').components['schemas']['Admin_2.Methods.Tpl.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2Users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Edit.ts').components['schemas']['Admin_2.Methods.Users.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Users/Edit.ts').components['schemas']['Admin_2.Methods.Users.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Users.ts').components['schemas']['Models.Admin.Users'];
                };
            };
        };
    };
    GetAdmin2Users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Get.ts').components['schemas']['Admin_2.Methods.Users.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Users/Get.ts').components['schemas']['Admin_2.Methods.Users.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Users.ts').components['schemas']['Models.Admin.Users'];
                };
            };
        };
    };
    GetAdmin2Votes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Votes/Get.ts').components['schemas']['Admin_2.Methods.Votes.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Votes/Get.ts').components['schemas']['Admin_2.Methods.Votes.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Votes.ts').components['schemas']['Models.Votes'];
                };
            };
        };
    };
    GetAnnotations2My: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/My/Get.ts').components['schemas']['Annotations_2.Methods.My.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Annotations_2/Methods/My/Get.ts').components['schemas']['Annotations_2.Methods.My.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Annotations.ts').components['schemas']['Models.Annotations'];
                };
            };
        };
    };
    GetApp2Actions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./App_2/Methods/Actions/Get.ts').components['schemas']['App_2.Methods.Actions.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./App_2/Methods/Actions/Get.ts').components['schemas']['App_2.Methods.Actions.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetApp2Privacy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./App_2/Methods/Privacy/Get.ts').components['schemas']['App_2.Methods.Privacy.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./App_2/Methods/Privacy/Get.ts').components['schemas']['App_2.Methods.Privacy.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2CountUrls: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/CountUrls/Get.ts').components['schemas']['Audit_2.Methods.CountUrls.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/CountUrls/Get.ts').components['schemas']['Audit_2.Methods.CountUrls.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2Indexing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Indexing/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Indexing/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Urls.ts').components['schemas']['Models.Urls'];
                };
            };
        };
    };
    EditAudit2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Settings/Edit.ts').components['schemas']['Audit_2.Methods.Settings.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Settings/Edit.ts').components['schemas']['Audit_2.Methods.Settings.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Settings/Get.ts').components['schemas']['Audit_2.Methods.Settings.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Settings/Get.ts').components['schemas']['Audit_2.Methods.Settings.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2Watcher: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Watcher/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Watcher/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBank2Bank: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Bank/Get.ts').components['schemas']['Bank_2.Methods.Bank.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Bank/Get.ts').components['schemas']['Bank_2.Methods.Bank.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBank2History: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/History/Get.ts').components['schemas']['Bank_2.Methods.History.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/History/Get.ts').components['schemas']['Bank_2.Methods.History.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/BalanceHistory.ts').components['schemas']['Models.BalanceHistory'];
                };
            };
        };
    };
    GetBank2Info: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Info/Get.ts').components['schemas']['Bank_2.Methods.Info.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Info/Get.ts').components['schemas']['Bank_2.Methods.Info.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddBank2Requisites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Requisites/Add.ts').components['schemas']['Bank_2.Methods.Requisites.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Requisites/Add.ts').components['schemas']['Bank_2.Methods.Requisites.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelBank2Requisites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Requisites/Del.ts').components['schemas']['Bank_2.Methods.Requisites.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Requisites/Del.ts').components['schemas']['Bank_2.Methods.Requisites.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditBank2Requisites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Requisites/Edit.ts').components['schemas']['Bank_2.Methods.Requisites.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Requisites/Edit.ts').components['schemas']['Bank_2.Methods.Requisites.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBank2Requisites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Requisites/Get.ts').components['schemas']['Bank_2.Methods.Requisites.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Requisites/Get.ts').components['schemas']['Bank_2.Methods.Requisites.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Requisites.ts').components['schemas']['Models.Requisites'];
                };
            };
        };
    };
    GetBank2Ur: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Ur/Get.ts').components['schemas']['Bank_2.Methods.Ur.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Ur/Get.ts').components['schemas']['Bank_2.Methods.Ur.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditBroker2Ads: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Ads/Edit.ts').components['schemas']['Broker_2.Methods.Ads.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Ads/Edit.ts').components['schemas']['Broker_2.Methods.Ads.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBroker2Ads: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Ads/Get.ts').components['schemas']['Broker_2.Methods.Ads.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Ads/Get.ts').components['schemas']['Broker_2.Methods.Ads.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Ads.ts').components['schemas']['Models.Broker.Ads'];
                };
            };
        };
    };
    AddBroker2Campaigns: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Campaigns/Add.ts').components['schemas']['Broker_2.Methods.Campaigns.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Campaigns/Add.ts').components['schemas']['Broker_2.Methods.Campaigns.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Campaigns.ts').components['schemas']['Models.Broker.Campaigns'];
                };
            };
        };
    };
    DelBroker2Campaigns: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Campaigns/Del.ts').components['schemas']['Broker_2.Methods.Campaigns.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Campaigns/Del.ts').components['schemas']['Broker_2.Methods.Campaigns.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Campaigns.ts').components['schemas']['Models.Broker.Campaigns'];
                };
            };
        };
    };
    EditBroker2Campaigns: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Campaigns/Edit.ts').components['schemas']['Broker_2.Methods.Campaigns.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Campaigns/Edit.ts').components['schemas']['Broker_2.Methods.Campaigns.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Campaigns.ts').components['schemas']['Models.Broker.Campaigns'];
                };
            };
        };
    };
    GetBroker2Campaigns: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Campaigns/Get.ts').components['schemas']['Broker_2.Methods.Campaigns.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Campaigns/Get.ts').components['schemas']['Broker_2.Methods.Campaigns.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Campaigns.ts').components['schemas']['Models.Broker.Campaigns'];
                };
            };
        };
    };
    AddBroker2Groups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Groups/Add.ts').components['schemas']['Broker_2.Methods.Groups.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Groups/Add.ts').components['schemas']['Broker_2.Methods.Groups.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBroker2Groups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Groups/Get.ts').components['schemas']['Broker_2.Methods.Groups.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Groups/Get.ts').components['schemas']['Broker_2.Methods.Groups.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Groups.ts').components['schemas']['Models.Broker.Groups'];
                };
            };
        };
    };
    DelBroker2Keywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Keywords/Del.ts').components['schemas']['Broker_2.Methods.Keywords.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Keywords/Del.ts').components['schemas']['Broker_2.Methods.Keywords.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditBroker2Keywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Keywords/Edit.ts').components['schemas']['Broker_2.Methods.Keywords.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Keywords/Edit.ts').components['schemas']['Broker_2.Methods.Keywords.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Keywords.ts').components['schemas']['Models.Broker.Keywords'];
                };
            };
        };
    };
    GetBroker2Keywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Keywords/Get.ts').components['schemas']['Broker_2.Methods.Keywords.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Keywords/Get.ts').components['schemas']['Broker_2.Methods.Keywords.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Keywords.ts').components['schemas']['Models.Broker.Keywords'];
                };
            };
        };
    };
    GetBroker2Log: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Log/Get.ts').components['schemas']['Broker_2.Methods.Log.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Log/Get.ts').components['schemas']['Broker_2.Methods.Log.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Log.ts').components['schemas']['Models.Broker.Log'];
                };
            };
        };
    };
    GetComments2ByAuthor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/ByAuthor/Get.ts').components['schemas']['Comments_2.Methods.ByAuthor.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Comments_2/Methods/ByAuthor/Get.ts').components['schemas']['Comments_2.Methods.ByAuthor.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Comments.ts').components['schemas']['Models.Comments'];
                };
            };
        };
    };
    EditComments2Like: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Like/Edit.ts').components['schemas']['Comments_2.Methods.Like.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Comments_2/Methods/Like/Edit.ts').components['schemas']['Comments_2.Methods.Like.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditContent2Authors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Authors/Edit.ts').components['schemas']['Content_2.Methods.Authors.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Authors/Edit.ts').components['schemas']['Content_2.Methods.Authors.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2Authors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Authors/Get.ts').components['schemas']['Content_2.Methods.Authors.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Authors/Get.ts').components['schemas']['Content_2.Methods.Authors.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Content/Authors.ts').components['schemas']['Models.Content.Authors'];
                };
            };
        };
    };
    EditContent2BookmarkAuthor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/BookmarkAuthor/Edit.ts').components['schemas']['Content_2.Methods.BookmarkAuthor.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/BookmarkAuthor/Edit.ts').components['schemas']['Content_2.Methods.BookmarkAuthor.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditContent2Bookmark: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Bookmark/Edit.ts').components['schemas']['Content_2.Methods.Bookmark.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Bookmark/Edit.ts').components['schemas']['Content_2.Methods.Bookmark.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditContent2Like: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Like/Edit.ts').components['schemas']['Content_2.Methods.Like.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Like/Edit.ts').components['schemas']['Content_2.Methods.Like.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AbstracteditpageContent2Pages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Pages/AbstractEditPage.ts').components['schemas']['Content_2.Methods.Pages.AbstractEditPage'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Pages/AbstractEditPage.ts').components['schemas']['Content_2.Methods.Pages.AbstractEditPage.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    AddContent2Pages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Pages/Add.ts').components['schemas']['Content_2.Methods.Pages.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Pages/Add.ts').components['schemas']['Content_2.Methods.Pages.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    DelContent2Pages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Pages/Del.ts').components['schemas']['Content_2.Methods.Pages.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Pages/Del.ts').components['schemas']['Content_2.Methods.Pages.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    EditContent2Pages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Pages/Edit.ts').components['schemas']['Content_2.Methods.Pages.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Pages/Edit.ts').components['schemas']['Content_2.Methods.Pages.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    GetContent2Pages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Pages/Get.ts').components['schemas']['Content_2.Methods.Pages.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Pages/Get.ts').components['schemas']['Content_2.Methods.Pages.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    AbstractregularContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Redirects/AbstractRegular.ts').components['schemas']['Content_2.Methods.Redirects.AbstractRegular'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Redirects/AbstractRegular.ts').components['schemas']['Content_2.Methods.Redirects.AbstractRegular.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Redirects/Add.ts').components['schemas']['Content_2.Methods.Redirects.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Redirects/Add.ts').components['schemas']['Content_2.Methods.Redirects.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Redirects/Del.ts').components['schemas']['Content_2.Methods.Redirects.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Redirects/Del.ts').components['schemas']['Content_2.Methods.Redirects.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Redirects/Edit.ts').components['schemas']['Content_2.Methods.Redirects.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Redirects/Edit.ts').components['schemas']['Content_2.Methods.Redirects.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2Redirects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Redirects/Get.ts').components['schemas']['Content_2.Methods.Redirects.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Redirects/Get.ts').components['schemas']['Content_2.Methods.Redirects.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/ContentsRedirects.ts').components['schemas']['Models.ContentsRedirects'];
                };
            };
        };
    };
    GetContent2Rss: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Rss/Get.ts').components['schemas']['Content_2.Methods.Rss.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Rss/Get.ts').components['schemas']['Content_2.Methods.Rss.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    GetContent2Search: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Search/Get.ts').components['schemas']['Content_2.Methods.Search.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Search/Get.ts').components['schemas']['Content_2.Methods.Search.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2Sitemap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Sitemap/Get.ts').components['schemas']['Content_2.Methods.Sitemap.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Sitemap/Get.ts').components['schemas']['Content_2.Methods.Sitemap.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    GetContent2Tags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Tags/Get.ts').components['schemas']['Content_2.Methods.Tags.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Tags/Get.ts').components['schemas']['Content_2.Methods.Tags.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Cron_2/Methods/Commands/Add.ts').components['schemas']['Cron_2.Methods.Commands.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Cron_2/Methods/Commands/Add.ts').components['schemas']['Cron_2.Methods.Commands.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/CronCommands.ts').components['schemas']['Models.CronCommands'];
                };
            };
        };
    };
    DelCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Cron_2/Methods/Commands/Del.ts').components['schemas']['Cron_2.Methods.Commands.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Cron_2/Methods/Commands/Del.ts').components['schemas']['Cron_2.Methods.Commands.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/CronCommands.ts').components['schemas']['Models.CronCommands'];
                };
            };
        };
    };
    EditCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Cron_2/Methods/Commands/Edit.ts').components['schemas']['Cron_2.Methods.Commands.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Cron_2/Methods/Commands/Edit.ts').components['schemas']['Cron_2.Methods.Commands.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/CronCommands.ts').components['schemas']['Models.CronCommands'];
                };
            };
        };
    };
    GetCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Cron_2/Methods/Commands/Get.ts').components['schemas']['Cron_2.Methods.Commands.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Cron_2/Methods/Commands/Get.ts').components['schemas']['Cron_2.Methods.Commands.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/CronCommands.ts').components['schemas']['Models.CronCommands'];
                };
            };
        };
    };
    GetCron2Services: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Cron_2/Methods/Get.ts').components['schemas']['Cron_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Cron_2/Methods/Get.ts').components['schemas']['Cron_2.Methods.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/CronCommands.ts').components['schemas']['Models.CronCommands'];
                };
            };
        };
    };
    GetExample2Array: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Array/Get.ts').components['schemas']['Example_2.Methods.Array.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Example_2/Methods/Array/Get.ts').components['schemas']['Example_2.Methods.Array.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetExample2Custom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Custom/Get.ts').components['schemas']['Example_2.Methods.Custom.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Example_2/Methods/Custom/Get.ts').components['schemas']['Example_2.Methods.Custom.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetExample2Enum: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Enum/Get.ts').components['schemas']['Example_2.Methods.Enum.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Example_2/Methods/Enum/Get.ts').components['schemas']['Example_2.Methods.Enum.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetExample2Object: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Object/Get.ts').components['schemas']['Example_2.Methods.Object.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Example_2/Methods/Object/Get.ts').components['schemas']['Example_2.Methods.Object.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetExample2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Projects/Get.ts').components['schemas']['Example_2.Methods.Projects.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Example_2/Methods/Projects/Get.ts').components['schemas']['Example_2.Methods.Projects.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    EditInformer2Config: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Informer_2/Methods/Config/Edit.ts').components['schemas']['Informer_2.Methods.Config.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Informer_2/Methods/Config/Edit.ts').components['schemas']['Informer_2.Methods.Config.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetInformer2Config: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Informer_2/Methods/Config/Get.ts').components['schemas']['Informer_2.Methods.Config.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Informer_2/Methods/Config/Get.ts').components['schemas']['Informer_2.Methods.Config.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetInformer2Info: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Informer_2/Methods/Info/Get.ts').components['schemas']['Informer_2.Methods.Info.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Informer_2/Methods/Info/Get.ts').components['schemas']['Informer_2.Methods.Info.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelInformer2Informer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Informer_2/Methods/Informer/Del.ts').components['schemas']['Informer_2.Methods.Informer.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Informer_2/Methods/Informer/Del.ts').components['schemas']['Informer_2.Methods.Informer.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetInformer2Informer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Informer_2/Methods/Informer/Get.ts').components['schemas']['Informer_2.Methods.Informer.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Informer_2/Methods/Informer/Get.ts').components['schemas']['Informer_2.Methods.Informer.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetKeywords2Keywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Keywords_2/Methods/Keywords/Get.ts').components['schemas']['Keywords_2.Methods.Keywords.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Keywords_2/Methods/Keywords/Get.ts').components['schemas']['Keywords_2.Methods.Keywords.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Keywords.ts').components['schemas']['Models.Keywords'];
                };
            };
        };
    };
    GetKeywords2Volumes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Keywords_2/Methods/Volumes/Get.ts').components['schemas']['Keywords_2.Methods.Volumes.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Keywords_2/Methods/Volumes/Get.ts').components['schemas']['Keywords_2.Methods.Volumes.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Groups.ts').components['schemas']['Models.Groups'];
                };
            };
        };
    };
    EditMentions2Readed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Readed/Edit.ts').components['schemas']['Mentions_2.Methods.Readed.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Readed/Edit.ts').components['schemas']['Mentions_2.Methods.Readed.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Mentions.ts').components['schemas']['Models.Mentions.Mentions'];
                };
            };
        };
    };
    AddMentions2Rules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Rules/Add.ts').components['schemas']['Mentions_2.Methods.Rules.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Rules/Add.ts').components['schemas']['Mentions_2.Methods.Rules.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelMentions2Rules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Rules/Del.ts').components['schemas']['Mentions_2.Methods.Rules.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Rules/Del.ts').components['schemas']['Mentions_2.Methods.Rules.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Rules.ts').components['schemas']['Models.Mentions.Rules'];
                };
            };
        };
    };
    GetMentions2Rules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Rules/Get.ts').components['schemas']['Mentions_2.Methods.Rules.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Rules/Get.ts').components['schemas']['Mentions_2.Methods.Rules.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Rules.ts').components['schemas']['Models.Mentions.Rules'];
                };
            };
        };
    };
    AddMentions2Searchers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Searchers/Add.ts').components['schemas']['Mentions_2.Methods.Searchers.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Searchers/Add.ts').components['schemas']['Mentions_2.Methods.Searchers.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelMentions2Searchers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Searchers/Del.ts').components['schemas']['Mentions_2.Methods.Searchers.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Searchers/Del.ts').components['schemas']['Mentions_2.Methods.Searchers.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Searchers.ts').components['schemas']['Models.Mentions.Searchers'];
                };
            };
        };
    };
    GetMentions2Searchers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Searchers/Get.ts').components['schemas']['Mentions_2.Methods.Searchers.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Searchers/Get.ts').components['schemas']['Mentions_2.Methods.Searchers.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Searchers.ts').components['schemas']['Models.Mentions.Searchers'];
                };
            };
        };
    };
    EditMentions2Sentiment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Sentiment/Edit.ts').components['schemas']['Mentions_2.Methods.Sentiment.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Sentiment/Edit.ts').components['schemas']['Mentions_2.Methods.Sentiment.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Mentions.ts').components['schemas']['Models.Mentions.Mentions'];
                };
            };
        };
    };
    GetOpenapi2Download: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./OpenAPI_2/Methods/Download/Get.ts').components['schemas']['OpenAPI_2.Methods.Download.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetPayments2Companies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Companies/Get.ts').components['schemas']['Payments_2.Methods.Companies.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/Companies/Get.ts').components['schemas']['Payments_2.Methods.Companies.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2ContractSign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/ContractSign/Edit.ts').components['schemas']['Payments_2.Methods.ContractSign.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/ContractSign/Edit.ts').components['schemas']['Payments_2.Methods.ContractSign.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2NextRequisitesId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/NextRequisitesId/Edit.ts').components['schemas']['Payments_2.Methods.NextRequisitesId.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/NextRequisitesId/Edit.ts').components['schemas']['Payments_2.Methods.NextRequisitesId.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2Subscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Subscriptions/Edit.ts').components['schemas']['Payments_2.Methods.Subscriptions.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/Subscriptions/Edit.ts').components['schemas']['Payments_2.Methods.Subscriptions.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddPayments2UrTinkoffCreateApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/UrTinkoffCreateApplication/Add.ts').components['schemas']['Payments_2.Methods.UrTinkoffCreateApplication.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/UrTinkoffCreateApplication/Add.ts').components['schemas']['Payments_2.Methods.UrTinkoffCreateApplication.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetPayments2ValidateMerchantCardAP: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/ValidateMerchantCardAP/Get.ts').components['schemas']['Payments_2.Methods.ValidateMerchantCardAP.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/ValidateMerchantCardAP/Get.ts').components['schemas']['Payments_2.Methods.ValidateMerchantCardAP.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddPositions2Searchers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Add.ts').components['schemas']['Positions_2.Methods.Searchers.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Searchers/Add.ts').components['schemas']['Positions_2.Methods.Searchers.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelPositions2Searchers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Del.ts').components['schemas']['Positions_2.Methods.Searchers.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Searchers/Del.ts').components['schemas']['Positions_2.Methods.Searchers.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPositions2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Settings/Edit.ts').components['schemas']['Positions_2.Methods.Settings.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Settings/Edit.ts').components['schemas']['Positions_2.Methods.Settings.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddProjects2Analytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Analytics/Add.ts').components['schemas']['Projects_2.Methods.Analytics.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Analytics/Add.ts').components['schemas']['Projects_2.Methods.Analytics.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelProjects2Analytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Analytics/Del.ts').components['schemas']['Projects_2.Methods.Analytics.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Analytics/Del.ts').components['schemas']['Projects_2.Methods.Analytics.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2Analytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Analytics/Edit.ts').components['schemas']['Projects_2.Methods.Analytics.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Analytics/Edit.ts').components['schemas']['Projects_2.Methods.Analytics.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2Analytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Analytics/Get.ts').components['schemas']['Projects_2.Methods.Analytics.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Analytics/Get.ts').components['schemas']['Projects_2.Methods.Analytics.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddProjects2Competitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Competitors/Add.ts').components['schemas']['Projects_2.Methods.Competitors.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Competitors/Add.ts').components['schemas']['Projects_2.Methods.Competitors.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelProjects2Competitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Competitors/Del.ts').components['schemas']['Projects_2.Methods.Competitors.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Competitors/Del.ts').components['schemas']['Projects_2.Methods.Competitors.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2Competitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Competitors/Get.ts').components['schemas']['Projects_2.Methods.Competitors.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Competitors/Get.ts').components['schemas']['Projects_2.Methods.Competitors.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddProjects2Folders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Folders/Add.ts').components['schemas']['Projects_2.Methods.Folders.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Folders/Add.ts').components['schemas']['Projects_2.Methods.Folders.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelProjects2Folders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Folders/Del.ts').components['schemas']['Projects_2.Methods.Folders.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Folders/Del.ts').components['schemas']['Projects_2.Methods.Folders.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects/Folders.ts').components['schemas']['Models.Projects.Folders'];
                };
            };
        };
    };
    GetProjects2Folders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Folders/Get.ts').components['schemas']['Projects_2.Methods.Folders.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Folders/Get.ts').components['schemas']['Projects_2.Methods.Folders.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects/Folders.ts').components['schemas']['Models.Projects.Folders'];
                };
            };
        };
    };
    AddProjects2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Add.ts').components['schemas']['Projects_2.Methods.Projects.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Add.ts').components['schemas']['Projects_2.Methods.Projects.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelProjects2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Del.ts').components['schemas']['Projects_2.Methods.Projects.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Del.ts').components['schemas']['Projects_2.Methods.Projects.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetProjects2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Get.ts').components['schemas']['Projects_2.Methods.Projects.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Get.ts').components['schemas']['Projects_2.Methods.Projects.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    DelProjects2Rights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Rights/Del.ts').components['schemas']['Projects_2.Methods.Rights.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Rights/Del.ts').components['schemas']['Projects_2.Methods.Rights.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2Rights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Rights/Edit.ts').components['schemas']['Projects_2.Methods.Rights.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Rights/Edit.ts').components['schemas']['Projects_2.Methods.Rights.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2Rights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Rights/Get.ts').components['schemas']['Projects_2.Methods.Rights.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Rights/Get.ts').components['schemas']['Projects_2.Methods.Rights.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2Status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Status/Get.ts').components['schemas']['Projects_2.Methods.Status.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Status/Get.ts').components['schemas']['Projects_2.Methods.Status.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2Tasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Tasks/Get.ts').components['schemas']['Projects_2.Methods.Tasks.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Tasks/Get.ts').components['schemas']['Projects_2.Methods.Tasks.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    AbstractregularQuiz2Questions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Questions/AbstractRegular.ts').components['schemas']['Quiz_2.Methods.Questions.AbstractRegular'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Questions/AbstractRegular.ts').components['schemas']['Quiz_2.Methods.Questions.AbstractRegular.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddQuiz2Questions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Questions/Add.ts').components['schemas']['Quiz_2.Methods.Questions.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Questions/Add.ts').components['schemas']['Quiz_2.Methods.Questions.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelQuiz2Questions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Questions/Del.ts').components['schemas']['Quiz_2.Methods.Questions.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Questions/Del.ts').components['schemas']['Quiz_2.Methods.Questions.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditQuiz2Questions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Questions/Edit.ts').components['schemas']['Quiz_2.Methods.Questions.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Questions/Edit.ts').components['schemas']['Quiz_2.Methods.Questions.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetQuiz2Questions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Questions/Get.ts').components['schemas']['Quiz_2.Methods.Questions.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Questions/Get.ts').components['schemas']['Quiz_2.Methods.Questions.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Quizes/Questions.ts').components['schemas']['Models.Quizes.Questions'];
                };
            };
        };
    };
    AddQuiz2QuestionsResponses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/QuestionsResponses/Add.ts').components['schemas']['Quiz_2.Methods.QuestionsResponses.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/QuestionsResponses/Add.ts').components['schemas']['Quiz_2.Methods.QuestionsResponses.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelQuiz2Results: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Results/Del.ts').components['schemas']['Quiz_2.Methods.Results.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Results/Del.ts').components['schemas']['Quiz_2.Methods.Results.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetQuiz2Results: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/Results/Get.ts').components['schemas']['Quiz_2.Methods.Results.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/Results/Get.ts').components['schemas']['Quiz_2.Methods.Results.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetQuiz2ResultsUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/ResultsUsers/Get.ts').components['schemas']['Quiz_2.Methods.ResultsUsers.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/ResultsUsers/Get.ts').components['schemas']['Quiz_2.Methods.ResultsUsers.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetQuiz2WithQuestions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/WithQuestions/Get.ts').components['schemas']['Quiz_2.Methods.WithQuestions.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/WithQuestions/Get.ts').components['schemas']['Quiz_2.Methods.WithQuestions.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Quizes.ts').components['schemas']['Models.Quizes'];
                };
            };
        };
    };
    DelRecurring2RecurringCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Recurring_2/Methods/RecurringCard/Del.ts').components['schemas']['Recurring_2.Methods.RecurringCard.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Recurring_2/Methods/RecurringCard/Del.ts').components['schemas']['Recurring_2.Methods.RecurringCard.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetRecurring2RecurringCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Recurring_2/Methods/RecurringCard/Get.ts').components['schemas']['Recurring_2.Methods.RecurringCard.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Recurring_2/Methods/RecurringCard/Get.ts').components['schemas']['Recurring_2.Methods.RecurringCard.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditSchedule2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Schedule_2/Methods/Settings/Edit.ts').components['schemas']['Schedule_2.Methods.Settings.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Schedule_2/Methods/Settings/Edit.ts').components['schemas']['Schedule_2.Methods.Settings.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSchedule2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Schedule_2/Methods/Settings/Get.ts').components['schemas']['Schedule_2.Methods.Settings.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Schedule_2/Methods/Settings/Get.ts').components['schemas']['Schedule_2.Methods.Settings.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSms2CheckPIN: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Sms_2/Methods/CheckPIN/Get.ts').components['schemas']['Sms_2.Methods.CheckPIN.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Sms_2/Methods/CheckPIN/Get.ts').components['schemas']['Sms_2.Methods.CheckPIN.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSms2SendPIN: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Sms_2/Methods/SendPIN/Get.ts').components['schemas']['Sms_2.Methods.SendPIN.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Sms_2/Methods/SendPIN/Get.ts').components['schemas']['Sms_2.Methods.SendPIN.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AbstractregularSnapshots2Competitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/Competitors/AbstractRegular.ts').components['schemas']['Snapshots_2.Methods.Competitors.AbstractRegular'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/Competitors/AbstractRegular.ts').components['schemas']['Snapshots_2.Methods.Competitors.AbstractRegular.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSnapshots2Competitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/Competitors/Get.ts').components['schemas']['Snapshots_2.Methods.Competitors.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/Competitors/Get.ts').components['schemas']['Snapshots_2.Methods.Competitors.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditSnapshots2HiddenDomains: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/HiddenDomains/Edit.ts').components['schemas']['Snapshots_2.Methods.HiddenDomains.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/HiddenDomains/Edit.ts').components['schemas']['Snapshots_2.Methods.HiddenDomains.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSnapshots2HiddenDomains: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/HiddenDomains/Get.ts').components['schemas']['Snapshots_2.Methods.HiddenDomains.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/HiddenDomains/Get.ts').components['schemas']['Snapshots_2.Methods.HiddenDomains.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AbstractregularSnapshots2History: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/History/AbstractRegular.ts').components['schemas']['Snapshots_2.Methods.History.AbstractRegular'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/History/AbstractRegular.ts').components['schemas']['Snapshots_2.Methods.History.AbstractRegular.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSnapshots2History: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/History/Get.ts').components['schemas']['Snapshots_2.Methods.History.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/History/Get.ts').components['schemas']['Snapshots_2.Methods.History.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSystem2Calls: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Calls/Get.ts').components['schemas']['System_2.Methods.Calls.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Calls/Get.ts').components['schemas']['System_2.Methods.Calls.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddSystem2Cloud: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Cloud/Add.ts').components['schemas']['System_2.Methods.Cloud.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Cloud/Add.ts').components['schemas']['System_2.Methods.Cloud.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelSystem2Cloud: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Cloud/Del.ts').components['schemas']['System_2.Methods.Cloud.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Cloud/Del.ts').components['schemas']['System_2.Methods.Cloud.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSystem2Cloud: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Cloud/Get.ts').components['schemas']['System_2.Methods.Cloud.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Cloud/Get.ts').components['schemas']['System_2.Methods.Cloud.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSystem2Tpl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Tpl/Get.ts').components['schemas']['System_2.Methods.Tpl.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Tpl/Get.ts').components['schemas']['System_2.Methods.Tpl.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTemplates2AvailableFieldsData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Templates_2/Methods/AvailableFieldsData/Get.ts').components['schemas']['Templates_2.Methods.AvailableFieldsData.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Templates_2/Methods/AvailableFieldsData/Get.ts').components['schemas']['Templates_2.Methods.AvailableFieldsData.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelTemplates2Fields: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Templates_2/Methods/Fields/Del.ts').components['schemas']['Templates_2.Methods.Fields.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Templates_2/Methods/Fields/Del.ts').components['schemas']['Templates_2.Methods.Fields.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTemplates2Fields: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Templates_2/Methods/Fields/Edit.ts').components['schemas']['Templates_2.Methods.Fields.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Templates_2/Methods/Fields/Edit.ts').components['schemas']['Templates_2.Methods.Fields.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTemplates2Fields: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Templates_2/Methods/Fields/Get.ts').components['schemas']['Templates_2.Methods.Fields.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Templates_2/Methods/Fields/Get.ts').components['schemas']['Templates_2.Methods.Fields.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTemplates2FieldsProperties: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Templates_2/Methods/FieldsProperties/Get.ts').components['schemas']['Templates_2.Methods.FieldsProperties.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Templates_2/Methods/FieldsProperties/Get.ts').components['schemas']['Templates_2.Methods.FieldsProperties.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddTickets2Files: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Files/Add.ts').components['schemas']['Tickets_2.Methods.Files.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Files/Add.ts').components['schemas']['Tickets_2.Methods.Files.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelTickets2Files: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Files/Del.ts').components['schemas']['Tickets_2.Methods.Files.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Files/Del.ts').components['schemas']['Tickets_2.Methods.Files.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTickets2Files: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Files/Get.ts').components['schemas']['Tickets_2.Methods.Files.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Files/Get.ts').components['schemas']['Tickets_2.Methods.Files.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddTickets2Messages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Messages/Add.ts').components['schemas']['Tickets_2.Methods.Messages.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Messages/Add.ts').components['schemas']['Tickets_2.Methods.Messages.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2Rate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Rate/Edit.ts').components['schemas']['Tickets_2.Methods.Rate.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Rate/Edit.ts').components['schemas']['Tickets_2.Methods.Rate.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddTickets2Tickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Tickets/Add.ts').components['schemas']['Tickets_2.Methods.Tickets.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Tickets/Add.ts').components['schemas']['Tickets_2.Methods.Tickets.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2Tickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Tickets/Edit.ts').components['schemas']['Tickets_2.Methods.Tickets.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Tickets/Edit.ts').components['schemas']['Tickets_2.Methods.Tickets.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTickets2Tickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Tickets/Get.ts').components['schemas']['Tickets_2.Methods.Tickets.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Tickets/Get.ts').components['schemas']['Tickets_2.Methods.Tickets.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Tickets.ts').components['schemas']['Models.Tickets'];
                };
            };
        };
    };
    GetTpvsr2Stat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tpvsr_2/Methods/Stat/Get.ts').components['schemas']['Tpvsr_2.Methods.Stat.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tpvsr_2/Methods/Stat/Get.ts').components['schemas']['Tpvsr_2.Methods.Stat.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTpvsr2Tags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tpvsr_2/Methods/Tags/Edit.ts').components['schemas']['Tpvsr_2.Methods.Tags.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tpvsr_2/Methods/Tags/Edit.ts').components['schemas']['Tpvsr_2.Methods.Tags.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTpvsr2Title: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tpvsr_2/Methods/Title/Get.ts').components['schemas']['Tpvsr_2.Methods.Title.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tpvsr_2/Methods/Title/Get.ts').components['schemas']['Tpvsr_2.Methods.Title.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUrls2Export: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Urls_2/Methods/Export/Get.ts').components['schemas']['Urls_2.Methods.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddUrls2Import: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Urls_2/Methods/Import/Add.ts').components['schemas']['Urls_2.Methods.Import.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Urls_2/Methods/Import/Add.ts').components['schemas']['Urls_2.Methods.Import.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUrls2Tags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Urls_2/Methods/Tags/Edit.ts').components['schemas']['Urls_2.Methods.Tags.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Urls_2/Methods/Tags/Edit.ts').components['schemas']['Urls_2.Methods.Tags.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Urls.ts').components['schemas']['Models.Urls'];
                };
            };
        };
    };
    GetUsers2Auth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Auth/Get.ts').components['schemas']['Users_2.Methods.Auth.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Auth/Get.ts').components['schemas']['Users_2.Methods.Auth.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2Logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Logout/Get.ts').components['schemas']['Users_2.Methods.Logout.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Logout/Get.ts').components['schemas']['Users_2.Methods.Logout.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AbstractregularUsers2Profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/AbstractRegular.ts').components['schemas']['Users_2.Methods.Profile.AbstractRegular'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/AbstractRegular.ts').components['schemas']['Users_2.Methods.Profile.AbstractRegular.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2Profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Edit.ts').components['schemas']['Users_2.Methods.Profile.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Edit.ts').components['schemas']['Users_2.Methods.Profile.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddUsers2Ranks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Ranks/Add.ts').components['schemas']['Users_2.Methods.Ranks.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Ranks/Add.ts').components['schemas']['Users_2.Methods.Ranks.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2Ranks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Ranks/Get.ts').components['schemas']['Users_2.Methods.Ranks.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Ranks/Get.ts').components['schemas']['Users_2.Methods.Ranks.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Users/Ranks.ts').components['schemas']['Models.Users.Ranks'];
                };
            };
        };
    };
    GetUsers2Referrals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Referrals/Get.ts').components['schemas']['Users_2.Methods.Referrals.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Referrals/Get.ts').components['schemas']['Users_2.Methods.Referrals.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Users/Referrals.ts').components['schemas']['Models.Users.Referrals'];
                };
            };
        };
    };
    AddUsers2Reg: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Reg/Add.ts').components['schemas']['Users_2.Methods.Reg.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Reg/Add.ts').components['schemas']['Users_2.Methods.Reg.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2TelegramAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/TelegramAccounts/Get.ts').components['schemas']['Users_2.Methods.TelegramAccounts.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/TelegramAccounts/Get.ts').components['schemas']['Users_2.Methods.TelegramAccounts.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2Xml: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Xml/Get.ts').components['schemas']['Users_2.Methods.Xml.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Xml/Get.ts').components['schemas']['Users_2.Methods.Xml.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditVotes2Comment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Votes_2/Methods/Comment/Edit.ts').components['schemas']['Votes_2.Methods.Comment.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Votes_2/Methods/Comment/Edit.ts').components['schemas']['Votes_2.Methods.Comment.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2AccountingCounteragents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Counteragents/Edit.ts').components['schemas']['Admin_2.Methods.Accounting.Counteragents.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Counteragents/Edit.ts').components['schemas']['Admin_2.Methods.Accounting.Counteragents.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AccountingCounteragents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Counteragents/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Counteragents.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Counteragents/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Counteragents.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Accounting/Counteragents.ts').components['schemas']['Models.Admin.Accounting.Counteragents'];
                };
            };
        };
    };
    EditAdmin2AccountingGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Group/Edit.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Group/Edit.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AccountingGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Group/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Group/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/EmptyModel.ts').components['schemas']['Models.EmptyModel'];
                };
            };
        };
    };
    AddAdmin2AccountingInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Invoices/Add.ts').components['schemas']['Admin_2.Methods.Accounting.Invoices.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Invoices/Add.ts').components['schemas']['Admin_2.Methods.Accounting.Invoices.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelAdmin2AccountingInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Invoices/Del.ts').components['schemas']['Admin_2.Methods.Accounting.Invoices.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Invoices/Del.ts').components['schemas']['Admin_2.Methods.Accounting.Invoices.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Invoices.ts').components['schemas']['Models.Admin.Invoices'];
                };
            };
        };
    };
    GetAdmin2AccountingInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Invoices/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Invoices.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Invoices/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Invoices.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Invoices.ts').components['schemas']['Models.Admin.Invoices'];
                };
            };
        };
    };
    GetAdmin2AccountingOperations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Operations/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Operations.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Operations/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Operations.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/EmptyModel.ts').components['schemas']['Models.EmptyModel'];
                };
            };
        };
    };
    EditAdmin2ActionsBank: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Bank/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Bank.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Bank/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Bank.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelAdmin2ActionsPayments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Payments/Del.ts').components['schemas']['Admin_2.Methods.Actions.Payments.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Payments/Del.ts').components['schemas']['Admin_2.Methods.Actions.Payments.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsPayments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Payments/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Payments.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Payments/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Payments.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsPositions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Positions/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Positions.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Positions/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Positions.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Projects/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Projects.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Projects/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Projects.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2ActionsProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Projects/Get.ts').components['schemas']['Admin_2.Methods.Actions.Projects.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Projects/Get.ts').components['schemas']['Admin_2.Methods.Actions.Projects.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAdmin2ActionsTelegram: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Telegram/Add.ts').components['schemas']['Admin_2.Methods.Actions.Telegram.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Telegram/Add.ts').components['schemas']['Admin_2.Methods.Actions.Telegram.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferralProgramStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Affiliate/ReferralProgramStats/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.ReferralProgramStats.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Affiliate/ReferralProgramStats/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.ReferralProgramStats.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferralsByLevel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Affiliate/ReferralsByLevel/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.ReferralsByLevel.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Affiliate/ReferralsByLevel/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.ReferralsByLevel.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferrals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Affiliate/Referrals/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.Referrals.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Affiliate/Referrals/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.Referrals.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferrersByReferrals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Affiliate/ReferrersByReferrals/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.ReferrersByReferrals.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Affiliate/ReferrersByReferrals/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.ReferrersByReferrals.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferrers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Affiliate/Referrers/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.Referrers.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Affiliate/Referrers/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.Referrers.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AffiliateReferrersWithReferrals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Affiliate/ReferrersWithReferrals/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.ReferrersWithReferrals.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Affiliate/ReferrersWithReferrals/Get.ts').components['schemas']['Admin_2.Methods.Affiliate.ReferrersWithReferrals.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/EmptyModel.ts').components['schemas']['Models.EmptyModel'];
                };
            };
        };
    };
    GetAdmin2AnalyticsActivity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Activity/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Activity.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Activity/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Activity.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsCountOnlineUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/CountOnlineUsers/Get.ts').components['schemas']['Admin_2.Methods.Analytics.CountOnlineUsers.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/CountOnlineUsers/Get.ts').components['schemas']['Admin_2.Methods.Analytics.CountOnlineUsers.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Events/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Events.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Events/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Events.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Analytics/Events.ts').components['schemas']['Models.Analytics.Events'];
                };
            };
        };
    };
    GetAdmin2AnalyticsPayments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Payments/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Payments.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Payments/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Payments.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsServices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Statistics/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Statistics.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Statistics/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Statistics.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AbstractticketsstatsAdmin2AnalyticsTickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Tickets/AbstractTicketsStats.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.AbstractTicketsStats'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Tickets/AbstractTicketsStats.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.AbstractTicketsStats.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Tickets/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Tickets/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Tickets.ts').components['schemas']['Models.Tickets'];
                };
            };
        };
    };
    GetAdmin2I18nCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/I18n/Categories/Get.ts').components['schemas']['Admin_2.Methods.I18n.Categories.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/I18n/Categories/Get.ts').components['schemas']['Admin_2.Methods.I18n.Categories.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2LogsSystem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Logs/System/Get.ts').components['schemas']['Admin_2.Methods.Logs.System.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Logs/System/Get.ts').components['schemas']['Admin_2.Methods.Logs.System.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2RanksActivations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Ranks/Activations/Get.ts').components['schemas']['Admin_2.Methods.Ranks.Activations.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Ranks/Activations/Get.ts').components['schemas']['Admin_2.Methods.Ranks.Activations.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Analytics/RanksUsers.ts').components['schemas']['Models.Analytics.RanksUsers'];
                };
            };
        };
    };
    GetAdmin2SlackRate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Slack/Rate/Get.ts').components['schemas']['Admin_2.Methods.Slack.Rate.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Slack/Rate/Get.ts').components['schemas']['Admin_2.Methods.Slack.Rate.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2StaffAccess: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/Access/Edit.ts').components['schemas']['Admin_2.Methods.Staff.Access.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Staff/Access/Edit.ts').components['schemas']['Admin_2.Methods.Staff.Access.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Staff.ts').components['schemas']['Models.Admin.Staff'];
                };
            };
        };
    };
    GetAdmin2StaffByPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/ByPost/Get.ts').components['schemas']['Admin_2.Methods.Staff.ByPost.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Staff/ByPost/Get.ts').components['schemas']['Admin_2.Methods.Staff.ByPost.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2StaffContractPrint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/ContractPrint/Get.ts').components['schemas']['Admin_2.Methods.Staff.ContractPrint.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAdmin2StaffPosts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/Posts/Get.ts').components['schemas']['Admin_2.Methods.Staff.Posts.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Staff/Posts/Get.ts').components['schemas']['Admin_2.Methods.Staff.Posts.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAdmin2StaffVacation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/Vacation/Add.ts').components['schemas']['Admin_2.Methods.Staff.Vacation.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Staff/Vacation/Add.ts').components['schemas']['Admin_2.Methods.Staff.Vacation.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelAdmin2StaffVacation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/Vacation/Del.ts').components['schemas']['Admin_2.Methods.Staff.Vacation.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Staff/Vacation/Del.ts').components['schemas']['Admin_2.Methods.Staff.Vacation.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2StaffVacationPrint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Staff/VacationPrint/Get.ts').components['schemas']['Admin_2.Methods.Staff.VacationPrint.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAdmin2TplSchema: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Tpl/Schema/Get.ts').components['schemas']['Admin_2.Methods.Tpl.Schema.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Tpl/Schema/Get.ts').components['schemas']['Admin_2.Methods.Tpl.Schema.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAdmin2UsersPromocodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Promocodes/Add.ts').components['schemas']['Admin_2.Methods.Users.Promocodes.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Users/Promocodes/Add.ts').components['schemas']['Admin_2.Methods.Users.Promocodes.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Users/Verif.ts').components['schemas']['Models.Users.Verif'];
                };
            };
        };
    };
    GetAdmin2UsersPromocodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Promocodes/Get.ts').components['schemas']['Admin_2.Methods.Users.Promocodes.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Users/Promocodes/Get.ts').components['schemas']['Admin_2.Methods.Users.Promocodes.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Users/Verif.ts').components['schemas']['Models.Users.Verif'];
                };
            };
        };
    };
    AddAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Ranks/Add.ts').components['schemas']['Admin_2.Methods.Users.Ranks.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Users/Ranks/Add.ts').components['schemas']['Admin_2.Methods.Users.Ranks.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Users/Ranks.ts').components['schemas']['Models.Admin.Users.Ranks'];
                };
            };
        };
    };
    EditAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Ranks/Edit.ts').components['schemas']['Admin_2.Methods.Users.Ranks.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Users/Ranks/Edit.ts').components['schemas']['Admin_2.Methods.Users.Ranks.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Users/Ranks.ts').components['schemas']['Models.Admin.Users.Ranks'];
                };
            };
        };
    };
    GetAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Ranks/Get.ts').components['schemas']['Admin_2.Methods.Users.Ranks.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Users/Ranks/Get.ts').components['schemas']['Admin_2.Methods.Users.Ranks.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Users/Ranks.ts').components['schemas']['Models.Admin.Users.Ranks'];
                };
            };
        };
    };
    GetAudit2AuditBrowse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Browse/Get.ts').components['schemas']['Audit_2.Methods.Audit.Browse.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Browse/Get.ts').components['schemas']['Audit_2.Methods.Audit.Browse.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditChecks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Checks/Get.ts').components['schemas']['Audit_2.Methods.Audit.Checks.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Checks/Get.ts').components['schemas']['Audit_2.Methods.Audit.Checks.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Audit/Checks.ts').components['schemas']['Models.Audit.Checks'];
                };
            };
        };
    };
    GetAudit2AuditCss: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Css/Get.ts').components['schemas']['Audit_2.Methods.Audit.Css.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Css/Get.ts').components['schemas']['Audit_2.Methods.Audit.Css.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Audit/Css.ts').components['schemas']['Models.Audit.Css'];
                };
            };
        };
    };
    GetAudit2AuditExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Export/Get.ts').components['schemas']['Audit_2.Methods.Audit.Export.Get'];
            };
        };
        responses: {
            /** @description Файл результатов проверки сайта */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAudit2AuditImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Images/Get.ts').components['schemas']['Audit_2.Methods.Audit.Images.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Images/Get.ts').components['schemas']['Audit_2.Methods.Audit.Images.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Audit/Images.ts').components['schemas']['Models.Audit.Images'];
                };
            };
        };
    };
    GetAudit2AuditJs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Js/Get.ts').components['schemas']['Audit_2.Methods.Audit.Js.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Js/Get.ts').components['schemas']['Audit_2.Methods.Audit.Js.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Audit/Js.ts').components['schemas']['Models.Audit.Js'];
                };
            };
        };
    };
    GetAudit2AuditLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Links/Get.ts').components['schemas']['Audit_2.Methods.Audit.Links.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Links/Get.ts').components['schemas']['Audit_2.Methods.Audit.Links.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Audit/Links.ts').components['schemas']['Models.Audit.Links'];
                };
            };
        };
    };
    GetAudit2AuditLog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Log/Get.ts').components['schemas']['Audit_2.Methods.Audit.Log.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Log/Get.ts').components['schemas']['Audit_2.Methods.Audit.Log.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditPages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Pages/Get.ts').components['schemas']['Audit_2.Methods.Audit.Pages.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Pages/Get.ts').components['schemas']['Audit_2.Methods.Audit.Pages.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Audit/Pages.ts').components['schemas']['Models.Audit.Pages'];
                };
            };
        };
    };
    GetAudit2AuditSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Summary/Get.ts').components['schemas']['Audit_2.Methods.Audit.Summary.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Summary/Get.ts').components['schemas']['Audit_2.Methods.Audit.Summary.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Audit/Checks.ts').components['schemas']['Models.Audit.Checks'];
                };
            };
        };
    };
    GetAudit2AuditSummaryPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/SummaryPage/Get.ts').components['schemas']['Audit_2.Methods.Audit.SummaryPage.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/SummaryPage/Get.ts').components['schemas']['Audit_2.Methods.Audit.SummaryPage.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Audit/Pages.ts').components['schemas']['Models.Audit.Pages'];
                };
            };
        };
    };
    GetAudit2IndexingExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Indexing/Export/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Indexing/Export/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Export.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2IndexingLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Indexing/Links/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Links.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Indexing/Links/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Links.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2IndexingSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Indexing/Summary/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Summary.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Indexing/Summary/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Summary.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2WatcherByURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Watcher/ByURL/Get.ts').components['schemas']['Audit_2.Methods.Watcher.ByURL.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Watcher/ByURL/Get.ts').components['schemas']['Audit_2.Methods.Watcher.ByURL.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Watcher/Results.ts').components['schemas']['Models.Watcher.Results'];
                };
            };
        };
    };
    GetAudit2WatcherChecks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Watcher/Checks/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Checks.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Watcher/Checks/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Checks.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2WatcherSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Watcher/Summary/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Summary.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Watcher/Summary/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Summary.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBank2DiadocSendContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Diadoc/SendContract/Get.ts').components['schemas']['Bank_2.Methods.Diadoc.SendContract.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Diadoc/SendContract/Get.ts').components['schemas']['Bank_2.Methods.Diadoc.SendContract.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBank2DiadocSendTotalReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Diadoc/SendTotalReceipt/Get.ts').components['schemas']['Bank_2.Methods.Diadoc.SendTotalReceipt.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Diadoc/SendTotalReceipt/Get.ts').components['schemas']['Bank_2.Methods.Diadoc.SendTotalReceipt.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBank2HistoryExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/History/Export/Get.ts').components['schemas']['Bank_2.Methods.History.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetBank2HistorySummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/History/Summary/Get.ts').components['schemas']['Bank_2.Methods.History.Summary.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/History/Summary/Get.ts').components['schemas']['Bank_2.Methods.History.Summary.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/BalanceHistory.ts').components['schemas']['Models.BalanceHistory'];
                };
            };
        };
    };
    EditBank2ReferralsToBonus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Referrals/ToBonus/Edit.ts').components['schemas']['Bank_2.Methods.Referrals.ToBonus.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Referrals/ToBonus/Edit.ts').components['schemas']['Bank_2.Methods.Referrals.ToBonus.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBank2RequisitesContractTariffId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Requisites/ContractTariffId/Get.ts').components['schemas']['Bank_2.Methods.Requisites.ContractTariffId.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Requisites/ContractTariffId/Get.ts').components['schemas']['Bank_2.Methods.Requisites.ContractTariffId.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBank2RequisitesPrint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Requisites/Print/Get.ts').components['schemas']['Bank_2.Methods.Requisites.Print.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetBank2RequisitesPrintTotalReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Requisites/PrintTotalReceipt/Get.ts').components['schemas']['Bank_2.Methods.Requisites.PrintTotalReceipt.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Requisites/PrintTotalReceipt/Get.ts').components['schemas']['Bank_2.Methods.Requisites.PrintTotalReceipt.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBank2RequisitesPrintZip: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Requisites/PrintZip/Get.ts').components['schemas']['Bank_2.Methods.Requisites.PrintZip.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetBank2SubscriptionsPlans: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Bank_2/Methods/Subscriptions/Plans/Get.ts').components['schemas']['Bank_2.Methods.Subscriptions.Plans.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Bank_2/Methods/Subscriptions/Plans/Get.ts').components['schemas']['Bank_2.Methods.Subscriptions.Plans.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditBroker2AdsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Ads/Status/Edit.ts').components['schemas']['Broker_2.Methods.Ads.Status.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Ads/Status/Edit.ts').components['schemas']['Broker_2.Methods.Ads.Status.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditBroker2AdsToModerate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Ads/ToModerate/Edit.ts').components['schemas']['Broker_2.Methods.Ads.ToModerate.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Ads/ToModerate/Edit.ts').components['schemas']['Broker_2.Methods.Ads.ToModerate.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditBroker2CampaignsUpdateTargeting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Campaigns/UpdateTargeting/Edit.ts').components['schemas']['Broker_2.Methods.Campaigns.UpdateTargeting.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Campaigns/UpdateTargeting/Edit.ts').components['schemas']['Broker_2.Methods.Campaigns.UpdateTargeting.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Broker/Campaigns.ts').components['schemas']['Models.Broker.Campaigns'];
                };
            };
        };
    };
    GetBroker2GroupsEditor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Groups/Editor/Get.ts').components['schemas']['Broker_2.Methods.Groups.Editor.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Groups/Editor/Get.ts').components['schemas']['Broker_2.Methods.Groups.Editor.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditBroker2KeywordsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Keywords/Status/Edit.ts').components['schemas']['Broker_2.Methods.Keywords.Status.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Keywords/Status/Edit.ts').components['schemas']['Broker_2.Methods.Keywords.Status.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetBroker2LogExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Log/Export/Get.ts').components['schemas']['Broker_2.Methods.Log.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddBroker2TasksRateTask: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Broker_2/Methods/Tasks/RateTask/Add.ts').components['schemas']['Broker_2.Methods.Tasks.RateTask.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Broker_2/Methods/Tasks/RateTask/Add.ts').components['schemas']['Broker_2.Methods.Tasks.RateTask.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditCompetitors2OrdersPay: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Competitors_2/Methods/Orders/Pay/Edit.ts').components['schemas']['Competitors_2.Methods.Orders.Pay.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Competitors_2/Methods/Orders/Pay/Edit.ts').components['schemas']['Competitors_2.Methods.Orders.Pay.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrCalendar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Apometr/Calendar/Get.ts').components['schemas']['Content_2.Methods.Apometr.Calendar.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Apometr/Calendar/Get.ts').components['schemas']['Content_2.Methods.Apometr.Calendar.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrCHHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Apometr/CHHistory/Get.ts').components['schemas']['Content_2.Methods.Apometr.CHHistory.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Apometr/CHHistory/Get.ts').components['schemas']['Content_2.Methods.Apometr.CHHistory.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Apometr/History.ts').components['schemas']['Models.Apometr.History'];
                };
            };
        };
    };
    GetContent2ApometrHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Apometr/History/Get.ts').components['schemas']['Content_2.Methods.Apometr.History.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Apometr/History/Get.ts').components['schemas']['Content_2.Methods.Apometr.History.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrKeywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Apometr/Keywords/Get.ts').components['schemas']['Content_2.Methods.Apometr.Keywords.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Apometr/Keywords/Get.ts').components['schemas']['Content_2.Methods.Apometr.Keywords.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Apometr/Keywords.ts').components['schemas']['Models.Apometr.Keywords'];
                };
            };
        };
    };
    GetContent2ApometrUpdates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Apometr/Updates/Get.ts').components['schemas']['Content_2.Methods.Apometr.Updates.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Apometr/Updates/Get.ts').components['schemas']['Content_2.Methods.Apometr.Updates.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalArticles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Articles/Get.ts').components['schemas']['Content_2.Methods.Journal.Articles.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Articles/Get.ts').components['schemas']['Content_2.Methods.Journal.Articles.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    GetContent2JournalBookmarksAuthors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/BookmarksAuthors/Get.ts').components['schemas']['Content_2.Methods.Journal.BookmarksAuthors.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/BookmarksAuthors/Get.ts').components['schemas']['Content_2.Methods.Journal.BookmarksAuthors.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    GetContent2JournalBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Bookmarks/Get.ts').components['schemas']['Content_2.Methods.Journal.Bookmarks.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Bookmarks/Get.ts').components['schemas']['Content_2.Methods.Journal.Bookmarks.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    GetContent2JournalCourse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Course/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Course/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    GetContent2JournalRubrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Rubrics/Get.ts').components['schemas']['Content_2.Methods.Journal.Rubrics.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Rubrics/Get.ts').components['schemas']['Content_2.Methods.Journal.Rubrics.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    EditContent2JournalSubscribe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Subscribe/Edit.ts').components['schemas']['Content_2.Methods.Journal.Subscribe.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Subscribe/Edit.ts').components['schemas']['Content_2.Methods.Journal.Subscribe.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditContent2PagesOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Pages/Order/Edit.ts').components['schemas']['Content_2.Methods.Pages.Order.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Pages/Order/Edit.ts').components['schemas']['Content_2.Methods.Pages.Order.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2SupportMenu: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Support/Menu/Get.ts').components['schemas']['Content_2.Methods.Support.Menu.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Support/Menu/Get.ts').components['schemas']['Content_2.Methods.Support.Menu.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddInformer2PushToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Informer_2/Methods/Push/Token/Add.ts').components['schemas']['Informer_2.Methods.Push.Token.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Informer_2/Methods/Push/Token/Add.ts').components['schemas']['Informer_2.Methods.Push.Token.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelInformer2PushToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Informer_2/Methods/Push/Token/Del.ts').components['schemas']['Informer_2.Methods.Push.Token.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Informer_2/Methods/Push/Token/Del.ts').components['schemas']['Informer_2.Methods.Push.Token.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditKeywords2CollectGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Keywords_2/Methods/Collect/Go/Edit.ts').components['schemas']['Keywords_2.Methods.Collect.Go.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Keywords_2/Methods/Collect/Go/Edit.ts').components['schemas']['Keywords_2.Methods.Collect.Go.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetKeywords2CollectPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Keywords_2/Methods/Collect/Price/Get.ts').components['schemas']['Keywords_2.Methods.Collect.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Keywords_2/Methods/Collect/Price/Get.ts').components['schemas']['Keywords_2.Methods.Collect.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddKeywords2KeywordsImport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Keywords_2/Methods/Keywords/Import/Add.ts').components['schemas']['Keywords_2.Methods.Keywords.Import.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Keywords_2/Methods/Keywords/Import/Add.ts').components['schemas']['Keywords_2.Methods.Keywords.Import.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditKeywords2VolumesGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Keywords_2/Methods/Volumes/Go/Edit.ts').components['schemas']['Keywords_2.Methods.Volumes.Go.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Keywords_2/Methods/Volumes/Go/Edit.ts').components['schemas']['Keywords_2.Methods.Volumes.Go.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Keywords.ts').components['schemas']['Models.Keywords'];
                };
            };
        };
    };
    GetKeywords2VolumesPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Keywords_2/Methods/Volumes/Price/Get.ts').components['schemas']['Keywords_2.Methods.Volumes.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Keywords_2/Methods/Volumes/Price/Get.ts').components['schemas']['Keywords_2.Methods.Volumes.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Keywords.ts').components['schemas']['Models.Keywords'];
                };
            };
        };
    };
    AddLandings2HrFeedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Landings_2/Methods/Hr/Feedback/Add.ts').components['schemas']['Landings_2.Methods.Hr.Feedback.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Landings_2/Methods/Hr/Feedback/Add.ts').components['schemas']['Landings_2.Methods.Hr.Feedback.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditMentions2CheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Checker/Go/Edit.ts').components['schemas']['Mentions_2.Methods.Checker.Go.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Checker/Go/Edit.ts').components['schemas']['Mentions_2.Methods.Checker.Go.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetMentions2CheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Checker/Price/Get.ts').components['schemas']['Mentions_2.Methods.Checker.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Checker/Price/Get.ts').components['schemas']['Mentions_2.Methods.Checker.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditMentions2RulesKeywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Rules/Keywords/Edit.ts').components['schemas']['Mentions_2.Methods.Rules.Keywords.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Rules/Keywords/Edit.ts').components['schemas']['Mentions_2.Methods.Rules.Keywords.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Rules.ts').components['schemas']['Models.Mentions.Rules'];
                };
            };
        };
    };
    EditMentions2RulesRename: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Rules/Rename/Edit.ts').components['schemas']['Mentions_2.Methods.Rules.Rename.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Rules/Rename/Edit.ts').components['schemas']['Mentions_2.Methods.Rules.Rename.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Rules.ts').components['schemas']['Models.Mentions.Rules'];
                };
            };
        };
    };
    EditMentions2SearchersDepth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Searchers/Depth/Edit.ts').components['schemas']['Mentions_2.Methods.Searchers.Depth.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Searchers/Depth/Edit.ts').components['schemas']['Mentions_2.Methods.Searchers.Depth.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Searchers.ts').components['schemas']['Models.Mentions.Searchers'];
                };
            };
        };
    };
    EditMentions2SearchersEnabled: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Mentions_2/Methods/Searchers/Enabled/Edit.ts').components['schemas']['Mentions_2.Methods.Searchers.Enabled.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Mentions_2/Methods/Searchers/Enabled/Edit.ts').components['schemas']['Mentions_2.Methods.Searchers.Enabled.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Mentions/Searchers.ts').components['schemas']['Models.Mentions.Searchers'];
                };
            };
        };
    };
    EditPayments2RecurrentSuspend: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Recurrent/Suspend/Edit.ts').components['schemas']['Payments_2.Methods.Recurrent.Suspend.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/Recurrent/Suspend/Edit.ts').components['schemas']['Payments_2.Methods.Recurrent.Suspend.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2SubscriptionsNext: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Subscriptions/Next/Edit.ts').components['schemas']['Payments_2.Methods.Subscriptions.Next.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/Subscriptions/Next/Edit.ts').components['schemas']['Payments_2.Methods.Subscriptions.Next.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffDelCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Tariff/DelCard/Edit.ts').components['schemas']['Payments_2.Methods.Tariff.DelCard.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/Tariff/DelCard/Edit.ts').components['schemas']['Payments_2.Methods.Tariff.DelCard.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffNextToDiadoc: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Tariff/NextToDiadoc/Edit.ts').components['schemas']['Payments_2.Methods.Tariff.NextToDiadoc.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/Tariff/NextToDiadoc/Edit.ts').components['schemas']['Payments_2.Methods.Tariff.NextToDiadoc.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffSetNext: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Tariff/SetNext/Edit.ts').components['schemas']['Payments_2.Methods.Tariff.SetNext.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Payments_2/Methods/Tariff/SetNext/Edit.ts').components['schemas']['Payments_2.Methods.Tariff.SetNext.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPositions2CheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Checker/Go/Edit.ts').components['schemas']['Positions_2.Methods.Checker.Go.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Checker/Go/Edit.ts').components['schemas']['Positions_2.Methods.Checker.Go.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetPositions2CheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Checker/Price/Get.ts').components['schemas']['Positions_2.Methods.Checker.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Checker/Price/Get.ts').components['schemas']['Positions_2.Methods.Checker.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    EditPositions2SearchersEnabled: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Enabled/Edit.ts').components['schemas']['Positions_2.Methods.Searchers.Enabled.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Searchers/Enabled/Edit.ts').components['schemas']['Positions_2.Methods.Searchers.Enabled.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddPositions2SearchersRegions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Regions/Add.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Searchers/Regions/Add.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelPositions2SearchersRegions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Regions/Del.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Searchers/Regions/Del.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPositions2SearchersRegions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Regions/Edit.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Searchers/Regions/Edit.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPositions2SearchersSort: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Sort/Edit.ts').components['schemas']['Positions_2.Methods.Searchers.Sort.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Searchers/Sort/Edit.ts').components['schemas']['Positions_2.Methods.Searchers.Sort.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2AnalyticsGraph: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Analytics/Graph/Get.ts').components['schemas']['Projects_2.Methods.Analytics.Graph.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Analytics/Graph/Get.ts').components['schemas']['Projects_2.Methods.Analytics.Graph.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2CompetitorsMove: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Competitors/Move/Edit.ts').components['schemas']['Projects_2.Methods.Competitors.Move.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Competitors/Move/Edit.ts').components['schemas']['Projects_2.Methods.Competitors.Move.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2CompetitorsName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Competitors/Name/Edit.ts').components['schemas']['Projects_2.Methods.Competitors.Name.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Competitors/Name/Edit.ts').components['schemas']['Projects_2.Methods.Competitors.Name.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2CompetitorsOn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Competitors/On/Edit.ts').components['schemas']['Projects_2.Methods.Competitors.On.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Competitors/On/Edit.ts').components['schemas']['Projects_2.Methods.Competitors.On.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2FoldersMove: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Folders/Move/Edit.ts').components['schemas']['Projects_2.Methods.Folders.Move.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Folders/Move/Edit.ts').components['schemas']['Projects_2.Methods.Folders.Move.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2FoldersMoveFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Folders/MoveFolder/Edit.ts').components['schemas']['Projects_2.Methods.Folders.MoveFolder.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Folders/MoveFolder/Edit.ts').components['schemas']['Projects_2.Methods.Folders.MoveFolder.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2FoldersName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Folders/Name/Edit.ts').components['schemas']['Projects_2.Methods.Folders.Name.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Folders/Name/Edit.ts').components['schemas']['Projects_2.Methods.Folders.Name.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2MasterHintsCompetitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Master/HintsCompetitors/Get.ts').components['schemas']['Projects_2.Methods.Master.HintsCompetitors.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Master/HintsCompetitors/Get.ts').components['schemas']['Projects_2.Methods.Master.HintsCompetitors.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2MasterHintsKeywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Master/HintsKeywords/Get.ts').components['schemas']['Projects_2.Methods.Master.HintsKeywords.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Master/HintsKeywords/Get.ts').components['schemas']['Projects_2.Methods.Master.HintsKeywords.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddProjects2ProjectsCopy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Copy/Add.ts').components['schemas']['Projects_2.Methods.Projects.Copy.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Copy/Add.ts').components['schemas']['Projects_2.Methods.Projects.Copy.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2ProjectsFavorite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Favorite/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Favorite.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Favorite/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Favorite.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    EditProjects2ProjectsMove: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Move/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Move.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Move/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Move.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2ProjectsName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Name/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Name.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Name/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Name.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2ProjectsOn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/On/Edit.ts').components['schemas']['Projects_2.Methods.Projects.On.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/On/Edit.ts').components['schemas']['Projects_2.Methods.Projects.On.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    EditProjects2ProjectsSort: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Sort/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Sort.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Sort/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Sort.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    EditProjects2ProjectsTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Tags/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Tags.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Tags/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Tags.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2ProjectsUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Projects/Url/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Url.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Projects/Url/Edit.ts').components['schemas']['Projects_2.Methods.Projects.Url.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelProjects2RightsChangeOwner: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Rights/ChangeOwner/Del.ts').components['schemas']['Projects_2.Methods.Rights.ChangeOwner.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Rights/ChangeOwner/Del.ts').components['schemas']['Projects_2.Methods.Rights.ChangeOwner.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditProjects2RightsChangeOwner: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Rights/ChangeOwner/Edit.ts').components['schemas']['Projects_2.Methods.Rights.ChangeOwner.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Rights/ChangeOwner/Edit.ts').components['schemas']['Projects_2.Methods.Rights.ChangeOwner.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2StatusRegistrar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Status/Registrar/Get.ts').components['schemas']['Projects_2.Methods.Status.Registrar.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Status/Registrar/Get.ts').components['schemas']['Projects_2.Methods.Status.Registrar.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2StatusSsl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Status/Ssl/Get.ts').components['schemas']['Projects_2.Methods.Status.Ssl.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Status/Ssl/Get.ts').components['schemas']['Projects_2.Methods.Status.Ssl.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddProjects2TasksVolumes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Tasks/Volumes/Add.ts').components['schemas']['Projects_2.Methods.Tasks.Volumes.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Tasks/Volumes/Add.ts').components['schemas']['Projects_2.Methods.Tasks.Volumes.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddQuiz2QuestionsResponsesMulti: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Quiz_2/Methods/QuestionsResponses/Multi/Add.ts').components['schemas']['Quiz_2.Methods.QuestionsResponses.Multi.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Quiz_2/Methods/QuestionsResponses/Multi/Add.ts').components['schemas']['Quiz_2.Methods.QuestionsResponses.Multi.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetRedmine2UsersGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Redmine_2/Methods/Users/Groups/Get.ts').components['schemas']['Redmine_2.Methods.Users.Groups.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Redmine_2/Methods/Users/Groups/Get.ts').components['schemas']['Redmine_2.Methods.Users.Groups.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditReports2PositionsSendTest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Reports_2/Methods/Positions/SendTest/Edit.ts').components['schemas']['Reports_2.Methods.Positions.SendTest.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Reports_2/Methods/Positions/SendTest/Edit.ts').components['schemas']['Reports_2.Methods.Positions.SendTest.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSchedule2SettingsEmailsHints: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Schedule_2/Methods/Settings/EmailsHints/Get.ts').components['schemas']['Schedule_2.Methods.Settings.EmailsHints.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Schedule_2/Methods/Settings/EmailsHints/Get.ts').components['schemas']['Schedule_2.Methods.Settings.EmailsHints.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSnapshots2CompetitorsChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/Competitors/Chart/Get.ts').components['schemas']['Snapshots_2.Methods.Competitors.Chart.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/Competitors/Chart/Get.ts').components['schemas']['Snapshots_2.Methods.Competitors.Chart.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSnapshots2CompetitorsExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/Competitors/Export/Get.ts').components['schemas']['Snapshots_2.Methods.Competitors.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/Competitors/Export/Get.ts').components['schemas']['Snapshots_2.Methods.Competitors.Export.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSnapshots2HistoryExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/History/Export/Get.ts').components['schemas']['Snapshots_2.Methods.History.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/History/Export/Get.ts').components['schemas']['Snapshots_2.Methods.History.Export.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSnapshots2HistoryLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/History/Links/Get.ts').components['schemas']['Snapshots_2.Methods.History.Links.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Snapshots_2/Methods/History/Links/Get.ts').components['schemas']['Snapshots_2.Methods.History.Links.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditSystem2ApiGenKey: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Api/GenKey/Edit.ts').components['schemas']['System_2.Methods.Api.GenKey.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Api/GenKey/Edit.ts').components['schemas']['System_2.Methods.Api.GenKey.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSystem2ApiTest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Api/Test/Get.ts').components['schemas']['System_2.Methods.Api.Test.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Api/Test/Get.ts').components['schemas']['System_2.Methods.Api.Test.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSystem2CloudDownload: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Cloud/Download/Get.ts').components['schemas']['System_2.Methods.Cloud.Download.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    EditSystem2CloudRename: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Cloud/Rename/Edit.ts').components['schemas']['System_2.Methods.Cloud.Rename.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Cloud/Rename/Edit.ts').components['schemas']['System_2.Methods.Cloud.Rename.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddSystem2CommonAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Common/Analytics/Add.ts').components['schemas']['System_2.Methods.Common.Analytics.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetSystem2CommonCompetitorsQueries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Common/CompetitorsQueries/Get.ts').components['schemas']['System_2.Methods.Common.CompetitorsQueries.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Common/CompetitorsQueries/Get.ts').components['schemas']['System_2.Methods.Common.CompetitorsQueries.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSystem2CommonOpenAPI: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Common/OpenAPI/Get.ts').components['schemas']['System_2.Methods.Common.OpenAPI.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetSystem2CommonPagePreview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Common/PagePreview/Get.ts').components['schemas']['System_2.Methods.Common.PagePreview.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetSystem2CommonRegions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Common/Regions/Get.ts').components['schemas']['System_2.Methods.Common.Regions.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Common/Regions/Get.ts').components['schemas']['System_2.Methods.Common.Regions.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSystem2CommonWebScreensFree: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Common/WebScreensFree/Get.ts').components['schemas']['System_2.Methods.Common.WebScreensFree.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    EditSystem2GamesRecord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Games/Record/Edit.ts').components['schemas']['System_2.Methods.Games.Record.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Games/Record/Edit.ts').components['schemas']['System_2.Methods.Games.Record.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSystem2GamesRecord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Games/Record/Get.ts').components['schemas']['System_2.Methods.Games.Record.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Games/Record/Get.ts').components['schemas']['System_2.Methods.Games.Record.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddSystem2LogError: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Log/Error/Add.ts').components['schemas']['System_2.Methods.Log.Error.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Log/Error/Add.ts').components['schemas']['System_2.Methods.Log.Error.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditSystem2PropertiesProperty: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Properties/Property/Edit.ts').components['schemas']['System_2.Methods.Properties.Property.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./System_2/Methods/Properties/Property/Edit.ts').components['schemas']['System_2.Methods.Properties.Property.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelTickets2AdminMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/Message/Del.ts').components['schemas']['Tickets_2.Methods.Admin.Message.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/Message/Del.ts').components['schemas']['Tickets_2.Methods.Admin.Message.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/Message/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Message.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/Message/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Message.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddTickets2AdminTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/Templates/Add.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/Templates/Add.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelTickets2AdminTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/Templates/Del.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/Templates/Del.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/Templates/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/Templates/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTickets2AdminTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/Templates/Get.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/Templates/Get.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminTicket: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/Ticket/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Ticket.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/Ticket/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Ticket.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminTicketSplit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/TicketSplit/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.TicketSplit.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/TicketSplit/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.TicketSplit.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTickets2AdminUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/User/Get.ts').components['schemas']['Tickets_2.Methods.Admin.User.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/User/Get.ts').components['schemas']['Tickets_2.Methods.Admin.User.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminUserId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/UserId/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.UserId.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/UserId/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.UserId.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2TicketsAdminComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Tickets/AdminComment/Edit.ts').components['schemas']['Tickets_2.Methods.Tickets.AdminComment.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Tickets/AdminComment/Edit.ts').components['schemas']['Tickets_2.Methods.Tickets.AdminComment.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTickets2TicketsInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Tickets/Info/Get.ts').components['schemas']['Tickets_2.Methods.Tickets.Info.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Tickets/Info/Get.ts').components['schemas']['Tickets_2.Methods.Tickets.Info.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2TicketsSetReaded: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Tickets/SetReaded/Edit.ts').components['schemas']['Tickets_2.Methods.Tickets.SetReaded.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Tickets/SetReaded/Edit.ts').components['schemas']['Tickets_2.Methods.Tickets.SetReaded.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2TicketsWriting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Tickets/Writing/Edit.ts').components['schemas']['Tickets_2.Methods.Tickets.Writing.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Tickets/Writing/Edit.ts').components['schemas']['Tickets_2.Methods.Tickets.Writing.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTpvsr2StatReferers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tpvsr_2/Methods/Stat/Referers/Get.ts').components['schemas']['Tpvsr_2.Methods.Stat.Referers.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tpvsr_2/Methods/Stat/Referers/Get.ts').components['schemas']['Tpvsr_2.Methods.Stat.Referers.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUrls2ImportRecognizeLinkSitemapXml: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Urls_2/Methods/Import/RecognizeLinkSitemapXml/Get.ts').components['schemas']['Urls_2.Methods.Import.RecognizeLinkSitemapXml.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Urls_2/Methods/Import/RecognizeLinkSitemapXml/Get.ts').components['schemas']['Urls_2.Methods.Import.RecognizeLinkSitemapXml.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddUsers2JoinEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Join/Email/Add.ts').components['schemas']['Users_2.Methods.Join.Email.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Join/Email/Add.ts').components['schemas']['Users_2.Methods.Join.Email.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelUsers2ProfileAvatar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Avatar/Del.ts').components['schemas']['Users_2.Methods.Profile.Avatar.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Avatar/Del.ts').components['schemas']['Users_2.Methods.Profile.Avatar.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2ProfileAvatar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Avatar/Edit.ts').components['schemas']['Users_2.Methods.Profile.Avatar.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Avatar/Edit.ts').components['schemas']['Users_2.Methods.Profile.Avatar.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2ProfileAvatar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Avatar/Get.ts').components['schemas']['Users_2.Methods.Profile.Avatar.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Avatar/Get.ts').components['schemas']['Users_2.Methods.Profile.Avatar.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2ProfileCurrency: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Currency/Edit.ts').components['schemas']['Users_2.Methods.Profile.Currency.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Currency/Edit.ts').components['schemas']['Users_2.Methods.Profile.Currency.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2ProfileEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Email/Edit.ts').components['schemas']['Users_2.Methods.Profile.Email.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Email/Edit.ts').components['schemas']['Users_2.Methods.Profile.Email.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2ProfileLang: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Lang/Edit.ts').components['schemas']['Users_2.Methods.Profile.Lang.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Lang/Edit.ts').components['schemas']['Users_2.Methods.Profile.Lang.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2ProfilePass: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Pass/Edit.ts').components['schemas']['Users_2.Methods.Profile.Pass.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Pass/Edit.ts').components['schemas']['Users_2.Methods.Profile.Pass.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2ProfileRetrievePass: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/RetrievePass/Edit.ts').components['schemas']['Users_2.Methods.Profile.RetrievePass.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/RetrievePass/Edit.ts').components['schemas']['Users_2.Methods.Profile.RetrievePass.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2ProfileTheme: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Theme/Edit.ts').components['schemas']['Users_2.Methods.Profile.Theme.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Theme/Edit.ts').components['schemas']['Users_2.Methods.Profile.Theme.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2ProfileTimezone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Timezone/Edit.ts').components['schemas']['Users_2.Methods.Profile.Timezone.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Timezone/Edit.ts').components['schemas']['Users_2.Methods.Profile.Timezone.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddUsers2RanksPromocode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Ranks/Promocode/Add.ts').components['schemas']['Users_2.Methods.Ranks.Promocode.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Ranks/Promocode/Add.ts').components['schemas']['Users_2.Methods.Ranks.Promocode.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2ReferralsChartCountsByDate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Referrals/ChartCountsByDate/Get.ts').components['schemas']['Users_2.Methods.Referrals.ChartCountsByDate.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Referrals/ChartCountsByDate/Get.ts').components['schemas']['Users_2.Methods.Referrals.ChartCountsByDate.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddUsers2ReferralsInvite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Referrals/Invite/Add.ts').components['schemas']['Users_2.Methods.Referrals.Invite.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Referrals/Invite/Add.ts').components['schemas']['Users_2.Methods.Referrals.Invite.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2StatsAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Stats/Account/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Stats/Account/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAdmin2AccountingGroupFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Group/Filter/Add.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Filter.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Group/Filter/Add.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Filter.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelAdmin2AccountingGroupFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Group/Filter/Del.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Filter.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Group/Filter/Del.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Filter.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2AccountingGroupFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Group/Filter/Edit.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Filter.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Group/Filter/Edit.ts').components['schemas']['Admin_2.Methods.Accounting.Group.Filter.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AccountingInvoicesFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Invoices/File/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Invoices.File.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAdmin2AccountingOperationsExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Accounting/Operations/Export/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Operations.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Accounting/Operations/Export/Get.ts').components['schemas']['Admin_2.Methods.Accounting.Operations.Export.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsBackupKeywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Backup/Keywords/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Backup.Keywords.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Backup/Keywords/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Backup.Keywords.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsBackupLoader: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Backup/Loader/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Backup.Loader.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Backup/Loader/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Backup.Loader.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsBackupProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Backup/Project/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Backup.Project.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Backup/Project/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Backup.Project.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsBankReferral: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Bank/Referral/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Bank.Referral.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Bank/Referral/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Bank.Referral.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAdmin2ActionsPaymentsDiadoc: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Payments/Diadoc/Add.ts').components['schemas']['Admin_2.Methods.Actions.Payments.Diadoc.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Payments/Diadoc/Add.ts').components['schemas']['Admin_2.Methods.Actions.Payments.Diadoc.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAdmin2ActionsPositionsHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Positions/History/Add.ts').components['schemas']['Admin_2.Methods.Actions.Positions.History.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Positions/History/Add.ts').components['schemas']['Admin_2.Methods.Actions.Positions.History.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsPositionsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Positions/Status/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Positions.Status.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Positions/Status/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Positions.Status.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsProjectsDomain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Projects/Domain/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Projects.Domain.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Projects/Domain/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Projects.Domain.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsRegionsCommitGoogle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Regions/CommitGoogle/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Regions.CommitGoogle.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Regions/CommitGoogle/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Regions.CommitGoogle.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsRegionsUpdateGoogle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Regions/UpdateGoogle/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Regions.UpdateGoogle.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Regions/UpdateGoogle/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Regions.UpdateGoogle.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsRobotChecks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Robot/Checks/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Robot.Checks.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Robot/Checks/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Robot.Checks.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsRobotPriority: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Robot/Priority/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Robot.Priority.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Robot/Priority/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Robot.Priority.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsRobotTask: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Robot/Task/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Robot.Task.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Robot/Task/Edit.ts').components['schemas']['Admin_2.Methods.Actions.Robot.Task.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelAdmin2ActionsSlackFiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Slack/Files/Del.ts').components['schemas']['Admin_2.Methods.Actions.Slack.Files.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Slack/Files/Del.ts').components['schemas']['Admin_2.Methods.Actions.Slack.Files.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelAdmin2ActionsSlackMessages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Slack/Messages/Del.ts').components['schemas']['Admin_2.Methods.Actions.Slack.Messages.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Slack/Messages/Del.ts').components['schemas']['Admin_2.Methods.Actions.Slack.Messages.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsUserCurrency: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/User/Currency/Edit.ts').components['schemas']['Admin_2.Methods.Actions.User.Currency.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/User/Currency/Edit.ts').components['schemas']['Admin_2.Methods.Actions.User.Currency.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2ActionsUserEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/User/Email/Edit.ts').components['schemas']['Admin_2.Methods.Actions.User.Email.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/User/Email/Edit.ts').components['schemas']['Admin_2.Methods.Actions.User.Email.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsAccountingSummaryForChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Accounting/SummaryForChart/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Accounting.SummaryForChart.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Accounting/SummaryForChart/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Accounting.SummaryForChart.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsActivityChartByPeriod: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Activity/ChartByPeriod/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Activity.ChartByPeriod.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Activity/ChartByPeriod/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Activity.ChartByPeriod.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsCompetitorsSummaryForOrdersChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Competitors/SummaryForOrdersChart/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Competitors.SummaryForOrdersChart.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Competitors/SummaryForOrdersChart/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Competitors.SummaryForOrdersChart.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPaymentsSystems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Payments/Systems/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Payments.Systems.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Payments/Systems/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Payments.Systems.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPaymentsTariff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Payments/Tariff/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Payments.Tariff.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Payments/Tariff/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Payments.Tariff.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPositionsChartByDayByHourAuto: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Positions/ChartByDayByHourAuto/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Positions.ChartByDayByHourAuto.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Positions/ChartByDayByHourAuto/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Positions.ChartByDayByHourAuto.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPositionsChartByHourAuto: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Positions/ChartByHourAuto/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Positions.ChartByHourAuto.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Positions/ChartByHourAuto/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Positions.ChartByHourAuto.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPositionsChartByHour: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Positions/ChartByHour/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Positions.ChartByHour.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Positions/ChartByHour/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Positions.ChartByHour.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsPositionsChartCountUsersByHour: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Positions/ChartCountUsersByHour/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Positions.ChartCountUsersByHour.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Positions/ChartCountUsersByHour/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Positions.ChartCountUsersByHour.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByMigrations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Tickets/ChartByMigrations/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByMigrations.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Tickets/ChartByMigrations/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByMigrations.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByNew: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Tickets/ChartByNew/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByNew.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Tickets/ChartByNew/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByNew.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByRates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Tickets/ChartByRates/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByRates.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Tickets/ChartByRates/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByRates.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Tickets/ChartByTags/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByTags.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Tickets/ChartByTags/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByTags.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsChartByWaitTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Tickets/ChartByWaitTime/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByWaitTime.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Tickets/ChartByWaitTime/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.ChartByWaitTime.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2AnalyticsTicketsMessages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Analytics/Tickets/Messages/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.Messages.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Analytics/Tickets/Messages/Get.ts').components['schemas']['Admin_2.Methods.Analytics.Tickets.Messages.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAdmin2LogsSystemChecked: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Logs/System/Checked/Edit.ts').components['schemas']['Admin_2.Methods.Logs.System.Checked.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Logs/System/Checked/Edit.ts').components['schemas']['Admin_2.Methods.Logs.System.Checked.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2UsersInformerSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Informer/Subscriptions/Get.ts').components['schemas']['Admin_2.Methods.Users.Informer.Subscriptions.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Users/Informer/Subscriptions/Get.ts').components['schemas']['Admin_2.Methods.Users.Informer.Subscriptions.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAudit2AuditCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Checker/Go/Edit.ts').components['schemas']['Audit_2.Methods.Audit.Checker.Go.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Checker/Go/Edit.ts').components['schemas']['Audit_2.Methods.Audit.Checker.Go.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetAudit2AuditCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Checker/Price/Get.ts').components['schemas']['Audit_2.Methods.Audit.Checker.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Checker/Price/Get.ts').components['schemas']['Audit_2.Methods.Audit.Checker.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetAudit2AuditExportLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Export/Links/Get.ts').components['schemas']['Audit_2.Methods.Audit.Export.Links.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Export/Links/Get.ts').components['schemas']['Audit_2.Methods.Audit.Export.Links.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditExportSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Export/Summary/Get.ts').components['schemas']['Audit_2.Methods.Audit.Export.Summary.Get'];
            };
        };
        responses: {
            /** @description Файл отчета анализа сайта */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAudit2AuditLogActualError: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Log/ActualError/Get.ts').components['schemas']['Audit_2.Methods.Audit.Log.ActualError.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Log/ActualError/Get.ts').components['schemas']['Audit_2.Methods.Audit.Log.ActualError.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditLogChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Log/Chart/Get.ts').components['schemas']['Audit_2.Methods.Audit.Log.Chart.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Log/Chart/Get.ts').components['schemas']['Audit_2.Methods.Audit.Log.Chart.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditResultsExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Results/Export/Get.ts').components['schemas']['Audit_2.Methods.Audit.Results.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Results/Export/Get.ts').components['schemas']['Audit_2.Methods.Audit.Results.Export.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditResultsPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Audit/Results/Page/Get.ts').components['schemas']['Audit_2.Methods.Audit.Results.Page.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Audit/Results/Page/Get.ts').components['schemas']['Audit_2.Methods.Audit.Results.Page.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAudit2IndexingCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Indexing/Checker/Go/Edit.ts').components['schemas']['Audit_2.Methods.Indexing.Checker.Go.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Indexing/Checker/Go/Edit.ts').components['schemas']['Audit_2.Methods.Indexing.Checker.Go.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetAudit2IndexingCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Indexing/Checker/Price/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Checker.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Indexing/Checker/Price/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Checker.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetAudit2IndexingExportLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Indexing/Export/Links/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Export.Links.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Indexing/Export/Links/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Export.Links.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2IndexingExportToRepository: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Indexing/Export/ToRepository/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Export.ToRepository.Get'];
            };
        };
        responses: {
            /** @description Будет произведен редиркт на файл в хранилище */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAudit2IndexingSummaryChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Indexing/Summary/Chart/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Summary.Chart.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Indexing/Summary/Chart/Get.ts').components['schemas']['Audit_2.Methods.Indexing.Summary.Chart.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAudit2SitemapCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Sitemap/Checker/Go/Edit.ts').components['schemas']['Audit_2.Methods.Sitemap.Checker.Go.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Sitemap/Checker/Go/Edit.ts').components['schemas']['Audit_2.Methods.Sitemap.Checker.Go.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetAudit2SitemapCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Sitemap/Checker/Price/Get.ts').components['schemas']['Audit_2.Methods.Sitemap.Checker.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Sitemap/Checker/Price/Get.ts').components['schemas']['Audit_2.Methods.Sitemap.Checker.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    EditAudit2WatcherCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Watcher/Checker/Go/Edit.ts').components['schemas']['Audit_2.Methods.Watcher.Checker.Go.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Watcher/Checker/Go/Edit.ts').components['schemas']['Audit_2.Methods.Watcher.Checker.Go.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetAudit2WatcherCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Watcher/Checker/Price/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Checker.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Watcher/Checker/Price/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Checker.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetAudit2WatcherExportLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Watcher/Export/Links/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Export.Links.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Watcher/Export/Links/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Export.Links.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAudit2WatcherSummaryChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Audit_2/Methods/Watcher/Summary/Chart/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Summary.Chart.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Audit_2/Methods/Watcher/Summary/Chart/Get.ts').components['schemas']['Audit_2.Methods.Watcher.Summary.Chart.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrSnapshotsTop: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Apometr/Snapshots/Top/Get.ts').components['schemas']['Content_2.Methods.Apometr.Snapshots.Top.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Apometr/Snapshots/Top/Get.ts').components['schemas']['Content_2.Methods.Apometr.Snapshots.Top.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrTextCalendar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Apometr/Text/Calendar/Get.ts').components['schemas']['Content_2.Methods.Apometr.Text.Calendar.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Apometr/Text/Calendar/Get.ts').components['schemas']['Content_2.Methods.Apometr.Text.Calendar.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrTextUpdates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Apometr/Text/Updates/Get.ts').components['schemas']['Content_2.Methods.Apometr.Text.Updates.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Apometr/Text/Updates/Get.ts').components['schemas']['Content_2.Methods.Apometr.Text.Updates.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2ApometrUpdatesDates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Apometr/Updates/Dates/Get.ts').components['schemas']['Content_2.Methods.Apometr.Updates.Dates.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Apometr/Updates/Dates/Get.ts').components['schemas']['Content_2.Methods.Apometr.Updates.Dates.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddContent2JournalCourseCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Course/Certificates/Add.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Course/Certificates/Add.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    EditContent2JournalCourseCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Course/Certificates/Edit.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Course/Certificates/Edit.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalCourseCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Course/Certificates/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Course/Certificates/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalCourseChapters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Course/Chapters/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Chapters.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Course/Chapters/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Chapters.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    GetContent2JournalDictionaryArticlesByLetter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Dictionary/ArticlesByLetter/Get.ts').components['schemas']['Content_2.Methods.Journal.Dictionary.ArticlesByLetter.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Dictionary/ArticlesByLetter/Get.ts').components['schemas']['Content_2.Methods.Journal.Dictionary.ArticlesByLetter.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    GetContent2JournalDictionaryWordOfday: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Dictionary/WordOfday/Get.ts').components['schemas']['Content_2.Methods.Journal.Dictionary.WordOfday.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Dictionary/WordOfday/Get.ts').components['schemas']['Content_2.Methods.Journal.Dictionary.WordOfday.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Pages.ts').components['schemas']['Models.Pages'];
                };
            };
        };
    };
    EditKeywords2CollectExtGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Keywords_2/Methods/Collect/Ext/Go/Edit.ts').components['schemas']['Keywords_2.Methods.Collect.Ext.Go.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Keywords_2/Methods/Collect/Ext/Go/Edit.ts').components['schemas']['Keywords_2.Methods.Collect.Ext.Go.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetKeywords2CollectExtPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Keywords_2/Methods/Collect/Ext/Price/Get.ts').components['schemas']['Keywords_2.Methods.Collect.Ext.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Keywords_2/Methods/Collect/Ext/Price/Get.ts').components['schemas']['Keywords_2.Methods.Collect.Ext.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetPositions2SearchersRegionsExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Regions/Export/Get.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddPositions2SearchersRegionsImport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Regions/Import/Add.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Import.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Searchers/Regions/Import/Add.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Import.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPositions2SearchersRegionsSort: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Positions_2/Methods/Searchers/Regions/Sort/Edit.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Sort.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Positions_2/Methods/Searchers/Regions/Sort/Edit.ts').components['schemas']['Positions_2.Methods.Searchers.Regions.Sort.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2TasksVolumesPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Tasks/Volumes/Price/Get.ts').components['schemas']['Projects_2.Methods.Tasks.Volumes.Price.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Tasks/Volumes/Price/Get.ts').components['schemas']['Projects_2.Methods.Tasks.Volumes.Price.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetProjects2TasksVolumesStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Projects_2/Methods/Tasks/Volumes/Status/Get.ts').components['schemas']['Projects_2.Methods.Tasks.Volumes.Status.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Projects_2/Methods/Tasks/Volumes/Status/Get.ts').components['schemas']['Projects_2.Methods.Tasks.Volumes.Status.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetSnapshots2CompetitorsChartExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/Competitors/Chart/Export/Get.ts').components['schemas']['Snapshots_2.Methods.Competitors.Chart.Export.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetSnapshots2CompetitorsExportToRepository: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/Competitors/Export/ToRepository/Get.ts').components['schemas']['Snapshots_2.Methods.Competitors.Export.ToRepository.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetSnapshots2HistoryExportToRepository: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Snapshots_2/Methods/History/Export/ToRepository/Get.ts').components['schemas']['Snapshots_2.Methods.History.Export.ToRepository.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    EditTickets2AdminTemplatesSort: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/Templates/Sort/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Sort.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/Templates/Sort/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Templates.Sort.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminTicketResourceAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tickets_2/Methods/Admin/Ticket/ResourceAdmin/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Ticket.ResourceAdmin.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tickets_2/Methods/Admin/Ticket/ResourceAdmin/Edit.ts').components['schemas']['Tickets_2.Methods.Admin.Ticket.ResourceAdmin.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTpvsr2StatExportGuestLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tpvsr_2/Methods/Stat/Export/GuestLinks/Get.ts').components['schemas']['Tpvsr_2.Methods.Stat.Export.GuestLinks.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tpvsr_2/Methods/Stat/Export/GuestLinks/Get.ts').components['schemas']['Tpvsr_2.Methods.Stat.Export.GuestLinks.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetTpvsr2StatExportReferrers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Tpvsr_2/Methods/Stat/Export/Referrers/Get.ts').components['schemas']['Tpvsr_2.Methods.Stat.Export.Referrers.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Tpvsr_2/Methods/Stat/Export/Referrers/Get.ts').components['schemas']['Tpvsr_2.Methods.Stat.Export.Referrers.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelUsers2ProfileBrandLogo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Brand/Logo/Del.ts').components['schemas']['Users_2.Methods.Profile.Brand.Logo.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Brand/Logo/Del.ts').components['schemas']['Users_2.Methods.Profile.Brand.Logo.Del.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditUsers2ProfileBrandLogo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Profile/Brand/Logo/Edit.ts').components['schemas']['Users_2.Methods.Profile.Brand.Logo.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Profile/Brand/Logo/Edit.ts').components['schemas']['Users_2.Methods.Profile.Brand.Logo.Edit.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddUsers2RanksPromocodeTwitter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Ranks/Promocode/Twitter/Add.ts').components['schemas']['Users_2.Methods.Ranks.Promocode.Twitter.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Ranks/Promocode/Twitter/Add.ts').components['schemas']['Users_2.Methods.Ranks.Promocode.Twitter.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2StatsAccountListMonth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Stats/Account/ListMonth/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.ListMonth.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Stats/Account/ListMonth/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.ListMonth.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2StatsAccountListProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Stats/Account/ListProjects/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.ListProjects.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Stats/Account/ListProjects/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.ListProjects.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2StatsAccountListPs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Stats/Account/ListPs/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.ListPs.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Stats/Account/ListPs/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.ListPs.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetUsers2StatsAccountPs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Stats/Account/Ps/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.Ps.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Users_2/Methods/Stats/Account/Ps/Get.ts').components['schemas']['Users_2.Methods.Stats.Account.Ps.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAdmin2ActionsPositionsHistoryCopy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Actions/Positions/History/Copy/Add.ts').components['schemas']['Admin_2.Methods.Actions.Positions.History.Copy.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Admin_2/Methods/Actions/Positions/History/Copy/Add.ts').components['schemas']['Admin_2.Methods.Actions.Positions.History.Copy.Add.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalCourseCertificatesByID: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Course/Certificates/ByID/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.ByID.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Course/Certificates/ByID/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.ByID.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2JournalCourseCertificatesImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Journal/Course/Certificates/Image/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.Image.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Content_2/Methods/Journal/Course/Certificates/Image/Get.ts').components['schemas']['Content_2.Methods.Journal.Course.Certificates.Image.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetInformer2PushSafariWebServiceAuthToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Informer_2/Methods/Push/Safari/WebService/AuthToken/Get.ts').components['schemas']['Informer_2.Methods.Push.Safari.WebService.AuthToken.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Informer_2/Methods/Push/Safari/WebService/AuthToken/Get.ts').components['schemas']['Informer_2.Methods.Push.Safari.WebService.AuthToken.Get.Exec'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetSystem2CommonTestsSpeedFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./System_2/Methods/Common/Tests/Speed/File/Get.ts').components['schemas']['System_2.Methods.Common.Tests.Speed.File.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
}
