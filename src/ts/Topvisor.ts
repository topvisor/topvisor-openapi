/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {  
    /** Фиксация события */
    "/add/analytics_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAnalytics2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление примечания */
    "/add/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление примечания */
    "/del/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование примечания */
    "/edit/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение примечаний */
    "/get/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение заархивированного приложения */
    "/get/app_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление комментария */
    "/add/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Удаление комментария
     * @description Удалять комментарии можно только в течение ограниченного времени
     *
     *     Админы могут удалять комментарии в любое время
     */
    "/del/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Изменение комментария
     * @description Изменять комментарий можно только в течение ограниченного времени
     */
    "/edit/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение комментариев
     * @description Возвращает набор комментариев со всеми подкомменатриями, limit, offset не виляют на получение вложенных комментариев
     */
    "/get/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Создать платежку и перейти к оплате
     * @description Возвратит id платежа, если указан параметр $return_id = true
     *
     *     Произведет редирект, если настроена форма оплаты на стороне платежной системы
     *
     *     Возвратит информацию о платеже, если ожидается вывод формы оплаты на сайте
     *
     *     При ошибке произведет редирект на страницу с инофрмацией об ошибке
     */
    "/add/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить список платежей */
    "/get/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Генерирует QR код по тексту
     * @description Возвращает изображение в формате data:image/png;base64
     */
    "/get/qr_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetQr2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление url */
    "/add/urls_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUrls2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение urls */
    "/edit/urls_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUrls2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка urls проекта */
    "/get/urls_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUrls2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение всех своих примечаний по всем проектам и сервисам */
    "/get/annotations_2/my/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAnnotations2My"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение данных подтверждения
     * @description Возвращает результат подтверждения в виде
     *     массива с сообщением (acceptAction),
     *     логической переменной (acceptEmail),
     *     null при неправильно введенном типе
     */
    "/get/app_2/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2Actions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить текст политики конфиденциальности */
    "/get/app_2/privacy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2Privacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение количества настроенных URL */
    "/get/audit_2/countUrls/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2CountUrls"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение отчета по проверке индексации
     * @description Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя)
     */
    "/get/audit_2/indexing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2Indexing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Применение наастроек Анализа сайта */
    "/edit/audit_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение настроек аудита */
    "/get/audit_2/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение результатов проверок радара
     * @description Отчет генерируется на основе объектов urls
     *
     *     Необходимо указать либо check_id1 и check_id2, либо checks_ids (вместе указывать нельзя)
     */
    "/get/audit_2/watcher/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2Watcher"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Редактирование статуса лайка для комментария
     * @description Возвращает результат редактирования статуса лайка
     */
    "/edit/comments_2/like/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditComments2Like"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить настройки автора */
    "/edit/content_2/authors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2Authors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных об авторе */
    "/get/content_2/authors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Authors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление задачи cron */
    "/add/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление задачи cron */
    "/del/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение задачи cron */
    "/edit/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение задач cron */
    "/get/cron_2/commands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetCron2Commands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка имен сервисов, в которых есть команды cron */
    "/get/cron_2/services/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetCron2Services"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Enum */
    "/get/example_2/array/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Array"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение текущего времени */
    "/get/example_2/custom/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Custom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Enum */
    "/get/example_2/enum/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Enum"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка проектов */
    "/get/example_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Создать Open API схемы и скачать в zip
     * @description В результате вернет zip файл в потоке вывода
     *
     *     @see https://editor.swagger.io/ Редактор Open API
     */
    "/get/openapi_2/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetOpenapi2Download"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Компании пользователя, через которых, были совершены платежи */
    "/get/payments_2/companies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2Companies"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Подписать контракт (только для админов) */
    "/edit/payments_2/contractSign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2ContractSign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить платежные реквизиты тарифа */
    "/edit/payments_2/nextRequisitesId/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2NextRequisitesId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправить заявка на подключение Тинькофф Бизнес */
    "/add/payments_2/urTinkoffCreateApplication/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPayments2UrTinkoffCreateApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Валидация домена для подтверждения оплаты Apple Pay (system = card_ap) */
    "/get/payments_2/validateMerchantCardAP/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2ValidateMerchantCardAP"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление сообщения к тикиту */
    "/add/tickets_2/messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2Messages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание тикета */
    "/add/tickets_2/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddTickets2Tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование тикета */
    "/edit/tickets_2/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2Tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка тикетов с сообщениями */
    "/get/tickets_2/tickets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTickets2Tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт urls в определенном формате */
    "/get/urls_2/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUrls2Export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Импортирование urls
     * @description Доступные поля для импорта:
     *     - url
     *     - sitemap
     *     - audit
     *     - indexing
     *     - watcher
     *     - tags
     */
    "/add/urls_2/import/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUrls2Import"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменение тегов */
    "/edit/urls_2/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditUrls2Tags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавить промокоды к достижению */
    "/add/admin_2/users/promocodes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2UsersPromocodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получить промокоды
     * @description В params хранится строка в формате:
     *     - {{ rank_id }}
     *     - {{ rank_id }},single_code - для многоразового кода
     */
    "/get/admin_2/users/promocodes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersPromocodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавить достижение */
    "/add/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить достижение */
    "/edit/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить достижения */
    "/get/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение сводки анализа сайта
     * @deprecated
     */
    "/get/audit_2/audit/browse/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditBrowse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение общей информации о проверках
     *     - только для проверки, которая не завершена
     *     - в ответе будут заменены значения кодов ответа на текущие: count_000, count_1xx, count_2xx, count_3xx, count_4xx, count_5xx
     *     - в ответе будет заменено значение count_pages и count_all на текущие
     *     - в ответ будет добавлены значения robot_step и robot_count_tasks_allм
     * @description test ci/cd
     */
    "/get/audit_2/audit/checks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditChecks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных css */
    "/get/audit_2/audit/css/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditCss"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт результатов проверки файла */
    "/get/audit_2/audit/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных изображений */
    "/get/audit_2/audit/images/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditImages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных js */
    "/get/audit_2/audit/js/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditJs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверенных ссылок */
    "/get/audit_2/audit/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных проверенных ресурсов */
    "/get/audit_2/audit/log/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLog"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение страниц, по которым был выполнен аудит */
    "/get/audit_2/audit/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditPages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки о выполненном аудите */
    "/get/audit_2/audit/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки страницы */
    "/get/audit_2/audit/summaryPage/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditSummaryPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Экспорт результатов индексации
     * @description Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя)
     */
    "/get/audit_2/indexing/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Создание гостевой ссылки на просмотр позиций
     * @description Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя)
     */
    "/get/audit_2/indexing/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки индексации */
    "/get/audit_2/indexing/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Построить отчет по одному URL
     * @description Отличия от get/audit_2/watcher:
     *     - отчет генерируется на основе объекта watcher_results, а не urls
     *     - параметры выбора периода отчета игнорируются
     *     - выбор прверок регулируется параметрами запроса filters, limit и offset
     */
    "/get/audit_2/watcher/byURL/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherByURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение проверок радара */
    "/get/audit_2/watcher/checks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherChecks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводки радара */
    "/get/audit_2/watcher/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отписаться от тарифа, оплаченного картой */
    "/edit/payments_2/tariff/delCard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffDelCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка оплаты тарифов: выставлять ли счета через диадок */
    "/edit/payments_2/tariff/nextToDiadoc/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffNextToDiadoc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сменить тариф со следующего месяца */
    "/edit/payments_2/tariff/setNext/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffSetNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование тикета (для админов) */
    "/edit/tickets_2/admin/ticket/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2AdminTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Пометка тикета как "прочитанный" для автора тикета или админов */
    "/edit/tickets_2/tickets/setReaded/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditTickets2TicketsSetReaded"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение URL к карте сайта по файлу robots.txt для указанного домена */
    "/get/urls_2/import/recognizeLinkSitemapXml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUrls2ImportRecognizeLinkSitemapXml"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Привязка email к аккаунту */
    "/add/users_2/join/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUsers2JoinEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * График с количеством подписок на рубрики с сегментцией по способам рассылки
     * @description График кешируется, первый запрос может выполняться дольше
     */
    "/get/admin_2/users/informer/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersInformerSubscriptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Запуск проверки аудита */
    "/edit/audit_2/audit/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2AuditCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение стоимости проверки аудита */
    "/get/audit_2/audit/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение гостевой ссылки на просмотр аудита позиций */
    "/get/audit_2/audit/export/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditExportLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт отчета Анализа сайта */
    "/get/audit_2/audit/export/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditExportSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение информации о текущей ошибке на роботе */
    "/get/audit_2/audit/log/actualError/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLogActualError"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение данных для графика
     * @deprecated
     */
    "/get/audit_2/audit/log/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditLogChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Экспорт результатов аудита
     * @deprecated
     */
    "/get/audit_2/audit/results/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditResultsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Результаты анализа страницы
     * @deprecated
     */
    "/get/audit_2/audit/results/page/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2AuditResultsPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку индексации */
    "/edit/audit_2/indexing/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2IndexingCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Полуение стоимости проверки индексации */
    "/get/audit_2/indexing/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение гостевой ссылки на просмотр индексации
     * @description Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя)
     */
    "/get/audit_2/indexing/export/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingExportLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Экспорт файла в хранилище */
    "/get/audit_2/indexing/export/toRepository/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingExportToRepository"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводок индексации для графика */
    "/get/audit_2/indexing/summary/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2IndexingSummaryChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку карты сайта */
    "/edit/audit_2/sitemap/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2SitemapCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Полуение стоимости проверки карты сайта */
    "/get/audit_2/sitemap/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2SitemapCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправка проектов на проверку радара */
    "/edit/audit_2/watcher/checker/go/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAudit2WatcherCheckerGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Полуение стоимости проверки радара */
    "/get/audit_2/watcher/checker/price/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherCheckerPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Создание гостевой ссылки на просмотр радара */
    "/get/audit_2/watcher/export/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherExportLinks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение сводок радара для графика */
    "/get/audit_2/watcher/summary/chart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAudit2WatcherSummaryChart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Фиксация события */  
        /** Категория */
        "Analytics_2.Methods.Add": {
            ec?: string | null;
            /** Дейсвтие */
            ea?: string | null;
            /** Ярлык в base64 */
            el?: string | null;
            /** ID пользователя */
            uid?: number | null;
            /** Хеш для уникализации события */
            hash_id?: number | null;
            /** Хэш для проверки подлинности события */
            hash?: number | null;
        };
        /** Тип массива: string[] */
        "TV.API.Types.StringArray": string[];
        /** Результат успешного API запроса */
        ResponseSuccess: {
            /**
             * Результат ответа API метода
             * @description Тип результата зависит от типа запроса и его настроек
             */
            errors?: null | null;
            /** Список ообщений, полученных при выполнении запроса */
            messages?: components["schemas"]["TV.API.Types.StringArray"] | null;
        };
        stdClass: Record<string, never>;
        /** Информация об ошибке */
        Error: {
            /**
             * Код ошибки
             * @description Код ошибки 0 - deprecated
             */
            code: number;
            /** Описание ошибки */
            string: string;
            /** Объект с дополнительной информацией */
            detail: components["schemas"]["stdClass"];
        };
        /** Список ошибок */
        Errors: components["schemas"]["Error"][];
        /** Результат API запроса с ошибкой */
        ResponseError: {
            /** При ошибке результат отсутствует */
            result?: null | null;
            /**
             * Список ошибок, полученных при выполнении запроса
             * @description @requires
             */
            errors: components["schemas"]["Errors"];
            /** Список ообщений, полученных при выполнении запроса */
            messages?: components["schemas"]["TV.API.Types.StringArray"] | null;
        };
        /** @enum {string} */
        "Annotations_2.Types.ServiceName": "positions" | "audit" | "watcher" | "indexing";
        /** Добавление примечания */
        "Annotations_2.Methods.Add": {
            /** ID проекта */
            project_id: number;
            /** Имя сервиса */
            service: components["schemas"]["Annotations_2.Types.ServiceName"];
            /** Идентификатор отчета в сервисе */
            target_id: string;
            /** Комментарий, если не указан, комментарий добавлен не будет */
            text: string;
        };
        /** Удаление примечания */
        "Annotations_2.Methods.Del": {
            /** ID примечания */
            id: number;
            /** ID проекта */
            project_id: number;
            /** Имя сервиса */
            service: components["schemas"]["Annotations_2.Types.ServiceName"];
        };
        /** Редактирование примечания */
        "Annotations_2.Methods.Edit": {
            /** ID примечания */
            id: number;
            /** ID проекта */
            project_id: number;
            /** Имя сервиса */
            service: components["schemas"]["Annotations_2.Types.ServiceName"];
            /**
             * Текст комментария
             * @description Если не текст указан, комментарий будет удален
             */
            text: string;
        };
        /**
         * Список полей объекта, которые надо вернуть в результате
         * @description Если запрос поддерижвает параметр fetch_style, формат ответа может быть разным, fields будет влиять на содержание данных в этом ответе
         *
         *     Использует поля модели
         *
         *     @see AbstractMethod::MODEL
         */
        fields: (string | number)[];
        /**
         * Список полей объекта, по которым необходимо выполнить сортировку
         * @description Поля могут быть строками или объектом: {name: string, direction: 'ASC' | 'DESC', orderValues: array}
         *
         *     Использует поля модели
         *
         *     @see AbstractMethod::MODEL
         */
        orders: (string | number)[];
        /**
         * Список фильтров по полям объекта
         * @description {name: string, operator: Field::AVAILABLE_OPERATORS, values: array}
         *
         *     Использует поля модели
         *
         *     Поля обязатлеьное, если $id не указан
         *
         *     @see AbstractMethod::MODEL
         *     @see Field::AVAILABLE_OPERATORS
         */
        filters: (string | number)[];
        /**
         * Id объекта, для фильтрации объектов по id
         * @description Только для моделей с полем id
         */
        id: number | null;
        /**
         * Количество объектов, которые необходимо получить в результате
         * @description Используется в паре с offset
         */
        limit: number | null;
        /**
         * Число объектов, которое необходимо пропустить при получении резальтата
         * @description Используется в паре с limit
         */
        offset: number;
        /**
         * Определяет формат результата: коллекция, объект, значение
         * @description Примеры:
         *     - fetchAll - получить коллекцию объектов
         *     - fetch - получить один объект
         *     - fetchColumn - получить свойсвто объекта
         *
         *     @see Selector::AVAILABLE_FETCH_STYLES
         *     @see Selector::execFetch() - см. реализацию
         */
        fetch_style: string | null;
        /** Получение примечаний */
        "Annotations_2.Methods.Get": {
            /** ID проекта */
            project_id: number;
            /** Имя сервиса */
            service: components["schemas"]["Annotations_2.Types.ServiceName"];
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Annotations": {
            id?: unknown;
            user_id?: unknown;
            project_id?: unknown;
            service?: unknown;
            target_id?: unknown;
            text?: unknown;
            create_time?: unknown;
        };
        /** Результаты пагинации */
        Pagination: {
            /**
             * Смещение для получения следующий порции данных
             * @description Вернется только в случае существования следующей порции
             */
            nextOffset?: number | null;
            /** Общее число результатов, без учета применения пагинации */
            total?: number | null;
        };
        /** Получение заархивированного приложения */
        "App_2.Methods.Get": Record<string, never>;
        /** @enum {string} */
        "TV.API.Types.Topvisor.Subdomain": "" | "journal";
        /** Добавление комментария */
        "Comments_2.Methods.Add": {
            subdomain: components["schemas"]["TV.API.Types.Topvisor.Subdomain"];
            /** Текст комментария */
            text: string;
            /** Адрес страницы (нельзя указывать совместно с reply_id) */
            page_url?: string | null;
            /** Привязать к комментарию с id = reply_id  (нельзя указывать совместно с page_url) */
            reply_id?: number | null;
        };
        /**
         * Удаление комментария
         * @description Удалять комментарии можно только в течение ограниченного времени
         *
         *     Админы могут удалять комментарии в любое время
         */
        "Comments_2.Methods.Del": {
            /** ID комментария */
            id: number;
        };
        /**
         * Изменение комментария
         * @description Изменять комментарий можно только в течение ограниченного времени
         */
        "Comments_2.Methods.Edit": {
            /** ID комментария */
            id: number;
            /** Текст комментария, не может быть пустой строкой */
            text: string;
        };
        /**
         * Получение комментариев
         * @description Возвращает набор комментариев со всеми подкомменатриями, limit, offset не виляют на получение вложенных комментариев
         */
        "Comments_2.Methods.Get": {
            subdomain: components["schemas"]["TV.API.Types.Topvisor.Subdomain"];
            /** Адрес страницы (нельзя указывать совместно с reply_id) */
            page_url?: string | null;
            /** Получить ответы на комменатрий с id = reply_id (нельзя указывать совместно с page_url) */
            reply_id?: number | null;
        };
        /** @enum {string} */
        "Payments_2.Types.System": "balance" | "card" | "card_ios" | "card_android" | "card_ap" | "card_gp" | "invoice" | "tinkoff_business" | "ap" | "ym" | "qw" | "sb" | "wm2" | "pp" | "pd" | "pd_invoice" | "rk";
        /** @enum {string} */
        "Payments_2.Types.Country": "RU" | "UA" | "BY" | "KZ" | "other";
        /**
         * Создать платежку и перейти к оплате
         * @description Возвратит id платежа, если указан параметр $return_id = true
         *
         *     Произведет редирект, если настроена форма оплаты на стороне платежной системы
         *
         *     Возвратит информацию о платеже, если ожидается вывод формы оплаты на сайте
         *
         *     При ошибке произведет редирект на страницу с инофрмацией об ошибке
         */
        "Payments_2.Methods.Add": {
            /** Платежная система */
            system: components["schemas"]["Payments_2.Types.System"];
            /** Сумма платежа */
            sum: number;
            /** Страна реквизитов */
            country: components["schemas"]["Payments_2.Types.Country"];
            /** Номер договора/оферты для платежа */
            requisites_id: string;
            /** ID тарифа (если указан, сумма будет переопределена) */
            tariff_id: number;
            /**
             * Число предоплаченных месяцев по тарифу
             * @description Примеры:
             *     - при оплате тарифа на 1 месяц должен быть равен 1
             *     - при оплате тарифа на 2 месяца должен быть равен 2
             */
            tariff_count_month: number;
            /** Комментарий */
            comment: string;
            /** Комментарий */
            items: (string | number)[];
            /** ID карты в системе оплаты для привязки */
            card_id: string;
            /** Пробрасываемые данные в redirectToPay() для FinishAuthorize Tinkoff для Apple Pay и Google Pay */
            payment_data: string;
            /** Email (указывается, если у пользователя не привязан email)
             *     TODO: Добавить тип Email */
            email?: string | null;
            /** Телефон (указывается для определенных систем оплаты) */
            phone: string;
            /** Флаг - отменяемый платеж, используется для сохранения данных банковской карты пользователя, сумма платежа вернется пользователю после отмены */
            is_cancelable: boolean;
            /** Возвратить id платежа, не выполняя redirectToPay() */
            return_id: boolean;
        };
        /** Получить список платежей */
        "Payments_2.Methods.Get": {
            /** Добавить в результаты is_domains_serv+ices_provided, означающий, что были оказаны услуги доменного регистратора */
            include_is_domains_services_provided: number;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Payments": {
            "COUNT(*)"?: unknown;
            "HAS_DOC()"?: unknown;
            id?: unknown;
            external_id?: unknown;
            user_id?: unknown;
            system?: unknown;
            requisites_id?: unknown;
            data?: unknown;
            sum?: unknown;
            currency?: unknown;
            status?: unknown;
            recurrent_type?: unknown;
            tariff_id?: unknown;
            tariff_count_month?: unknown;
            date?: unknown;
            date_month?: unknown;
            date_finished?: unknown;
            date_month_finished?: unknown;
            fromBase64Data?: unknown;
        };
        /** @enum {integer} */
        "Qr_2.Types.TplN": 0 | 1 | 2;
        /**
         * Генерирует QR код по тексту
         * @description Возвращает изображение в формате data:image/png;base64
         */
        "Qr_2.Methods.Get": {
            /** Кодируемый текст */
            text: string;
            /**
             * Кодируемый текст
             * @description - 0 - черно-белый
             *     - 1 - шашечки
             *     - 2 - группы с закруглениями
             */
            tpl_n: components["schemas"]["Qr_2.Types.TplN"];
            /** Использовать ли брендированное лого */
            use_brand: boolean;
            /** Использовать ли цвета из лого */
            use_logo_colors: boolean;
            /** Использовать указанный цвет, цвет задается массивом из 3 элементов [r, g, b] */
            color?: (string | number)[] | null;
            /**
             * Размер точек QR кода в пикселях
             * @default 4
             */
            point_size: number;
        };
        /**
         * Краткий URL в punycode, не может содержать UTF-символы:
         *     - без схемы
         *     - без "www." в домене
         *     - без слешей на конце
         *     - без "<" и ">"
         * @description Будет проивзедено автоматическое приведение к формату
         *
         *     Разрешен ввод строй строки, для удаления значения url
         */
        "TV.API.Types.Url": string;
        /**
         * Флаг активности
         * @enum {integer}
         */
        "Urls_2.Types.Flag": -1 | 0 | 1 | 2;
        /**
         * Доступные теги
         * @enum {string}
         */
        "Tags_2.Types.Tag": "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20";
        /**
         * Массив номеров тегов
         * @description Тип массива Tags[]
         *
         *     @see Tags_2\Types\Tag
         */
        "Tags_2.Types.Tags": components["schemas"]["Tags_2.Types.Tag"][];
        /** ID проекта */
        project_id: number;
        /** Добавление url */
        "Urls_2.Methods.Add": {
            /** URL соответствующий домену проекта */
            url: components["schemas"]["TV.API.Types.Url"];
            /** Флаг активности в карте сайта
             *     - 1 - присутствовал в прошлых версиях карты сайта */
            sitemap?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в аудите */
            audit?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в радаре */
            indexing?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в индексации */
            watcher?: components["schemas"]["Urls_2.Types.Flag"] | null;
            tags?: components["schemas"]["Tags_2.Types.Tags"] | null;
            project_id: components["schemas"]["project_id"];
        };
        "Models.Urls": {
            "COUNT(*)"?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            "WATCHER_HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            id?: number;
            url?: string | null;
            project_id?: number | null;
            sitemap?: unknown;
            audit?: unknown;
            watcher?: unknown;
            indexing?: unknown;
            tags?: unknown;
            sitemap_lastmod?: unknown;
            sitemap_changefreq?: unknown;
            sitemap_priority?: unknown;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "searcher_key"
             *       ]
             *     } */
            indexing_data?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "date",
             *         "searcher_key"
             *       ]
             *     } */
            indexing_alert?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_http_codes?: (string | number)[] | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_http_codes_changed?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_redirects?: (string | number)[] | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_h1?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_h1_changed?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_title?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_title_changed?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_description?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_description_changed?: number | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_content?: string | null;
            /** @example {
             *       "need set qualifiers": [
             *         "check_id"
             *       ]
             *     } */
            watcher_content_changed?: number | null;
        };
        /** Изменение urls */
        "Urls_2.Methods.Edit": {
            /** Флаг активности в карте сайта
             *     - 1 - присутствовал в прошлых версиях карты сайта */
            sitemap?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в аудите */
            audit?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в радаре */
            indexing?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в индексации */
            watcher?: components["schemas"]["Urls_2.Types.Flag"] | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            project_id: components["schemas"]["project_id"];
        };
        /** Получение списка urls проекта */
        "Urls_2.Methods.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        /** Получение всех своих примечаний по всем проектам и сервисам */
        "Annotations_2.Methods.My.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /**
         * Получение данных подтверждения
         * @description Возвращает результат подтверждения в виде
         *     массива с сообщением (acceptAction),
         *     логической переменной (acceptEmail),
         *     null при неправильно введенном типе
         */
        "App_2.Methods.Actions.Get": {
            /** Email пользователя */
            email: string;
            /** Код для генерации ссылки подтверждения */
            code: string;
            /**
             * Тип подтверждения
             * @default acceptAction
             */
            type_action: string;
        };
        /** @enum {string} */
        "TV.API.Types.Lang": "ru" | "en";
        /** Получить текст политики конфиденциальности */
        "App_2.Methods.Privacy.Get": {
            /** Язык страницы */
            lang?: components["schemas"]["TV.API.Types.Lang"] | null;
        };
        "Controller_2.Objects.Location": Record<string, never>;
        "Controller_2.Objects.OpenGraph": Record<string, never>;
        "Controller_2.Objects.Page.Options": {
            title: string;
            description: string;
            keywords: string;
            noindex: boolean;
            canonical: string;
            alternates: (string | number)[];
        };
        "Controller_2.Objects.Page.Article": {
            /** @default module */
            type: string;
            duration?: string | null;
            word_count?: string | null;
            htmlRaw: string;
            url: string;
            parent_url: string;
            publish_time?: string | null;
            h1: string;
            description?: string | null;
            menu_name?: string | null;
            intro?: string | null;
            html: string;
            image: string;
            tags: (string | number)[];
            count_views: number;
            count_unique_views?: number | null;
            count_likes: number;
            count_comments?: number | null;
            theme: string;
            noindex: boolean;
            quiz_id: string;
            /** @default ACTIVE */
            state: string;
            rubric_name: string;
            user_id: number;
            user_name?: string | null;
            user_description: string;
            user_avatar: string;
            view: number;
            like: number;
            bookmark: string;
            bookmark_author: string;
            author_alias: string;
        };
        "Tpl.Core.SecondMenu": Record<string, never>;
        "Tpl.Core.LeftMenu": {
            items: (string | number)[];
        };
        "Controller_2.Objects.Sites.Site": Record<string, never>;
        /**
         * Движок работы с шаблонизатором
         * @description Является неотъемлемой частью Page
         */
        "Controller_2.Objects.TplEngine": Record<string, never>;
        "Controller_2.Objects.Page": {
            location: components["schemas"]["Controller_2.Objects.Location"];
            openGraph: components["schemas"]["Controller_2.Objects.OpenGraph"];
            options: components["schemas"]["Controller_2.Objects.Page.Options"];
            article: components["schemas"]["Controller_2.Objects.Page.Article"];
            secondMenu: components["schemas"]["Tpl.Core.SecondMenu"];
            leftMenu: components["schemas"]["Tpl.Core.LeftMenu"];
            params: (string | number)[];
            site: components["schemas"]["Controller_2.Objects.Sites.Site"];
            subdomain: string;
            langContext: string;
            langUrl: string;
            modUrl: string;
            mod: string;
            subMod: string;
            /** @default regular */
            theme: string;
            jsonLDs: (string | number)[];
            htmlAttributes: (string | number)[];
            logo: string;
            redirect: string;
            /** @default 302 */
            redirectCode: number;
            tplEngine: components["schemas"]["Controller_2.Objects.TplEngine"];
            tplStaticPath: string;
            tplStatic: string;
            tplStaticRendered: string;
            /** @default templates/pages/content.php */
            tplPath: string;
            tplRendered: string;
            tplSiteRendered: string;
            data: (string | number)[];
            rightsLabels: (string | number)[];
            isFullSize: boolean;
            showFooter: boolean;
            isAdaptive: boolean;
            additionalHeadCode: string;
            v: string;
            vJS: string;
        };
        /**
         * Модуль аудита
         * @enum {string}
         */
        "Audit_2.Types.Type": "audit" | "indexing" | "sitemap" | "watcher";
        /** Получение количества настроенных URL */
        "Audit_2.Methods.CountUrls.Get": {
            audit_type: components["schemas"]["Audit_2.Types.Type"];
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Id поисковой системы для индексации
         * @enum {string}
         */
        "Audit_2.Types.Indexing.SearcherKey": "0" | "1" | "5" | "6";
        /** Id поисковых систем для индексации */
        "Audit_2.Types.Indexing.SearcherKeys": components["schemas"]["Audit_2.Types.Indexing.SearcherKey"][];
        /**
         * Дата
         * @example 2000-01-01
         */
        "TV.API.Types.Date": string;
        /**
         * Тип диапазона индексации
         * @enum {integer}
         */
        "Audit_2.Types.Indexing.Export.TypeRange": 0 | 2 | 3 | 4 | 7 | 100;
        /**
         * Получение отчета по проверке индексации
         * @description Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя)
         */
        "Audit_2.Methods.Indexing.Get": {
            searchers_keys: components["schemas"]["Audit_2.Types.Indexing.SearcherKeys"];
            /**
             * Список полей индексации, которые необъодимо получить
             * @description См. поля indexing_* в объекте Urls
             * @default [
             *       "data"
             *     ]
             */
            indexing_fields: (string | number)[];
            /** Вернуть ли заголовки отчета */
            show_headers: boolean;
            /** Вернуть ли суммарное количество страниц в индексе по URL */
            show_counts_indexing: boolean;
            /** Вернуть ли даты проверок */
            show_exists_dates: boolean;
            /**
             * Фильтр по изменениям в указанной ПС в указанную дату
             * @description Формат записи: `{{ date }}:{{ searcher_key }}`
             */
            filter_by_alert: string;
            /** Произвольные даты без использования диапазона */
            dates?: (string | number)[] | null;
            /** Дата начала диапазона */
            date1?: components["schemas"]["TV.API.Types.Date"] | null;
            /** Дата окончания диапазона */
            date2?: components["schemas"]["TV.API.Types.Date"] | null;
            /**
             * Период в днях
             * @default 7
             */
            periodDays: number;
            /**
             * Тип диапазона дат
             * @default 7
             */
            type_range: components["schemas"]["Audit_2.Types.Indexing.Export.TypeRange"];
            /**
             * Количество дней в диапазоне
             * @default 60
             */
            count_dates: number;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Тип отчета радара
         * @enum {string}
         */
        "Audit_2.Types.Settings.WatcherType": "title" | "description" | "h1" | "content";
        /** Типы отчетов радара */
        "Audit_2.Types.Settings.WatcherTypes": components["schemas"]["Audit_2.Types.Settings.WatcherType"][];
        /**
         * Регулярное выражение
         * @description Пустое значение разрешено
         *
         *     Управляющие символы "/" в начале и в конце строки будут удалены
         *
         * @example /^year_(\d\d\d\d)$/
         */
        "TV.API.Types.RegExp": string;
        /**
         * Местоположение сервера для выполнения задач инструментов аудита
         * @enum {string}
         */
        "Audit_2.Types.Settings.ServerLocation": "EASTERN_EUROPE" | "WESTERN_EUROPE";
        /** Применение наастроек Анализа сайта */
        "Audit_2.Methods.Settings.Edit": {
            /**
             * User-Agent (аудит)
             * @description Можно указать id устройства
             *
             *     @see Audit_2\Types\Settings\Device
             */
            audit_user_agent?: string | null;
            /** Сохранять куки между запросами (аудит) */
            audit_use_cookie?: boolean | null;
            /** Проверять ссылки (аудит) */
            audit_scan_links?: boolean | null;
            /** Проверять изображения (аудит) */
            audit_scan_images?: boolean | null;
            /** Проверять JS (аудит) */
            audit_scan_js?: boolean | null;
            /** Проверять css (аудит) */
            audit_scan_css?: boolean | null;
            /** Ключ api для https://developers.google.com/speed/docs/insights/v5/get-started (аудит) */
            audit_api_key?: string | null;
            /** Паузы между проверками страниц сайта (аудит) */
            audit_page_delay?: number | null;
            /** Паузы между првоерками ресурсов страниц сайта (аудит) */
            audit_resource_delay?: number | null;
            /** Дополнитлеьные Cookies (аудит) */
            audit_cookies?: string | null;
            /** Использовать ли при запуске аудита автоматический сбор URL (аудит) */
            audit_auto_collect_pages?: boolean | null;
            /** Лимит страниц при автоматическом проходе по сайту (аудит) */
            audit_auto_collect_pages_limit?: number | null;
            /** Страница, с которой начинается автоматический сбор URL (аудит) */
            audit_auto_collect_pages_start_url?: components["schemas"]["TV.API.Types.Url"] | null;
            /** Поисковые системы (индексация) */
            indexing_searchers_keys?: components["schemas"]["Audit_2.Types.Indexing.SearcherKeys"] | null;
            /**
             * User-Agent (радар)
             * @description Можно указать id устройства
             *
             *     @see Audit_2\Types\Settings\Device
             */
            watcher_user_agent?: string | null;
            watcher_max_redirects?: number | null;
            /** Типы отчетов, которые необходимо построить (радар) */
            watcher_types?: components["schemas"]["Audit_2.Types.Settings.WatcherTypes"] | null;
            /**
             * Регулярное выражение для сбора контента (радар)
             * @description Если не указано, будут ипользоваться теги разметки
             *
             *     @see https://topvisor.com/support/watcher/settings/#tags
             */
            watcher_regexp?: components["schemas"]["TV.API.Types.RegExp"] | null;
            /** Вырезать из кода страницы javascript (радар) */
            watcher_ignore_js?: boolean | null;
            /** Вырезать из результатов html-тэги (радар) */
            watcher_strip_tags_from_result?: boolean | null;
            /** Дополнитлеьные cookies (радар) */
            watcher_cookies?: string | null;
            server_location?: components["schemas"]["Audit_2.Types.Settings.ServerLocation"] | null;
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Имя настройки для интсрумента аудита
         * @enum {string}
         */
        "Audit_2.Types.Settings.FieldName": "audit_user_agent" | "audit_use_cookie" | "audit_cookies" | "audit_scan_links" | "audit_scan_images" | "audit_scan_js" | "audit_scan_css" | "audit_api_key" | "audit_page_delay" | "audit_resource_delay" | "audit_auto_collect_pages" | "audit_auto_collect_pages_limit" | "audit_auto_collect_pages_start_url" | "indexing_searchers_keys" | "watcher_user_agent" | "watcher_cookies" | "watcher_max_redirects" | "watcher_types" | "watcher_regexp" | "watcher_ignore_js" | "watcher_strip_tags_from_result" | "server_location";
        /** Имена настроек для инструментов аудита */
        "Audit_2.Types.Settings.FieldNames": components["schemas"]["Audit_2.Types.Settings.FieldName"][];
        /** Получение настроек аудита */
        "Audit_2.Methods.Settings.Get": {
            fields: components["schemas"]["Audit_2.Types.Settings.FieldNames"];
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Тип диапазона радара
         * @enum {integer}
         */
        "Audit_2.Types.Watcher.TypeRange": 0 | 2 | 3 | 4 | 7 | 100;
        /**
         * Тип проверки радара
         * @enum {string}
         */
        "Audit_2.Types.Watcher.Type": "http_codes" | "redirects" | "h1" | "title" | "description" | "content";
        /**
         * Добавить в результат различия данных
         * @enum {integer}
         */
        "Audit_2.Types.Watcher.ShowDiff": 0 | 1 | 2 | 3;
        /**
         * Получение результатов проверок радара
         * @description Отчет генерируется на основе объектов urls
         *
         *     Необходимо указать либо check_id1 и check_id2, либо checks_ids (вместе указывать нельзя)
         */
        "Audit_2.Methods.Watcher.Get": {
            /** ID проверок в произвольном порядке */
            checks_ids?: (string | number)[] | null;
            /** ID проверки начала диапазона */
            check_id1?: number | null;
            /** ID проверки конца диапазона */
            check_id2?: number | null;
            /** @default 7 */
            type_range: components["schemas"]["Audit_2.Types.Watcher.TypeRange"];
            /**
             * Максимальное число возвращаемых проверок (не более 60)
             * @default 60
             */
            count_ids: number;
            watcher_type: components["schemas"]["Audit_2.Types.Watcher.Type"];
            /**
             * Выбор столбцов данных с результатами проверки
             * @default [
             *       "http_codes",
             *       "redirects"
             *     ]
             */
            watcher_fields: (string | number)[];
            /** Добавить в результат заголовки отчета */
            show_headers: boolean;
            show_diff: components["schemas"]["Audit_2.Types.Watcher.ShowDiff"];
            /** Добавить в результат количество проверок */
            show_counts_watcher: boolean;
            project_id: components["schemas"]["project_id"];
            fields: components["schemas"]["fields"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            orders: components["schemas"]["orders"];
            offset: components["schemas"]["offset"];
        };
        /**
         * Редактирование статуса лайка для комментария
         * @description Возвращает результат редактирования статуса лайка
         */
        "Comments_2.Methods.Like.Edit": {
            /** Id комментария */
            id: number;
            /** Установка лайка
             *     - 0: снять лайк
             *     - 1: поставить лайк */
            like: boolean;
        };
        /** Изменить настройки автора */
        "Content_2.Methods.Authors.Edit": {
            /**
             * Имя для url страницы автора
             * @description Только латинские буквы, цифры и символ дефиса
             */
            alias?: string | null;
            /** Промо текст */
            promo_text?: string | null;
            /** Текс для промо кнопки */
            promo_label?: string | null;
            /** Ссылка для промо кнопки */
            promo_link?: components["schemas"]["TV.API.Types.Url"] | null;
            /** Отображать ли автора в списке авторов */
            show_in_author_list?: boolean | null;
        };
        /** Получение данных об авторе */
        "Content_2.Methods.Authors.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Content.Authors": {
            "IS_ACTIVE()"?: number | null;
            user_id?: number | null;
            alias?: string | null;
            promo_text?: string | null;
            promo_label?: string | null;
            promo_link?: string | null;
            count_pages?: number | null;
            count_views?: number | null;
            count_unique_views?: string | null;
            count_likes?: number | null;
            show_in_author_list?: number | null;
            user_site?: string | null;
            user_name?: string | null;
            user_avatar?: string | null;
            user_description?: string | null;
            bookmark_author?: number | null;
        };
        /**
         * День недели, в который должен производиться запуск cron
         * @enum {string}
         */
        "Cron_2.Types.Day": "1" | "2" | "3" | "4" | "5" | "6" | "7";
        /** Дни недели, в которые должен производиться запуск cron */
        "Cron_2.Types.Days": components["schemas"]["Cron_2.Types.Day"][];
        /**
         * Час в который должен производиться запуск cron
         * @description Пустое значение зарезервированно для запуска cron каждый час
         *
         *     Значение должно находиться в диапазоне от 0 до 23 включительно
         */
        "Cron_2.Types.Hour": string;
        /**
         * Минута или интервал в минутах в который должен производиться запуск cron
         * @description Значение должно находится в диапазоне от 0 до 59 включительно
         *
         *     Если значение является интервалом, в начало ставится символ '*'
         */
        "Cron_2.Types.Minute": string;
        /** Имя команды cron */
        command: string;
        /** Добавление задачи cron */
        "Cron_2.Methods.Commands.Add": {
            /** Описание задачи */
            description: string;
            days: components["schemas"]["Cron_2.Types.Days"];
            hh: components["schemas"]["Cron_2.Types.Hour"];
            i: components["schemas"]["Cron_2.Types.Minute"];
            /** Статус активности задачи */
            on: boolean;
            command: components["schemas"]["command"];
        };
        "Models.CronCommands": {
            "SERVICE()"?: unknown;
            command?: string | null;
            description?: string | null;
            days?: string | null;
            hh?: string | null;
            i?: string | null;
            on?: number | null;
            task_create_time?: unknown;
            task_start_time?: unknown;
            task_status?: string | null;
        };
        /** Удаление задачи cron */
        "Cron_2.Methods.Commands.Del": {
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            command: components["schemas"]["command"];
        };
        /** Изменение задачи cron */
        "Cron_2.Methods.Commands.Edit": {
            /** Описание задачи */
            description?: string | null;
            days?: components["schemas"]["Cron_2.Types.Days"] | null;
            hh?: components["schemas"]["Cron_2.Types.Hour"] | null;
            i?: components["schemas"]["Cron_2.Types.Minute"] | null;
            /** Статус активности задачи */
            on?: boolean | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            command: components["schemas"]["command"];
        };
        /** Получение задач cron */
        "Cron_2.Methods.Commands.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** Получение списка имен сервисов, в которых есть команды cron */
        "Cron_2.Methods.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /**
         * Тип массива: int
         * @description Принимает: Любые целые числа и числа в строках
         *
         *     Хранит: int
         */
        "TV.API.Types.IntArray": number[];
        /**
         * Тип массива: boolean
         * @description Принимает: 0|1|false|true
         *
         *     Хранит: false|true
         */
        "TV.API.Types.BoolArray": boolean[];
        /** @enum {integer} */
        "Example_2.Types.Number": 1 | 2 | 3;
        /**
         * Тип: enum
         * @description Принимает: 0|1|false|true
         *
         *     Хранит: false|true
         */
        "Example_2.Types.EnumNumberArray": components["schemas"]["Example_2.Types.Number"][];
        /** Метод с примерами параметров типа Enum */
        "Example_2.Methods.Array.Get": {
            ints: components["schemas"]["TV.API.Types.IntArray"];
            strings: components["schemas"]["TV.API.Types.StringArray"];
            booleans: components["schemas"]["TV.API.Types.BoolArray"];
            enum_numbers: components["schemas"]["Example_2.Types.EnumNumberArray"];
        };
        /** Получение текущего времени */
        "Example_2.Methods.Custom.Get": {
            /**
             * Формат даты
             * @description Не обязательный параметр строкового типа со значением по умолчанию
             *
             *     Можно не указывать, но в exec() он не может быть пустым
             * @default Y-m-d H:i:s
             */
            format: string;
        };
        /** @enum {string} */
        "Example_2.Types.Letter": "a" | "b" | "c";
        /** Метод с примерами параметров типа Enum */
        "Example_2.Methods.Enum.Get": {
            number?: components["schemas"]["Example_2.Types.Number"] | null;
            number2: components["schemas"]["Example_2.Types.Number"];
            letter: components["schemas"]["Example_2.Types.Letter"];
        };
        /** Получение списка проектов */
        "Example_2.Methods.Projects.Get": {
            /**
             * Имя проекта
             * @description Используется для фильтрации по имени проекта, см. self::exec()
             *
             *     Не обязательный параметр метода строкового типа
             */
            name?: string | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Projects": {
            "COUNT(*)"?: unknown;
            "IS_YOUTUBE()"?: unknown;
            "IS_APP_STORE()"?: unknown;
            "IS_GOOGLE_PLAY()"?: unknown;
            "GEN_SEARCH_STRING()"?: unknown;
            id?: unknown;
            user_id?: unknown;
            name?: string | null;
            url?: unknown;
            date?: unknown;
            last_view?: unknown;
            folder_id?: number | null;
            folder_name?: unknown;
            site?: unknown;
            update?: unknown;
            status_positions?: string | null;
            positions_time?: unknown;
            positions_date?: unknown;
            positions_percent?: unknown;
            status_positions_time?: unknown;
            status_positions_date?: unknown;
            status_positions_percent?: unknown;
            status_positions_by_keywords?: unknown;
            status_volumes?: unknown;
            status_claster?: unknown;
            status_audit?: unknown;
            status_audit_time?: unknown;
            status_audit_percent?: unknown;
            status_watcher?: unknown;
            status_watcher_percent?: unknown;
            status_indexing?: unknown;
            status_indexing_percent?: unknown;
            status_sitemap?: unknown;
            status_sitemap_percent?: unknown;
            status_urlsUpdater?: unknown;
            on?: unknown;
            subdomains?: unknown;
            filter?: unknown;
            auto_correct?: unknown;
            with_snippets?: unknown;
            do_snapshots?: unknown;
            do_snapshots_with_snippets?: unknown;
            report_last_time?: unknown;
            common_traffic?: unknown;
            guest_link_right?: unknown;
            count_keywords?: unknown;
            right?: unknown;
            ord?: unknown;
            favorite?: unknown;
            tags?: unknown;
            user_email?: unknown;
            user_currency?: unknown;
            broker_count_campaigns?: unknown;
            broker_count_banners?: unknown;
            broker_count_banners_off?: unknown;
            domain_expire?: unknown;
            ssl_expire?: unknown;
            competitor?: unknown;
            competitor_ord?: unknown;
            pos_summary_up?: unknown;
            pos_summary_stay?: unknown;
            pos_summary_down?: unknown;
            pos_summary_avg?: unknown;
            pos_summary_visibility?: unknown;
        };
        /**
         * Создать Open API схемы и скачать в zip
         * @description В результате вернет zip файл в потоке вывода
         *
         *     @see https://editor.swagger.io/ Редактор Open API
         */
        "OpenAPI_2.Methods.Download.Get": {
            /**
             * Формат схемы Open API, json или yaml
             * @default json
             */
            format: string;
        };
        /** Компании пользователя, через которых, были совершены платежи */
        "Payments_2.Methods.Companies.Get": Record<string, never>;
        /** Подписать контракт (только для админов) */
        "Payments_2.Methods.ContractSign.Edit": {
            /** Номер договора/оферты для платежа */
            requisites_id: string;
            /** Флаг обозначающий подписан ли контракт */
            signed: boolean;
        };
        /** Изменить платежные реквизиты тарифа */
        "Payments_2.Methods.NextRequisitesId.Edit": {
            /** ID следующего запроса */
            next_requisites_id: string;
        };
        /** Отправить заявка на подключение Тинькофф Бизнес */
        "Payments_2.Methods.UrTinkoffCreateApplication.Add": Record<string, never>;
        /** Валидация домена для подтверждения оплаты Apple Pay (system = card_ap) */
        "Payments_2.Methods.ValidateMerchantCardAP.Get": {
            /** URL для запроса к Apple Pay */
            validation_url: string;
        };
        /** Добавление сообщения к тикиту */
        "Tickets_2.Methods.Messages.Add": {
            /** Id тикета */
            ticket_id: number;
            /** Текст сообщения */
            text: string;
            /** Не проводить рассылку уведомлений */
            is_silent: boolean;
        };
        /**
         * Откуда поступил тикет
         * @enum {string}
         */
        "Tickets_2.Types.Tickets.Type": "system" | "other" | "email" | "ios" | "vk" | "chrome" | "twitter" | "facebook" | "telegram" | "android" | "guest";
        /**
         * E-mail
         * @example name@example.com
         */
        "TV.API.Types.Email": string;
        /** Создание тикета */
        "Tickets_2.Methods.Tickets.Add": {
            /** Текст тикета */
            text: string;
            /** @default system */
            type: components["schemas"]["Tickets_2.Types.Tickets.Type"];
            /** Язык тикета, нужен для подгрузки правильного языка в ответных письмах через почту */
            lang?: components["schemas"]["TV.API.Types.Lang"] | null;
            /** Данные среды пользователя */
            user_data?: (string | number)[] | null;
            /**
             * URL страницы, с которой отправлен тикет
             * @description Не испоьзуется, если указан user_data
             */
            resource?: string | null;
            /** Не проводить рассылку уведомлений */
            is_silent: boolean;
            /** Необходим только для незарегистрированных пользователей */
            email?: components["schemas"]["TV.API.Types.Email"] | null;
            /**
             * Id пользователя внутри социальной сети, из которой был отправлен тикет
             * @description Может быть в любом виде
             */
            social_user_id: string;
            /**
             * Данные для авторизации в сервисе-конкуренте для переноса проектов
             * @description Недокументированный параметр
             */
            secret?: string | null;
            /**
             * Номер задачи redmine, связанной с тикетом
             * @description Недокументированный параметр
             */
            task_id: number;
        };
        /** Редактирование тикета */
        "Tickets_2.Methods.Tickets.Edit": {
            /** Флаг того, что тикет закрыт */
            status?: boolean | null;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение списка тикетов с сообщениями */
        "Tickets_2.Methods.Tickets.Get": {
            fields_messages?: (string | number)[] | null;
            /** Добавить в результат данные пользователей, написавших сообщения в тикеты */
            show_messages_users: boolean;
            /** Добавить в результат данные о том, что пишет собеседник */
            show_writings: boolean;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        "Models.Tickets": {
            "REQUISITES()"?: unknown;
            "LAST_MESSAGE_TEXT()"?: unknown;
            "LAST_MESSAGE_USER_ID()"?: unknown;
            "READED(0)"?: unknown;
            "READED(1)"?: unknown;
            id?: unknown;
            user_id?: unknown;
            social_user_id?: unknown;
            type?: unknown;
            text?: unknown;
            create?: unknown;
            time?: unknown;
            status?: unknown;
            lang?: unknown;
            email?: unknown;
            user_data?: unknown;
            manager_id?: unknown;
            owner_readed?: unknown;
            answerer_readed?: unknown;
            admin_writing?: unknown;
            task_id?: unknown;
            tags?: unknown;
            rate?: unknown;
            rate_comment?: unknown;
            rate_time?: unknown;
            admin_comment?: unknown;
            "VS_USER_IS_ONLINE()"?: unknown;
            vs_user_name?: unknown;
            vs_user_email?: unknown;
            vs_user_avatar?: unknown;
            vs_user_lastactive?: unknown;
            social_nickname?: unknown;
            social_network?: unknown;
            social_last_message_time?: unknown;
            social_name?: unknown;
            social_type?: unknown;
            social_post_id?: unknown;
            social_reply_to_id?: unknown;
            message_id?: unknown;
            message_user_id?: unknown;
            message_text?: unknown;
            message_data?: unknown;
            message_files?: unknown;
            message_time?: unknown;
            message_noticed?: unknown;
        };
        /**
         * Формат экспорта urls
         * @enum {string}
         */
        "Urls_2.Types.Export.Output": "csv" | "csvUTF8s" | "xml";
        /** Экспорт urls в определенном формате */
        "Urls_2.Methods.Export.Get": {
            output: components["schemas"]["Urls_2.Types.Export.Output"];
            /** Вывести fieldName в заголовках столбцов (для CSV) */
            show_fields_names: boolean;
            /** Вывести fieldLabel в заголовках столбцов (для CSV) */
            show_fields_labels: boolean;
            /** Вернуть данные в формате для копироваиня в буфер обмена */
            forClipboard: boolean;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Тип массива: Url[]
         * @description @see Url
         */
        "TV.API.Types.UrlArray": components["schemas"]["TV.API.Types.Url"][];
        /**
         * Импортирование urls
         * @description Доступные поля для импорта:
         *     - url
         *     - sitemap
         *     - audit
         *     - indexing
         *     - watcher
         *     - tags
         */
        "Urls_2.Methods.Import.Add": {
            /**
             * Список URL соответствующих домену проекта, допускается формат CSV
             * @description Можно передать в виде файла с именем urls, допускаются форматы CSV и XML (допустимы сжатые XML в .gz)
             *
             *     Нельзя передавать одновременно в виде массива и в виде файла или использовать совместно с link_sitemap_xml
             */
            urls?: components["schemas"]["TV.API.Types.UrlArray"] | null;
            /** Файл с содержимым для импорта, допускается формат XML (допустимы сжатые XML в .gz) */
            link_sitemap_xml?: components["schemas"]["TV.API.Types.Url"] | null;
            tags?: components["schemas"]["Tags_2.Types.Tags"] | null;
            /** Очистить список URL перед импортом */
            reset: boolean;
            /**
             * Недокументириуемый параметр
             * @description set(Audit_2\Types\Type => regexp)
             */
            setActiveByRegexpByType: (string | number)[];
            /** Флаг активности в карте сайта
             *     - 1 - присутствовал в прошлых версиях карты сайта */
            sitemap?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в аудите */
            audit?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в радаре */
            indexing?: components["schemas"]["Urls_2.Types.Flag"] | null;
            /** Флаг активности в индексации */
            watcher?: components["schemas"]["Urls_2.Types.Flag"] | null;
            debug?: boolean | null;
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Способ установки тегов
         * @enum {string}
         */
        "Urls_2.Types.Tags.Action": "set" | "add" | "remove";
        /** Изменение тегов */
        "Urls_2.Methods.Tags.Edit": {
            tags: components["schemas"]["Tags_2.Types.Tags"];
            action: components["schemas"]["Urls_2.Types.Tags.Action"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            project_id: components["schemas"]["project_id"];
        };
        /** Добавить промокоды к достижению */
        "Admin_2.Methods.Users.Promocodes.Add": {
            rank_id: number;
            /** single_code - многоразовый промокод */
            single_code?: string | null;
            /** Список многоразовых промокодов */
            codes?: (string | number)[] | null;
        };
        "Models.Users.Verif": {
            email?: unknown;
            code?: unknown;
            action?: unknown;
            params?: unknown;
            data?: unknown;
            date?: unknown;
        };
        /**
         * Получить промокоды
         * @description В params хранится строка в формате:
         *     - {{ rank_id }}
         *     - {{ rank_id }},single_code - для многоразового кода
         */
        "Admin_2.Methods.Users.Promocodes.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** @enum {string} */
        "Admin_2.Types.Users.Ranks.Category": "" | "journal";
        /** Добавить достижение */
        "Admin_2.Methods.Users.Ranks.Add": {
            name_id?: string | null;
            category?: components["schemas"]["Admin_2.Types.Users.Ranks.Category"] | null;
            name_ru?: string | null;
            name_en?: string | null;
            descr_ru?: string | null;
            descr_en?: string | null;
            descr_how_to_use_ru?: string | null;
            descr_how_to_use_en?: string | null;
            bonus_RUB?: number | null;
            bonus_USD?: number | null;
            cashback_expenses?: number | null;
            cashback_first_payment?: number | null;
            discount?: number | null;
            referrer_id?: number | null;
            from_date?: string | null;
            to_date?: string | null;
            max_count_usage?: number | null;
            currency?: string | null;
            only_new_users?: boolean | null;
            color?: string | null;
            always_visible?: boolean | null;
        };
        "Models.Admin.Users.Ranks": {
            "COUNT_CODES()"?: unknown;
            id?: unknown;
            name_id?: unknown;
            category?: unknown;
            name?: unknown;
            name_ru?: unknown;
            name_en?: unknown;
            descr?: unknown;
            descr_ru?: unknown;
            descr_en?: unknown;
            descr_how_to_use?: unknown;
            descr_how_to_use_ru?: unknown;
            descr_how_to_use_en?: unknown;
            bonus?: unknown;
            bonus_RUB?: unknown;
            bonus_USD?: unknown;
            cashback_expenses?: unknown;
            cashback_first_payment?: unknown;
            discount?: unknown;
            referrer_id?: unknown;
            from_date?: unknown;
            to_date?: unknown;
            limit?: unknown;
            currency?: unknown;
            only_new_users?: unknown;
            color?: unknown;
            always_visible?: unknown;
        };
        /** Изменить достижение */
        "Admin_2.Methods.Users.Ranks.Edit": {
            id: number;
            name_id?: string | null;
            category?: components["schemas"]["Admin_2.Types.Users.Ranks.Category"] | null;
            name_ru?: string | null;
            name_en?: string | null;
            descr_ru?: string | null;
            descr_en?: string | null;
            descr_how_to_use_ru?: string | null;
            descr_how_to_use_en?: string | null;
            bonus_RUB?: number | null;
            bonus_USD?: number | null;
            cashback_expenses?: number | null;
            cashback_first_payment?: number | null;
            discount?: number | null;
            referrer_id?: number | null;
            from_date?: string | null;
            to_date?: string | null;
            max_count_usage?: number | null;
            currency?: string | null;
            only_new_users?: boolean | null;
            color?: string | null;
            always_visible?: boolean | null;
        };
        /** Получить достижения */
        "Admin_2.Methods.Users.Ranks.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
        };
        /** ID проверки аудита */
        check_id: number;
        /**
         * Получение сводки анализа сайта
         * @deprecated
         */
        "Audit_2.Methods.Audit.Browse.Get": {
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /**
         * Получение общей информации о проверках
         *     - только для проверки, которая не завершена
         *     - в ответе будут заменены значения кодов ответа на текущие: count_000, count_1xx, count_2xx, count_3xx, count_4xx, count_5xx
         *     - в ответе будет заменено значение count_pages и count_all на текущие
         *     - в ответ будет добавлены значения robot_step и robot_count_tasks_allм
         * @description test ci/cd
         */
        "Audit_2.Methods.Audit.Checks.Get": {
            /** Добавить в результат данные о незавершенной проверке */
            show_raw_data: boolean;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        "Models.Audit.Checks": {
            "DURATION()"?: unknown;
            id?: unknown;
            project_id?: unknown;
            device?: unknown;
            scan_links?: unknown;
            scan_images?: unknown;
            scan_js?: unknown;
            scan_css?: unknown;
            robots_txt_exists?: unknown;
            sitemap_xml_exists?: unknown;
            www_redirect_exists?: unknown;
            ssl_redirect_exists?: unknown;
            tls_exists?: unknown;
            fatal?: unknown;
            rkn_no_ban?: unknown;
            notice?: unknown;
            error?: unknown;
            time_start?: unknown;
            time_finish?: unknown;
            count_pages?: unknown;
            count_all?: unknown;
            count_000?: unknown;
            count_1xx?: unknown;
            count_2xx?: unknown;
            count_3xx?: unknown;
            count_4xx?: unknown;
            count_5xx?: unknown;
            complete?: unknown;
            count_warnings?: unknown;
            count_errors?: unknown;
            count_problems?: unknown;
            is_mobile?: unknown;
            domain_check_rkn_no_ban?: unknown;
            domain_check_webmaster_no_errors?: unknown;
            domain_check_robots_txt_exists?: unknown;
            domain_check_sitemap_xml_exists?: unknown;
            domain_check_www_redirect_exists?: unknown;
            domain_check_ssl_redirect_exists?: unknown;
            domain_check_tls_exists?: unknown;
            pages_check_http_code_200_errors?: unknown;
            pages_check_redirects_not_exists_errors?: unknown;
            pages_check_redirects_many_not_exists_errors?: unknown;
            pages_check_ttfb_max_errors?: unknown;
            pages_check_cacheable_errors?: unknown;
            pages_check_robots_txt_allowed_errors?: unknown;
            pages_check_sitemap_xml_exists_errors?: unknown;
            pages_check_sitemap_xml_exists_with_canonical_errors?: unknown;
            pages_check_sitemap_included_none_blocked_errors?: unknown;
            pages_check_noindex_off_errors?: unknown;
            pages_check_nofollow_off_errors?: unknown;
            pages_check_title_exists_errors?: unknown;
            pages_check_title_length_max_errors?: unknown;
            pages_check_title_is_unique_errors?: unknown;
            pages_check_description_exists_errors?: unknown;
            pages_check_description_is_unique_errors?: unknown;
            pages_check_description_length_min_errors?: unknown;
            pages_check_description_length_max_errors?: unknown;
            pages_check_h1_exists_errors?: unknown;
            pages_check_html_lang_exists_errors?: unknown;
            pages_check_url_length_errors?: unknown;
            pages_check_canonical_exists_errors?: unknown;
            pages_check_alternate_errors?: unknown;
            pages_check_http_resources_count_errors?: unknown;
            pages_check_links_exists_errors?: unknown;
            pages_check_refresh_not_exists_errors?: unknown;
            pages_check_compression_exists_errors?: unknown;
            pages_check_schema_exists_errors?: unknown;
            pages_check_og_title_exists_errors?: unknown;
            pages_check_og_description_exists_errors?: unknown;
            pages_check_og_image_exists_errors?: unknown;
            pages_check_og_url_exists_errors?: unknown;
            pages_check_og_url_canonical_errors?: unknown;
            pages_check_lcp_max_errors?: unknown;
            pages_check_fid_max_errors?: unknown;
            pages_check_inp_max_errors?: unknown;
            pages_check_cls_max_errors?: unknown;
            pages_check_fcp_max_errors?: unknown;
            pages_check_si_max_errors?: unknown;
            pages_check_tbt_max_errors?: unknown;
            links_check_http_code_200_errors?: unknown;
            links_check_redirects_not_exists_errors?: unknown;
            links_check_redirects_many_not_exists_errors?: unknown;
            links_check_ttfb_max_errors?: unknown;
            links_check_url_slash_unique_errors?: unknown;
            links_check_url_format_good_errors?: unknown;
            links_check_title_or_content_exists_errors?: unknown;
            links_check_nofollow_off_errors?: unknown;
            images_check_http_code_200_errors?: unknown;
            images_check_redirects_not_exists_errors?: unknown;
            images_check_redirects_many_not_exists_errors?: unknown;
            images_check_ttfb_max_errors?: unknown;
            images_check_cacheable_errors?: unknown;
            images_check_alt_exists_errors?: unknown;
            images_check_alt_length_max_errors?: unknown;
            images_check_size_max_errors?: unknown;
            images_check_robots_disallow_off_errors?: unknown;
            images_check_modern_format_errors?: unknown;
            js_check_http_code_200_errors?: unknown;
            js_check_redirects_not_exists_errors?: unknown;
            js_check_redirects_many_not_exists_errors?: unknown;
            js_check_ttfb_max_errors?: unknown;
            js_check_compression_exists_errors?: unknown;
            js_check_cacheable_errors?: unknown;
            js_check_is_minified_errors?: unknown;
            js_check_no_render_blocking_errors?: unknown;
            css_check_http_code_200_errors?: unknown;
            css_check_redirects_not_exists_errors?: unknown;
            css_check_redirects_many_not_exists_errors?: unknown;
            css_check_ttfb_max_errors?: unknown;
            css_check_compression_exists_errors?: unknown;
            css_check_cacheable_errors?: unknown;
            css_check_is_minified_errors?: unknown;
            css_check_no_render_blocking_errors?: unknown;
        };
        /** Получение проверенных css */
        "Audit_2.Methods.Audit.Css.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Css": {
            "COUNT(*)"?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            url_ids?: unknown;
            url_id?: unknown;
            url?: unknown;
            count?: unknown;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            redirects?: (string | number)[] | null;
            locations?: unknown;
            ttfb?: unknown;
            count_pages?: unknown;
            compression?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            robots_txt_mention?: unknown;
            robots_txt_blocked?: unknown;
            minified?: unknown;
            broken?: unknown;
            notice?: unknown;
            error?: unknown;
            warning_all?: unknown;
            render_blocking?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_compression_exists?: unknown;
            check_cacheable?: unknown;
            check_is_minified?: unknown;
            check_no_render_blocking?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
        };
        /**
         * Тип очтета аудита
         * @enum {string}
         */
        "Audit_2.Types.Audit.TargetType": "pages" | "links" | "images" | "js" | "css";
        /** @enum {string} */
        "TV.API.Types.ExportFormat": "csv" | "xlsx";
        /** Экспорт результатов проверки файла */
        "Audit_2.Methods.Audit.Export.Get": {
            target_type: components["schemas"]["Audit_2.Types.Audit.TargetType"];
            /** Формат экспортируемого файла */
            output: components["schemas"]["TV.API.Types.ExportFormat"];
            project_id: components["schemas"]["project_id"];
            fields: components["schemas"]["fields"];
            check_id: components["schemas"]["check_id"];
        };
        /** Получение проверенных изображений */
        "Audit_2.Methods.Audit.Images.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Images": {
            "COUNT(*)"?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            url_id?: unknown;
            url_ids?: unknown;
            url?: unknown;
            alt?: unknown;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            redirects?: (string | number)[] | null;
            locations?: unknown;
            count?: unknown;
            ttfb?: unknown;
            count_pages?: unknown;
            size?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            robots_txt_mention?: unknown;
            robots_txt_blocked?: unknown;
            extension?: unknown;
            content_type?: unknown;
            modern_format?: unknown;
            broken?: unknown;
            search?: unknown;
            notice?: unknown;
            error?: unknown;
            warning_all?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_cacheable?: unknown;
            check_alt_exists?: unknown;
            check_alt_length_max?: unknown;
            check_size_max?: unknown;
            check_robots_disallow_off?: unknown;
            check_modern_format?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
        };
        /** Получение проверенных js */
        "Audit_2.Methods.Audit.Js.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Js": {
            "COUNT(*)"?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            url_ids?: unknown;
            url_id?: unknown;
            url?: unknown;
            count?: unknown;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            redirects?: (string | number)[] | null;
            ttfb?: unknown;
            count_pages?: unknown;
            compression?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            robots_txt_mention?: unknown;
            robots_txt_blocked?: unknown;
            minified?: unknown;
            broken?: unknown;
            notice?: unknown;
            error?: unknown;
            warning_all?: unknown;
            render_blocking?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_compression_exists?: unknown;
            check_cacheable?: unknown;
            check_is_minified?: unknown;
            check_no_render_blocking?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
        };
        /** Получение проверенных ссылок */
        "Audit_2.Methods.Audit.Links.Get": {
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Links": {
            "COUNT(*)"?: unknown;
            search?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            project_id?: unknown;
            url_id?: unknown;
            url_ids?: unknown;
            url?: unknown;
            type?: unknown;
            content?: string | null;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            count?: unknown;
            title?: unknown;
            redirects?: (string | number)[] | null;
            nofollow?: unknown;
            sponsored?: unknown;
            ugc?: unknown;
            external?: unknown;
            broken?: unknown;
            ttfb?: unknown;
            count_pages?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_url_slash_unique?: unknown;
            check_url_format_good?: unknown;
            check_title_or_content_exists?: unknown;
            check_nofollow_off?: unknown;
            notice?: unknown;
            error?: unknown;
            warning_all?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
        };
        /**
         * Дата с временем
         * @example 2000-01-01 00:00:00
         */
        "TV.API.Types.Datetime": string;
        /** Получение данных проверенных ресурсов */
        "Audit_2.Methods.Audit.Log.Get": {
            /** Фильтр по периоду */
            time1?: components["schemas"]["TV.API.Types.Datetime"] | null;
            /** Фильтр по периоду */
            time2?: components["schemas"]["TV.API.Types.Datetime"] | null;
            /** Добавить url к записям */
            show_urls: boolean;
            /** Добавить массив locations - адреса страницы и редиректы с HTTP кодами */
            show_locations: boolean;
            /** Фильтр по категориям кодов */
            http_codes_hundreds?: components["schemas"]["TV.API.Types.IntArray"] | null;
            /**
             * Номер страницы (для использования в SQL)
             * @default 1
             */
            page: number;
            project_id: components["schemas"]["project_id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            check_id: components["schemas"]["check_id"];
        };
        /** Получение страниц, по которым был выполнен аудит */
        "Audit_2.Methods.Audit.Pages.Get": {
            /** Тип отчета для фильтра по ресурсам страницы */
            filters_resources_target_type?: components["schemas"]["Audit_2.Types.Audit.TargetType"] | null;
            /** Фильтр по ресурсам страницы, API fitlers для объекта, тип которого указан в filters_extra_target_type */
            filters_resources: (string | number)[];
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        "Models.Audit.Pages": {
            dummy_opener_summary_page?: unknown;
            "COUNT(*)"?: unknown;
            "HTTP_CODES_HUNDREDS()"?: (string | number)[] | null;
            check_id?: unknown;
            url_id?: unknown;
            url?: unknown;
            time_parse?: unknown;
            http_codes?: (string | number)[] | null;
            last_http_code?: unknown;
            tls_version?: unknown;
            redirects?: (string | number)[] | null;
            meta_robots_none?: unknown;
            x_robots_tag_none?: unknown;
            meta_robots_noindex?: unknown;
            x_robots_tag_noindex?: unknown;
            meta_robots_nofollow?: unknown;
            x_robots_tag_nofollow?: unknown;
            canonical?: unknown;
            canonical_count?: unknown;
            http_resources_count?: unknown;
            html_lang?: unknown;
            hreflang?: unknown;
            rdfa?: unknown;
            json_ld?: unknown;
            microdata?: unknown;
            alternates?: unknown;
            refresh?: unknown;
            title?: unknown;
            description?: unknown;
            h1?: unknown;
            links_count?: unknown;
            images_count?: unknown;
            js_count?: unknown;
            css_count?: unknown;
            lastmod?: unknown;
            lastmod_since?: unknown;
            sitemap_xml_mention?: unknown;
            robots_txt_mention?: unknown;
            robots_txt_blocked?: unknown;
            og_title?: unknown;
            og_description?: unknown;
            og_image?: unknown;
            og_url?: unknown;
            og_type?: unknown;
            count_errors?: unknown;
            count_warnings?: unknown;
            count_problems?: unknown;
            broken?: unknown;
            ttfb?: unknown;
            compression?: unknown;
            cacheable?: unknown;
            cache_type?: unknown;
            cache_time?: unknown;
            cache_validator?: unknown;
            search?: unknown;
            snippet_search?: unknown;
            title_dbl?: unknown;
            description_dbl?: unknown;
            lcp?: unknown;
            fid?: unknown;
            inp?: unknown;
            cls?: unknown;
            fcp?: unknown;
            si?: unknown;
            tti?: unknown;
            tbt?: unknown;
            cwv_performance?: unknown;
            backlinks_inner_count?: unknown;
            text_length?: unknown;
            check_http_code_200?: unknown;
            check_redirects_not_exists?: unknown;
            check_redirects_many_not_exists?: unknown;
            check_ttfb_max?: unknown;
            check_cacheable?: unknown;
            check_robots_txt_allowed?: unknown;
            check_sitemap_xml_exists?: unknown;
            check_sitemap_xml_exists_with_canonical?: unknown;
            check_sitemap_included_none_blocked?: unknown;
            check_noindex_off?: unknown;
            check_nofollow_off?: unknown;
            check_title_exists?: unknown;
            check_title_length_max?: unknown;
            check_title_is_unique?: unknown;
            check_description_exists?: unknown;
            check_description_is_unique?: unknown;
            check_description_length_min?: unknown;
            check_description_length_max?: unknown;
            check_h1_exists?: unknown;
            check_html_lang_exists?: unknown;
            check_url_length?: unknown;
            check_canonical_exists?: unknown;
            check_alternate?: unknown;
            check_http_resources_count?: unknown;
            check_links_exists?: unknown;
            check_refresh_not_exists?: unknown;
            check_compression_exists?: unknown;
            check_schema_exists?: unknown;
            check_og_title_exists?: unknown;
            check_og_description_exists?: unknown;
            check_og_image_exists?: unknown;
            check_og_url_exists?: unknown;
            check_og_url_canonical?: unknown;
            check_lcp_max?: unknown;
            check_fid_max?: unknown;
            check_inp_max?: unknown;
            check_cls_max?: unknown;
            check_fcp_max?: unknown;
            check_si_max?: unknown;
            check_tbt_max?: unknown;
        };
        /**
         * Фильтр по состоянию изменения в сводке
         * @enum {string}
         */
        "Audit_2.Types.Audit.Summary.FilterCheckState": "all" | "changed";
        /** Получение сводки о выполненном аудите */
        "Audit_2.Methods.Audit.Summary.Get": {
            /** Фильтр по состоянию сигнала (success, warning, error) */
            filter_check_type: (string | number)[];
            filter_check_state?: components["schemas"]["Audit_2.Types.Audit.Summary.FilterCheckState"] | null;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Получение сводки страницы */
        "Audit_2.Methods.Audit.SummaryPage.Get": {
            /** Id ссылки на страницу */
            url_id: number;
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /**
         * Экспорт результатов индексации
         * @description Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя)
         */
        "Audit_2.Methods.Indexing.Export.Get": {
            /** Поисковые системы */
            searchers_keys: components["schemas"]["Audit_2.Types.Indexing.SearcherKeys"];
            /**
             * Если указан, файл будет сохранен в указанной папке и будет возвращен путь к файлу
             * @description Для внутреннего использования
             *
             *     @private
             */
            returnFilenameFromFolder?: string | null;
            /** Формат экспортируемого файла */
            output: components["schemas"]["TV.API.Types.ExportFormat"];
            /** Настройки экспорта */
            properties: (string | number)[];
            /** Произвольные даты без использования диапазона */
            dates?: (string | number)[] | null;
            /** Дата начала диапазона */
            date1?: components["schemas"]["TV.API.Types.Date"] | null;
            /** Дата окончания диапазона */
            date2?: components["schemas"]["TV.API.Types.Date"] | null;
            /**
             * Период в днях
             * @default 7
             */
            periodDays: number;
            /** @default 7 */
            type_range: components["schemas"]["Audit_2.Types.Indexing.Export.TypeRange"];
            /**
             * Количество дней в диапазоне
             * @default 60
             */
            count_dates: number;
            project_id: components["schemas"]["project_id"];
            fields: components["schemas"]["fields"];
        };
        /**
         * Создание гостевой ссылки на просмотр позиций
         * @description Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя)
         */
        "Audit_2.Methods.Indexing.Links.Get": {
            /** Диапазон значений шаблона */
            template_date_range: string;
            /** Произвольные даты без использования диапазона */
            dates?: (string | number)[] | null;
            /** Дата начала диапазона */
            date1?: string | null;
            /** Дата окончания диапазона */
            date2?: string | null;
            /**
             * Тип диапазона дат
             * @default 7
             */
            type_range: components["schemas"]["Audit_2.Types.Indexing.Export.TypeRange"];
            /** Количество дней в диапазоне */
            count_dates?: number | null;
            /** Ппоисковые ключи */
            searchers_keys?: (string | number)[] | null;
            /** Теги */
            tags?: (string | number)[] | null;
            /** Динамический */
            dynamic?: (string | number)[] | null;
            /** Динаамические данные */
            data_dynamic?: (string | number)[] | null;
            /** Сортировка данных */
            data_sort?: (string | number)[] | null;
            project_id: components["schemas"]["project_id"];
        };
        /** Получение сводки индексации */
        "Audit_2.Methods.Indexing.Summary.Get": {
            /** Произвольные даты без диапазона */
            dates: (string | number)[];
            searcher_key?: components["schemas"]["Audit_2.Types.Indexing.SearcherKey"] | null;
            /** Отобразить количество изменений */
            show_counts_changes: boolean;
            /** Отобразить количество страниц в индексе */
            show_counts_in_index: boolean;
            /** Отобразить количество проверенных страниц */
            show_counts_all: boolean;
            /**
             * Вернуть данные в формате для графика
             * @description Недокументируемый параметр
             *
             *     @private
             */
            forChart: boolean;
            project_id: components["schemas"]["project_id"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /**
         * Построить отчет по одному URL
         * @description Отличия от get/audit_2/watcher:
         *     - отчет генерируется на основе объекта watcher_results, а не urls
         *     - параметры выбора периода отчета игнорируются
         *     - выбор прверок регулируется параметрами запроса filters, limit и offset
         */
        "Audit_2.Methods.Watcher.ByURL.Get": {
            /** ID URL */
            url_id: number;
            /** Включать ли в результат названия столбцов */
            show_headers: boolean;
            /**
             * Выбор столбцов данных с результатами проверки
             * @default [
             *       "http_codes",
             *       "redirects"
             *     ]
             */
            watcher_fields: (string | number)[];
            show_diff: components["schemas"]["Audit_2.Types.Watcher.ShowDiff"];
            watcher_type: components["schemas"]["Audit_2.Types.Watcher.Type"];
            fields: components["schemas"]["fields"];
            orders: components["schemas"]["orders"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            fetch_style?: components["schemas"]["fetch_style"];
            project_id: components["schemas"]["project_id"];
        };
        "Models.Watcher.Results": {
            project_id?: unknown;
            check_id?: unknown;
            url_id?: unknown;
            http_codes?: (string | number)[] | null;
            http_codes_changed?: unknown;
            http_codes_md5?: unknown;
            redirects?: (string | number)[] | null;
            redirects_changed?: unknown;
            redirects_md5?: unknown;
            h1?: unknown;
            h1_changed?: unknown;
            h1_md5?: unknown;
            title?: unknown;
            title_changed?: unknown;
            title_md5?: unknown;
            description?: unknown;
            description_changed?: unknown;
            description_md5?: unknown;
            content?: unknown;
            content_changed?: unknown;
            content_md5?: unknown;
        };
        /** Получение проверок радара */
        "Audit_2.Methods.Watcher.Checks.Get": {
            project_id: components["schemas"]["project_id"];
        };
        /** Получение сводки радара */
        "Audit_2.Methods.Watcher.Summary.Get": {
            /** Тип проверки */
            watcher_types?: (string | number)[] | null;
            /** ID проверок */
            checks_ids: (string | number)[];
            /** Отобразить количество изменений по типам */
            show_counts_changes: boolean;
            /** Недокументируемый параметр, данные для графика */
            forChart: boolean;
            project_id: components["schemas"]["project_id"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Отписаться от тарифа, оплаченного картой */
        "Payments_2.Methods.Tariff.DelCard.Edit": Record<string, never>;
        /** Настройка оплаты тарифов: выставлять ли счета через диадок */
        "Payments_2.Methods.Tariff.NextToDiadoc.Edit": {
            /** Флаг - применение настройки тарифов */
            next_to_diadoc: boolean;
        };
        /** Сменить тариф со следующего месяца */
        "Payments_2.Methods.Tariff.SetNext.Edit": {
            /** id тарифа */
            id: string;
        };
        /** Редактирование тикета (для админов) */
        "Tickets_2.Methods.Admin.Ticket.Edit": {
            id: number;
            /** Флаг того, что тикет важный */
            is_important?: boolean | null;
            /** Номер задачи redmine, связанной с тикетом */
            task_id?: number | null;
            /** Доступные теги тикета */
            tags?: components["schemas"]["Tags_2.Types.Tags"] | null;
            /** Статус тикета */
            status?: boolean | null;
        };
        /** Пометка тикета как "прочитанный" для автора тикета или админов */
        "Tickets_2.Methods.Tickets.SetReaded.Edit": {
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение URL к карте сайта по файлу robots.txt для указанного домена */
        "Urls_2.Methods.Import.RecognizeLinkSitemapXml.Get": {
            /** Домен */
            domain: string;
        };
        /** Привязка email к аккаунту */
        "Users_2.Methods.Join.Email.Add": {
            email: string;
            pass?: string | null;
        };
        /**
         * График с количеством подписок на рубрики с сегментцией по способам рассылки
         * @description График кешируется, первый запрос может выполняться дольше
         */
        "Admin_2.Methods.Users.Informer.Subscriptions.Get": {
            tariff_id?: number | null;
        };
        /**
         * Сокращенный тип с данными для вывода hightcharts
         * @description https://www.highcharts.com/
         */
        "TV.Objects.Highcharts.Chart": {
            /**
             * Категории
             * @description Для обчных графиков это значения на оси X
             */
            categories: (string | number)[];
            /**
             * Набор серий
             * @description Серия - это объект, выводимый на графике, например линия.
             *
             *     Серия обязательно должна иметь поле data, в котором перечисляются значения для категорий. Значения должны идти в таком же порядке, что и
             *     категории
             */
            series: (string | number)[];
            /** Дополнительгная информация */
            additionalData: (string | number)[];
        };
        /** Запуск проверки аудита */
        "Audit_2.Methods.Audit.Checker.Go.Edit": {
            /** Запуск в режиме отладки */
            debug: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Получение стоимости проверки аудита */
        "Audit_2.Methods.Audit.Checker.Price.Get": {
            /**
             * Отображать ли сумму с учетом скидки
             * @default true
             */
            apply_discount: boolean;
        };
        /** Получение гостевой ссылки на просмотр аудита позиций */
        "Audit_2.Methods.Audit.Export.Links.Get": {
            /** Название просмотра (используется на странице с просмотром проверки) */
            view_name: string;
            /** Шаблон просмотра (используется на странице с просмотром проверки) */
            view_template: (string | number)[];
            /** Логи фильтра по категориям кодов (используется на странице с просмотром проверки) */
            log_http_codes_hundreds: (string | number)[];
            /** Тип сигнала просмотра (используется на странице с просмотром проверки) */
            view_signal_type: (string | number)[];
            /** Внешние ссылки (используется на странице с просмотром проверки) */
            links_external: string;
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Экспорт отчета Анализа сайта */
        "Audit_2.Methods.Audit.Export.Summary.Get": {
            /** Формат экспортируемого файла */
            output: string;
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Получение информации о текущей ошибке на роботе */
        "Audit_2.Methods.Audit.Log.ActualError.Get": {
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        DateTime: Record<string, never>;
        /**
         * Получение данных для графика
         * @deprecated
         */
        "Audit_2.Methods.Audit.Log.Chart.Get": {
            /** Фильтр по периоду */
            time1?: components["schemas"]["DateTime"] | null;
            /** Фильтр по периоду */
            time2?: components["schemas"]["DateTime"] | null;
            /**
             * Номер страницы (для использования в SQL)
             * @default 1
             */
            page: number;
            limit?: components["schemas"]["limit"];
            offset: components["schemas"]["offset"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /**
         * Тип отчета аудита для экспорта
         * @enum {integer}
         */
        "Audit_2.Types.Audit.Results.Export.TypeReport": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
        /**
         * Экспорт результатов аудита
         * @deprecated
         */
        "Audit_2.Methods.Audit.Results.Export.Get": {
            type_report: components["schemas"]["Audit_2.Types.Audit.Results.Export.TypeReport"];
            /**
             * Формат экспорта
             * @default pdf
             */
            format: string;
            /** Данные поиска во всех табличных разделах (только для PDF) */
            search?: string | null;
            /** Данные фильтрации во всех табличных разделах (только для PDF) */
            filter?: string | null;
            /** Вид ссылок (только для PDF) */
            external?: string | null;
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /**
         * Результаты анализа страницы
         * @deprecated
         */
        "Audit_2.Methods.Audit.Results.Page.Get": {
            /** Ссылка на анализируемую страницу */
            url: string;
            /** Поиск */
            search?: string | null;
            orders: components["schemas"]["orders"];
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["check_id"];
        };
        /** Отправка проектов на проверку индексации */
        "Audit_2.Methods.Indexing.Checker.Go.Edit": {
            /** Запуск в режиме отладки */
            debug: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Полуение стоимости проверки индексации */
        "Audit_2.Methods.Indexing.Checker.Price.Get": {
            /**
             * Отображать сумму с учетом скидки
             * @default 1
             */
            apply_discount: number;
        };
        /**
         * Получение гостевой ссылки на просмотр индексации
         * @description Необходимо указать либо date1 и date2, либо dates (вместе указывать нельзя)
         */
        "Audit_2.Methods.Indexing.Export.Links.Get": {
            /** Поисковые ключи */
            searchers_keys?: (string | number)[] | null;
            /** Диапозон значений шаблона */
            template_date_range?: string | null;
            /** Произвольные даты без использования диапазона */
            dates?: (string | number)[] | null;
            /** Дата начала диапазона */
            date1?: string | null;
            /** Дата окончания диапазона */
            date2?: string | null;
            /** Тип диапазона дат */
            type_range?: components["schemas"]["Audit_2.Types.Indexing.Export.TypeRange"] | null;
            /** Сравнение диапазонов типов */
            type_range_compare?: string | null;
            /** Количество дней в диапазоне */
            count_dates?: string | null;
            /** ID тегов */
            tags_ids?: (string | number)[] | null;
            /** Сортировка данных */
            data_sort?: (string | number)[] | null;
            /** Применение изменений только для */
            only_changed_for?: string | null;
            project_id: components["schemas"]["project_id"];
        };
        /**
         * Хранилище для экспорта
         * @enum {string}
         */
        "Export_2.Types.Repository.Name": "gdrive";
        /** Экспорт файла в хранилище */
        "Audit_2.Methods.Indexing.Export.ToRepository.Get": {
            repository: components["schemas"]["Export_2.Types.Repository.Name"];
            project_id: components["schemas"]["project_id"];
        };
        /** Получение сводок индексации для графика */
        "Audit_2.Methods.Indexing.Summary.Chart.Get": {
            /** Произвольные даты без диапазона */
            dates: (string | number)[];
            searcher_key?: components["schemas"]["Audit_2.Types.Indexing.SearcherKey"] | null;
            /** Отобразить количество изменений */
            show_counts_changes: boolean;
            /** Отобразить количество страниц в индексе */
            show_counts_in_index: boolean;
            /** Отобразить количество проверенных страниц */
            show_counts_all: boolean;
            /**
             * Вернуть данные в формате для графика
             * @description Недокументируемый параметр
             *
             *     @private
             */
            forChart: boolean;
            project_id: components["schemas"]["project_id"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /**
         * Максимальное количество страниц для генерации карты сайта
         * @enum {string}
         */
        "Audit_2.Types.Sitemap.MaxPages": "100" | "1000" | "10000" | "100000" | "150000" | "300000";
        /** Отправка проектов на проверку карты сайта */
        "Audit_2.Methods.Sitemap.Checker.Go.Edit": {
            max_pages: components["schemas"]["Audit_2.Types.Sitemap.MaxPages"];
            /** Запуск в режиме отладки */
            debug: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Полуение стоимости проверки карты сайта */
        "Audit_2.Methods.Sitemap.Checker.Price.Get": {
            /**
             * Отображать ли сумму с учетом скидки
             * @default 1
             */
            apply_discount: number;
            max_pages: components["schemas"]["Audit_2.Types.Sitemap.MaxPages"];
        };
        /** Отправка проектов на проверку радара */
        "Audit_2.Methods.Watcher.Checker.Go.Edit": {
            /** Запуск в режиме отладки */
            debug: boolean;
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /** Полуение стоимости проверки радара */
        "Audit_2.Methods.Watcher.Checker.Price.Get": {
            /**
             * Отображать ли сумму с учетом скидки
             * @default 1
             */
            apply_discount: number;
        };
        /** ID проверки радара */
        "properties-check_id": number;
        /** Создание гостевой ссылки на просмотр радара */
        "Audit_2.Methods.Watcher.Export.Links.Get": {
            /** Выбранный элемент в меню */
            view_name: string;
            /** Выводить полные тексты (для вкладки контент) */
            fulltext: boolean;
            /** @default all */
            changed: components["schemas"]["Audit_2.Types.Audit.Summary.FilterCheckState"];
            /** Фильтр по тегам */
            tags_ids?: (string | number)[] | null;
            project_id: components["schemas"]["project_id"];
            check_id: components["schemas"]["properties-check_id"];
        };
        /** Получение сводок радара для графика */
        "Audit_2.Methods.Watcher.Summary.Chart.Get": {
            /** Тип проверки */
            watcher_types?: (string | number)[] | null;
            /** ID проверок */
            checks_ids: (string | number)[];
            /** Отобразить количество изменений по типам */
            show_counts_changes: boolean;
            /** Недокументируемый параметр, данные для графика */
            forChart: boolean;
            project_id: components["schemas"]["project_id"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AddAnalytics2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Analytics_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Annotations"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Annotations"];
                };
            };
        };
    };
    GetApp2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["App_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Id вставленного комментария */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    DelComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Payments"];
                };
            };
        };
    };
    GetQr2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Qr_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddUrls2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    EditUrls2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    GetUrls2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список urls проекта */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    GetAnnotations2My: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Annotations_2.Methods.My.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Annotations"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Annotations"];
                };
            };
        };
    };
    GetApp2Actions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["App_2.Methods.Actions.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetApp2Privacy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["App_2.Methods.Privacy.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Controller_2.Objects.Page"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2CountUrls: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.CountUrls.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Количество настроенных URL */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2Indexing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список ссылок с данными по ним */
                        result: components["schemas"]["Models.Urls"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    EditAudit2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Settings.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Количество применных настроек */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Settings.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Настройки аудита */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2Watcher: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Генерируемый на основе urls, список результатов проверок радара */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditComments2Like: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comments_2.Methods.Like.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditContent2Authors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Authors.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetContent2Authors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Content_2.Methods.Authors.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Content.Authors"];
                };
            };
        };
    };
    AddCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Commands.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    DelCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Commands.Del"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    EditCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Commands.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    GetCron2Commands: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Commands.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список задач cron */
                        result: components["schemas"]["Models.CronCommands"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    GetCron2Services: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cron_2.Methods.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список имен сервисов */
                        result: components["schemas"]["Models.CronCommands"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.CronCommands"];
                };
            };
        };
    };
    GetExample2Array: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Example_2.Methods.Array.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Ассоциативный результирующий массив, с данными, переданными в метод и результатом genSet() */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetExample2Custom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Example_2.Methods.Custom.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetExample2Enum: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Example_2.Methods.Enum.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Ассоциативный результирующий массив, с данными, переданными в метод */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetExample2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Example_2.Methods.Projects.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetOpenapi2Download: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpenAPI_2.Methods.Download.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetPayments2Companies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Companies.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2ContractSign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.ContractSign.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2NextRequisitesId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.NextRequisitesId.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddPayments2UrTinkoffCreateApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.UrTinkoffCreateApplication.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetPayments2ValidateMerchantCardAP: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.ValidateMerchantCardAP.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddTickets2Messages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Messages.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Id добавленного сообщения */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddTickets2Tickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Id тикета */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2Tickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetTickets2Tickets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Tickets"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Tickets"];
                };
            };
        };
    };
    GetUrls2Export: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Export.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddUrls2Import: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Import.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return ?array{countSended: int, countDuplicated: int, countAdded: int, countChanged: int}
                         *
                         *     @throws Exception */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditUrls2Tags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Tags.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Urls"];
                };
            };
        };
    };
    AddAdmin2UsersPromocodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Promocodes.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @throws Exception */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Users.Verif"];
                };
            };
        };
    };
    GetAdmin2UsersPromocodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Promocodes.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Users.Verif"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Users.Verif"];
                };
            };
        };
    };
    AddAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Ranks.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Users.Ranks"];
                };
            };
        };
    };
    EditAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Ranks.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Users.Ranks"];
                };
            };
        };
    };
    GetAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Ranks.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: components["schemas"]["Models.Admin.Users.Ranks"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Admin.Users.Ranks"];
                };
            };
        };
    };
    GetAudit2AuditBrowse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Browse.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводка анализа сайта */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditChecks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Checks.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список выполненных (выполняемых) проверок аудита */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Checks"];
                };
            };
        };
    };
    GetAudit2AuditCss: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Css.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверенных css */
                        result: components["schemas"]["Models.Audit.Css"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Css"];
                };
            };
        };
    };
    GetAudit2AuditExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Export.Get"];
            };
        };
        responses: {
            /** @description Файл результатов проверки сайта */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAudit2AuditImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Images.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверенных изображений */
                        result: components["schemas"]["Models.Audit.Images"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Images"];
                };
            };
        };
    };
    GetAudit2AuditJs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Js.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверенных js */
                        result: components["schemas"]["Models.Audit.Js"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Js"];
                };
            };
        };
    };
    GetAudit2AuditLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверенных ссылок */
                        result: components["schemas"]["Models.Audit.Links"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Links"];
                };
            };
        };
    };
    GetAudit2AuditLog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Log.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Данные проверенных ресурсов */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditPages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Pages.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список страниц */
                        result: components["schemas"]["Models.Audit.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Pages"];
                };
            };
        };
    };
    GetAudit2AuditSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Summary.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Возвращает объект со сводкой по категориям, пример:
                         *      - `$res['all']['all']['count_checks_success']` - количество пройденных проверок во всех категориях
                         *      - `$res['pages']['indexing']['count_checks_success']` - количество пройденных проверок в категории Страницы / Индексация
                         *      - `$res['all']['all']['count_checks_success']` - количество пройденных проверок во всех категориях */
                        result: components["schemas"]["Models.Audit.Checks"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Checks"];
                };
            };
        };
    };
    GetAudit2AuditSummaryPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.SummaryPage.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводка о выполненном аудите по одной странице */
                        result: components["schemas"]["Models.Audit.Pages"][];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Audit.Pages"];
                };
            };
        };
    };
    GetAudit2IndexingExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Export.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Результаты индексации */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2IndexingLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Короткая гостевая ссылка на просмотр позиций */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2IndexingSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Summary.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводка индексации */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2WatcherByURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.ByURL.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Отчет по одному URL */
                        result: unknown;
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Watcher.Results"];
                };
            };
        };
    };
    GetAudit2WatcherChecks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Checks.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Список проверок радара */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2WatcherSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Summary.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводка с количеством изменений по каждому типу проверки */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffDelCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Tariff.DelCard.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffNextToDiadoc: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Tariff.NextToDiadoc.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffSetNext: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payments_2.Methods.Tariff.SetNext.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2AdminTicket: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Admin.Ticket.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditTickets2TicketsSetReaded: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tickets_2.Methods.Tickets.SetReaded.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetUrls2ImportRecognizeLinkSitemapXml: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Urls_2.Methods.Import.RecognizeLinkSitemapXml.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** URL к карте сайта */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    AddUsers2JoinEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Users_2.Methods.Join.Email.Add"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @throws Exception */
                        result: number;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAdmin2UsersInformerSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Admin_2.Methods.Users.Informer.Subscriptions.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Данные для построения графика */
                        result: components["schemas"]["TV.Objects.Highcharts.Chart"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAudit2AuditCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Checker.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{projectIds: int[]}
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2AuditCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Checker.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<int, array{projectsIds: int[], price: float}>}
                         *
                         *     ```
                         *     {
                         *         "pricesByUsers": {
                         *                 "{{userId}}": {
                         *                     "projectsIds": [],
                         *                     "price": float,
                         *                     "priceOriginal": float
                         *                 }
                         *         }
                         *      }
                         *     ```
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2AuditExportLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Export.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Короткая гостевая ссылка на просмотр аудита позиций */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditExportSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Export.Summary.Get"];
            };
        };
        responses: {
            /** @description Файл отчета анализа сайта */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAudit2AuditLogActualError: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Log.ActualError.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Вернет null, если ошибки на роботе нет */
                        result: components["schemas"]["stdClass"];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditLogChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Log.Chart.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Данные для графика */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"] & components["schemas"]["Pagination"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditResultsExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Results.Export.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Ответ об успешнности экспорта результатов аудита */
                        result: boolean;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2AuditResultsPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Audit.Results.Page.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Результаты анализа страницы
                         *     ```
                         *     {
                         *            "result": {
                         *                'page_in_filter': bool,
                         *                'index': => int,
                         *                'snippet': => string,
                         *                'content': => string
                         *            }
                         *     }
                         *     ``` */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAudit2IndexingCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Checker.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{projectIds: int[]}
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2IndexingCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Checker.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<int, array{projectsIds: int[], price: float}>}
                         *
                         *     ```
                         *     {
                         *        "pricesByUsers": {
                         *            "{{userId}}": {
                         *                "projectsIds": [],
                         *                "price": float
                         *            }
                         *        }
                         *     }
                         *     ```
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2IndexingExportLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Export.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Короткая гостевая ссылка на просмотр индексации */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2IndexingExportToRepository: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Export.ToRepository.Get"];
            };
        };
        responses: {
            /** @description Будет произведен редиркт на файл в хранилище */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetAudit2IndexingSummaryChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Indexing.Summary.Chart.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводки индексации */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    EditAudit2SitemapCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Sitemap.Checker.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{projectIds: int[]}
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2SitemapCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Sitemap.Checker.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<int, array{projectsIds: int[], price: float}>}
                         *
                         *     ```
                         *     {
                         *        "pricesByUsers": {
                         *            "{{userId}}": {
                         *                "projectsIds": [],
                         *                "price": float
                         *            }
                         *        }
                         *     }
                         *     ```
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    EditAudit2WatcherCheckerGo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Checker.Go.Edit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{projectIds: int[]}
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2WatcherCheckerPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Checker.Price.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @return array{pricesByUsers: array<int, array{projectsIds: int[], price: float}>}
                         *
                         *     ```
                         *     {
                         *        "pricesByUsers": {
                         *            "{{userId}}": {
                         *                "projectsIds": [],
                         *                "price": float
                         *            }
                         *        }
                         *     }
                         *     ```
                         *
                         *     @throws Exception */
                        result: components["schemas"]["Models.Projects"][];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: components["schemas"]["Models.Projects"];
                };
            };
        };
    };
    GetAudit2WatcherExportLinks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Export.Links.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Короткая ссылка гостевого доступа для просмотра радара */
                        result: string;
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
    GetAudit2WatcherSummaryChart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Audit_2.Methods.Watcher.Summary.Chart.Get"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Сводки с количеством изменений по каждому типу проверки */
                        result: (string | number)[];
                    } & components["schemas"]["ResponseSuccess"]) | components["schemas"]["ResponseError"];
                    model: null;
                };
            };
        };
    };
}
