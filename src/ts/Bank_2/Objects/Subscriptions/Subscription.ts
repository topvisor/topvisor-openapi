/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Информация о текущей подписки пользователя и ее лимитах */
        "Bank_2.Objects.Subscriptions.Subscription": {
            /** id платежа, подписки */
            paymentId?: number | null;
            externalPaymentId?: string | null;
            next?: string | null;
            /** Текущий план подписки */
            plan?: import('./Plan.ts').components['schemas']['Bank_2.Objects.Subscriptions.Plan'] | null;
            /** Следующий план подписки */
            nextPlan?: import('./Plan.ts').components['schemas']['Bank_2.Objects.Subscriptions.Plan'] | null;
            /** Состояние подписки */
            recurrentState?: import('../Requisites/Payment/RecurrentState.ts').components['schemas']['Bank_2.Objects.Requisites.Payment.RecurrentState'] | null;
            /** Текущий цикл для подписки */
            cycle?: import('../../Types/Subscriptions/Cycle.ts').components['schemas']['Bank_2.Types.Subscriptions.Cycle'] | null;
            /** Цикл для следующей подписки */
            nextCycle?: import('../../Types/Subscriptions/Cycle.ts').components['schemas']['Bank_2.Types.Subscriptions.Cycle'] | null;
            /**
             * Использованные лимиты
             *
             *     Доступные лимиты см. в `plan`
             *
             *     Для нетарифицируемых лимитов значение всегда `null`
             * @description @type Array<Bank_2\Types\Subscriptions\Limit\Name, int>
             */
            limitUsedByName?: (string | number)[] | null;
            /** Типы лимитов */
            limitTypeByName?: (string | number)[] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
