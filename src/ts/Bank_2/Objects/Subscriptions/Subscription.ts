/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Информация о текущей подписки пользователя и ее лимитах
         *
         *     @see jetbrains://idea/navigate/reference?project=topvisor-com&fqn=Services\Bank_2\Objects\Subscriptions\Subscription */
        "Bank_2.Objects.Subscriptions.Subscription": {
            /** id платежа, подписки */
            paymentId: number;
            /** Платежная система */
            paymentSystem: string;
            /** Id платежа в платежной системе */
            externalPaymentId: string;
            /** Id реквизитов юр. лица, указанные при оплате */
            paymentRequisitesId: string;
            /** Стоимость амортизации
             *
             *     Используется для расчета первого платежа при переподписки на другой план
             *
             *     Указывается в валюте подписки */
            depreciationCost: number;
            /** Текущий план подписки */
            plan: import('./Plan.ts').components['schemas']['Bank_2.Objects.Subscriptions.Plan'];
            /** Следующий план подписки */
            nextPlan?: import('./Plan.ts').components['schemas']['Bank_2.Objects.Subscriptions.Plan'] | null;
            /** Состояние подписки */
            recurrentState: import('../Requisites/Payment/RecurrentState.ts').components['schemas']['Bank_2.Objects.Requisites.Payment.RecurrentState'];
            /** Текущий цикл для подписки */
            cycle: import('../../Types/Subscriptions/Cycle.ts').components['schemas']['Bank_2.Types.Subscriptions.Cycle'];
            /** Цикл для следующей подписки */
            nextCycle: import('../../Types/Subscriptions/Cycle.ts').components['schemas']['Bank_2.Types.Subscriptions.Cycle'];
            /** Стоимость текущей подписки */
            price: number;
            /** Стоимость продления подписки */
            renewPrice: number;
            /** Использованные лимиты
             *
             *     Доступные лимиты см. в `plan`
             *
             *     Для нетарифицируемых лимитов значение всегда `null` */
            limitUsedByName: {
                positions_check?: number;
                positions_check_manual?: number;
                keywords_volumes?: number;
                keywords_collect?: number;
                positions_tasks?: number;
                projects?: number;
                projects_rights?: number;
                projects_competitors?: number;
                projects_archive?: number;
                api?: number;
            };
            /** Типы лимитов */
            limitTypeByName: {
                positions_check?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
                positions_check_manual?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
                keywords_volumes?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
                keywords_collect?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
                positions_tasks?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
                projects?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
                projects_rights?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
                projects_competitors?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
                projects_archive?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
                api?: import('../../Types/Subscriptions/Limit/Type.ts').components['schemas']['Bank_2.Types.Subscriptions.Limit.Type'];
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
