/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Получение сводок индексации для графика */
        "Audit_2.Methods.Indexing.Summary.Chart.Get": {
            /** Произвольные даты без диапазона */
            dates: (string | number)[];
            searcher_key?: components["schemas"]["Audit_2.Types.Indexing.SearcherKey"] | null;
            /** Отобразить количество изменений */
            show_counts_changes?: boolean;
            /** Отобразить количество страниц в индексе */
            show_counts_in_index?: boolean;
            /** Отобразить количество проверенных страниц */
            show_counts_all?: boolean;
            /**
             * Вернуть данные в формате для графика
             *
             *     Недокументируемый параметр
             * @description @private
             */
            forChart?: boolean;
            project_id: components["schemas"]["project_id"];
            filters?: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
        };
        /**
         * Id поисковой системы для индексации
         * @enum {string}
         */
        "Audit_2.Types.Indexing.SearcherKey": "0" | "1" | "5";
        /** ID проекта */
        project_id: number;
        /**
         * Список фильтров по полям объекта
         *
         *     {name: string, operator: Field::AVAILABLE_OPERATORS, values: array}
         *
         *     Использует поля модели
         *
         *     Поля обязатлеьное, если $id не указан
         * @description @see AbstractMethod::MODEL
         *     @see Field::AVAILABLE_OPERATORS
         */
        filters: (string | number)[];
        /** Id объекта, для фильтрации объектов по id
         *
         *     Только для моделей с полем id */
        id: number | null;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
