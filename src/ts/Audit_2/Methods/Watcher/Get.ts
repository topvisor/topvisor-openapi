/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Получение результатов проверок радара
         *
         *     Отчет генерируется на основе объектов urls
         *
         *     Необходимо указать либо check_id1 и check_id2, либо checks_ids (вместе указывать нельзя)
         *
         *     @see jetbrains://idea/navigate/reference?project=topvisor-com&fqn=Services\Audit_2\Methods\Watcher\Get */
        "Audit_2.Methods.Watcher.Get": {
            /** ID проверок в произвольном порядке */
            checks_ids?: unknown[] | null;
            /** ID проверки начала диапазона */
            check_id1?: number | null;
            /** ID проверки конца диапазона */
            check_id2?: number | null;
            /** @default 7 */
            type_range?: import('../../Types/Watcher/TypeRange.ts').components['schemas']['Audit_2.Types.Watcher.TypeRange'];
            /**
             * Максимальное число возвращаемых проверок (не более 60)
             * @default 60
             */
            count_ids?: number;
            watcher_type: import('../../Types/Watcher/Type.ts').components['schemas']['Audit_2.Types.Watcher.Type'];
            /**
             * Выбор столбцов данных с результатами проверки
             * @default [
             *       "http_codes",
             *       "redirects"
             *     ]
             */
            watcher_fields?: unknown[];
            /** Добавить в результат заголовки отчета */
            show_headers?: boolean;
            show_diff?: import('../../Types/Watcher/ShowDiff.ts').components['schemas']['Audit_2.Types.Watcher.ShowDiff'];
            /** Добавить в результат количество проверок */
            show_counts_watcher?: boolean;
            project_id: import('../../../TV/API/Params/ProjectIdTrait.ts').components['schemas']['TV.API.Params.ProjectIdTrait']['project_id'];
            fields?: import('../../../TV/API/Params/FieldsTrait.ts').components['schemas']['TV.API.Params.FieldsTrait']['fields'];
            filters?: import('../../../TV/API/Params/FiltersTrait.ts').components['schemas']['TV.API.Params.FiltersTrait']['filters'];
            id?: import('../../../TV/API/Params/FiltersTrait.ts').components['schemas']['TV.API.Params.FiltersTrait']['id'];
            limit?: import('../../../TV/API/Params/LimitTrait.ts').components['schemas']['TV.API.Params.LimitTrait']['limit'];
            orders?: import('../../../TV/API/Params/OrdersTrait.ts').components['schemas']['TV.API.Params.OrdersTrait']['orders'];
            offset?: import('../../../TV/API/Params/OffsetTrait.ts').components['schemas']['TV.API.Params.OffsetTrait']['offset'];
        };
        /** Генерируемый на основе urls, список результатов проверок радара */
        "Audit_2.Methods.Watcher.Get.Exec": ({
            urls: {
                id: number;
                url: string;
                "\"COUNT(*)\""?: number;
                "\"WATCHER_HTTP_CODES_HUNDREDS()\""?: number[];
                project_id?: number;
                sitemap?: boolean;
                audit?: boolean;
                watcher?: boolean;
                indexing?: boolean;
                tags?: string[] | string;
                sitemap_lastmod?: string;
                sitemap_changefreq?: string;
                sitemap_priority?: number;
                indexing_data?: number;
                indexing_alert?: number;
                watcher_http_codes?: number[];
                watcher_http_codes_changed?: number;
                watcher_redirects?: string[];
                watcher_h1?: string;
                watcher_h1_changed?: number;
                watcher_title?: string;
                watcher_title_changed?: number;
                watcher_description?: string;
                watcher_description_changed?: number;
                watcher_content?: string;
                watcher_content_changed?: number;
                watcherData?: {
                    [key: string]: {
                        http_codes?: number[];
                        redirects?: string[];
                        h1?: string;
                        title?: string;
                        description?: string;
                        content?: string;
                        diff?: string | null;
                    };
                };
            }[];
            headers?: {
                fields: {
                    name: string;
                    alias: string;
                    qualifiers: string[] | string;
                    label: string | null;
                    labelData: {
                        label: string;
                        tooltip: string;
                        hint: string;
                    };
                }[];
                timesByChecksIds: {
                    [key: string]: number;
                };
                watcherFields: string[];
                watcherType: string;
            };
            countsWatcher?: {
                [key: string]: number;
            };
        } | null) | null;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
