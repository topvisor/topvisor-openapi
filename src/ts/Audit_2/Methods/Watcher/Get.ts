/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Получение результатов проверок радара
         * @description Отчет генерируется на основе объектов urls
         *
         *     Необходимо указать либо check_id1 и check_id2, либо checks_ids (вместе указывать нельзя)
         */
        "Audit_2.Methods.Watcher.Get": {
            /** ID проверок в произвольном порядке */
            checks_ids?: (string | number)[] | null;
            /** ID проверки начала диапазона */
            check_id1?: number | null;
            /** ID проверки конца диапазона */
            check_id2?: number | null;
            /** @default 7 */
            type_range: components["schemas"]["Audit_2.Types.Watcher.TypeRange"];
            /**
             * Максимальное число возвращаемых проверок (не более 60)
             * @default 60
             */
            count_ids: number;
            watcher_type: components["schemas"]["Audit_2.Types.Watcher.Type"];
            /**
             * Выбор столбцов данных с результатами проверки
             * @default [
             *       "http_codes",
             *       "redirects"
             *     ]
             */
            watcher_fields: (string | number)[];
            /** Добавить в результат заголовки отчета */
            show_headers: boolean;
            show_diff: components["schemas"]["Audit_2.Types.Watcher.ShowDiff"];
            /** Добавить в результат количество проверок */
            show_counts_watcher: boolean;
            project_id: components["schemas"]["project_id"];
            fields: components["schemas"]["fields"];
            filters: components["schemas"]["filters"];
            id?: components["schemas"]["id"];
            limit?: components["schemas"]["limit"];
            orders: components["schemas"]["orders"];
            offset: components["schemas"]["offset"];
        };
        /**
         * Тип диапазона радара
         * @enum {integer}
         */
        "Audit_2.Types.Watcher.TypeRange": 0 | 2 | 3 | 4 | 7 | 100;
        /**
         * Тип проверки радара
         * @enum {string}
         */
        "Audit_2.Types.Watcher.Type": "http_codes" | "redirects" | "h1" | "title" | "description" | "content";
        /**
         * Добавить в результат различия данных
         * @enum {integer}
         */
        "Audit_2.Types.Watcher.ShowDiff": 0 | 1 | 2 | 3;
        /** ID проекта */
        project_id: number;
        /**
         * Список полей объекта, которые надо вернуть в результате
         * @description Если запрос поддерижвает параметр fetch_style, формат ответа может быть разным, fields будет влиять на содержание данных в этом ответе
         *
         *     Использует поля модели
         *
         *     @see AbstractMethod::MODEL
         */
        fields: (string | number)[];
        /**
         * Список фильтров по полям объекта
         * @description {name: string, operator: Field::AVAILABLE_OPERATORS, values: array}
         *
         *     Использует поля модели
         *
         *     Поля обязатлеьное, если $id не указан
         *
         *     @see AbstractMethod::MODEL
         *     @see Field::AVAILABLE_OPERATORS
         */
        filters: (string | number)[];
        /**
         * Id объекта, для фильтрации объектов по id
         * @description Только для моделей с полем id
         */
        id: number | null;
        /**
         * Количество объектов, которые необходимо получить в результате
         * @description Используется в паре с offset
         */
        limit: number | null;
        /**
         * Список полей объекта, по которым необходимо выполнить сортировку
         * @description Поля могут быть строками или объектом: {name: string, direction: 'ASC' | 'DESC', orderValues: array}
         *
         *     Использует поля модели
         *
         *     @see AbstractMethod::MODEL
         */
        orders: (string | number)[];
        /**
         * Число объектов, которое необходимо пропустить при получении резальтата
         * @description Используется в паре с limit
         */
        offset: number;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
