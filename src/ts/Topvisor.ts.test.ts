/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/add/analytics_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Фиксация события */
        post: operations["AddAnalytics2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/app_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Получение заархивированного приложения */
        post: operations["GetApp2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/add/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Создать платежку и перейти к оплате
         * @description Возвратит id платежа, если указан параметр $return_id = true
         *
         *     Произведет редирект, если настроена форма оплаты на стороне платежной системы
         *
         *     Возвратит информацию о платеже, если ожидается вывод формы оплаты на сайте
         *
         *     При ошибке произведет редирект на страницу с инофрмацией об ошибке
         */
        post: operations["AddPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Получить список платежей */
        post: operations["GetPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/qr_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Генерирует QR код по тексту
         * @description Возвращает изображение в формате data:image/png;base64
         */
        post: operations["GetQr2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/app_2/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Получение данных подтверждения
         * @description Возвращает результат подтверждения в виде
         *     массива с сообщением (acceptAction),
         *     логической переменной (acceptEmail),
         *     null при неправильно введенном типе
         */
        post: operations["GetApp2Actions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/app_2/privacy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Получить текст политики конфиденциальности */
        post: operations["GetApp2Privacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/example_2/array/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Метод с примерами параметров типа Enum
         * @description Возвращает ассоциативный результирующий массив, с данными, переданными в метод
         */
        post: operations["GetExample2Array"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/example_2/custom/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Получение текущего времени */
        post: operations["GetExample2Custom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/example_2/enum/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Метод с примерами параметров типа Enum
         * @description Возвращает ассоциативный результирующий массив, с данными, переданными в метод
         */
        post: operations["GetExample2Enum"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/example_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Получение списка проектов */
        post: operations["GetExample2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/openapi_2/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Создать Open API схемы и скачать в zip
         * @description В результате вернет zip файл в потоке вывода
         *
         *     @see https://editor.swagger.io/ Редактор Open API
         */
        post: operations["GetOpenapi2Download"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/payments_2/companies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Компании пользователя, через которых, были совершены платежи */
        post: operations["GetPayments2Companies"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit/payments_2/contractsign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Подписать контракт (только для админов) */
        post: operations["EditPayments2Contractsign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edit/payments_2/nextrequisitesid/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Изменить платежные реквизиты тарифа */
        post: operations["EditPayments2Nextrequisitesid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/add/payments_2/urtinkoffcreateapplication/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Отправить заявка на подключение Тинькофф Бизнес */
        post: operations["AddPayments2Urtinkoffcreateapplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get/payments_2/validatemerchantcardap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Валидация домена для подтверждения оплаты Apple Pay (system = card_ap) */
        post: operations["GetPayments2Validatemerchantcardap"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AddAnalytics2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": import('./Analytics_2/Methods/Add.ts').components['schemas']['Analytics_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: number;
                        model?: unknown;
                    };
                };
            };
        };
    };
    GetApp2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": import('./App_2/Methods/Get.ts').components['schemas']['App_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Add.ts').components['schemas']['Payments_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: unknown;
                        model?: unknown;
                    };
                };
            };
        };
    };
    GetPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Get.ts').components['schemas']['Payments_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: (string | number)[];
                        model?: import('./Models/Payments.ts').components['schemas']['Models.Payments'];
                    } & import('./Pagination.ts').components['schemas']['Pagination'];
                };
            };
        };
    };
    GetQr2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Qr_2/Methods/Get.ts').components['schemas']['Qr_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: string;
                        model?: unknown;
                    };
                };
            };
        };
    };
    GetApp2Actions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./App_2/Methods/Actions/Get.ts').components['schemas']['App_2.Methods.Actions.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: unknown;
                        model?: unknown;
                    };
                };
            };
        };
    };
    GetApp2Privacy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": import('./App_2/Methods/Privacy/Get.ts').components['schemas']['App_2.Methods.Privacy.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: import('./Controller_2/Objects/Page.ts').components['schemas']['Controller_2.Objects.Page'];
                        model?: unknown;
                    };
                };
            };
        };
    };
    GetExample2Array: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Array/Get.ts').components['schemas']['Example_2.Methods.Array.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: (string | number)[];
                        model?: unknown;
                    } & import('./Pagination.ts').components['schemas']['Pagination'];
                };
            };
        };
    };
    GetExample2Custom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Custom/Get.ts').components['schemas']['Example_2.Methods.Custom.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: string;
                        model?: unknown;
                    };
                };
            };
        };
    };
    GetExample2Enum: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Enum/Get.ts').components['schemas']['Example_2.Methods.Enum.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: (string | number)[];
                        model?: unknown;
                    } & import('./Pagination.ts').components['schemas']['Pagination'];
                };
            };
        };
    };
    GetExample2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": import('./Example_2/Methods/Projects/Get.ts').components['schemas']['Example_2.Methods.Projects.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: (string | number)[];
                        model?: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                    } & import('./Pagination.ts').components['schemas']['Pagination'];
                };
            };
        };
    };
    GetOpenapi2Download: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./OpenAPI_2/Methods/Download/Get.ts').components['schemas']['OpenAPI_2.Methods.Download.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetPayments2Companies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": import('./Payments_2/Methods/Companies/Get.ts').components['schemas']['Payments_2.Methods.Companies.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: (string | number)[];
                        model?: unknown;
                    };
                };
            };
        };
    };
    EditPayments2Contractsign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/ContractSign/Edit.ts').components['schemas']['Payments_2.Methods.ContractSign.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: number;
                        model?: unknown;
                    };
                };
            };
        };
    };
    EditPayments2Nextrequisitesid: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/NextRequisitesId/Edit.ts').components['schemas']['Payments_2.Methods.NextRequisitesId.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: number;
                        model?: unknown;
                    };
                };
            };
        };
    };
    AddPayments2Urtinkoffcreateapplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": import('./Payments_2/Methods/UrTinkoffCreateApplication/Add.ts').components['schemas']['Payments_2.Methods.UrTinkoffCreateApplication.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: number;
                        model?: unknown;
                    };
                };
            };
        };
    };
    GetPayments2Validatemerchantcardap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/ValidateMerchantCardAP/Get.ts').components['schemas']['Payments_2.Methods.ValidateMerchantCardAP.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import('./Response.ts').components['schemas']['Response'] & {
                        result?: (string | number)[];
                        model?: unknown;
                    };
                };
            };
        };
    };
}
