/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {  
    /** Фиксация события */
    "/add/analytics_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAnalytics2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление примечания */
    "/add/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Удаление примечания */
    "/del/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Редактирование примечания */
    "/edit/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение примечаний */
    "/get/annotations_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAnnotations2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение заархивированного приложения */
    "/get/app_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавление комментария */
    "/add/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Удаление комментария
     * @description Удалять комментарии можно только в течение ограниченного времени
     *
     *     Админы могут удалять комментарии в любое время
     */
    "/del/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DelComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Изменение комментария
     * @description Изменять комментарий можно только в течение ограниченного времени
     */
    "/edit/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение комментариев
     * @description Возвращает набор комментариев со всеми подкомменатриями, limit, offset не виляют на получение вложенных комментариев
     */
    "/get/comments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetComments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Создать платежку и перейти к оплате
     * @description Возвратит id платежа, если указан параметр $return_id = true
     *
     *     Произведет редирект, если настроена форма оплаты на стороне платежной системы
     *
     *     Возвратит информацию о платеже, если ожидается вывод формы оплаты на сайте
     *
     *     При ошибке произведет редирект на страницу с инофрмацией об ошибке
     */
    "/add/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить список платежей */
    "/get/payments_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Генерирует QR код по тексту
     * @description Возвращает изображение в формате data:image/png;base64
     */
    "/get/qr_2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetQr2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение всех своих примечаний по всем проектам и сервисам */
    "/get/annotations_2/my/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAnnotations2My"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получение данных подтверждения
     * @description Возвращает результат подтверждения в виде
     *     массива с сообщением (acceptAction),
     *     логической переменной (acceptEmail),
     *     null при неправильно введенном типе
     */
    "/get/app_2/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2Actions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить текст политики конфиденциальности */
    "/get/app_2/privacy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetApp2Privacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Редактирование статуса лайка для комментария
     * @description Возвращает результат редактирования статуса лайка
     */
    "/edit/comments_2/like/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditComments2Like"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить настройки автора */
    "/edit/content_2/authors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditContent2Authors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение данных об авторе */
    "/get/content_2/authors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContent2Authors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Enum */
    "/get/example_2/array/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Array"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение текущего времени */
    "/get/example_2/custom/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Custom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Метод с примерами параметров типа Enum */
    "/get/example_2/enum/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Enum"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получение списка проектов */
    "/get/example_2/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetExample2Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Создать Open API схемы и скачать в zip
     * @description В результате вернет zip файл в потоке вывода
     *
     *     @see https://editor.swagger.io/ Редактор Open API
     */
    "/get/openapi_2/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetOpenapi2Download"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Компании пользователя, через которых, были совершены платежи */
    "/get/payments_2/companies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2Companies"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Подписать контракт (только для админов) */
    "/edit/payments_2/contractsign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2Contractsign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить платежные реквизиты тарифа */
    "/edit/payments_2/nextrequisitesid/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2Nextrequisitesid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отправить заявка на подключение Тинькофф Бизнес */
    "/add/payments_2/urtinkoffcreateapplication/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddPayments2Urtinkoffcreateapplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Валидация домена для подтверждения оплаты Apple Pay (system = card_ap) */
    "/get/payments_2/validatemerchantcardap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetPayments2Validatemerchantcardap"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавить промокоды к достижению */
    "/add/admin_2/users/promocodes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2UsersPromocodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * Получить промокоды
     * @description В params хранится строка в формате:
     *     - {{ rank_id }}
     *     - {{ rank_id }},single_code - для многоразового кода
     */
    "/get/admin_2/users/promocodes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersPromocodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Добавить достижение */
    "/add/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Изменить достижение */
    "/edit/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Получить достижения */
    "/get/admin_2/users/ranks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersRanks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Отписаться от тарифа, оплаченного картой */
    "/edit/payments_2/tariff/delcard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffDelcard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Настройка оплаты тарифов: выставлять ли счета через диадок */
    "/edit/payments_2/tariff/nexttodiadoc/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffNexttodiadoc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Сменить тариф со следующего месяца */
    "/edit/payments_2/tariff/setnext/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditPayments2TariffSetnext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /** Привязка email к аккаунту */
    "/add/users_2/join/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AddUsers2JoinEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };  
    /**
     * График с количеством подписок на рубрики с сегментцией по способам рассылки
     * @description График кешируется, первый запрос может выполняться дольше
     */
    "/get/admin_2/users/informer/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetAdmin2UsersInformerSubscriptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AddAnalytics2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Analytics_2/Methods/Add.ts').components['schemas']['Analytics_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/Add.ts').components['schemas']['Annotations_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/Del.ts').components['schemas']['Annotations_2.Methods.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/Edit.ts').components['schemas']['Annotations_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAnnotations2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/Get.ts').components['schemas']['Annotations_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Models/Annotations.ts').components['schemas']['Models.Annotations'][];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Annotations.ts').components['schemas']['Models.Annotations'];
                };
            };
        };
    };
    GetApp2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./App_2/Methods/Get.ts').components['schemas']['App_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    AddComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Add.ts').components['schemas']['Comments_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Id вставленного комментария */
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    DelComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Del.ts').components['schemas']['Comments_2.Methods.Del'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Edit.ts').components['schemas']['Comments_2.Methods.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetComments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Get.ts').components['schemas']['Comments_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Add.ts').components['schemas']['Payments_2.Methods.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetPayments2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Get.ts').components['schemas']['Payments_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Payments.ts').components['schemas']['Models.Payments'];
                };
            };
        };
    };
    GetQr2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Qr_2/Methods/Get.ts').components['schemas']['Qr_2.Methods.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAnnotations2My: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Annotations_2/Methods/My/Get.ts').components['schemas']['Annotations_2.Methods.My.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Models/Annotations.ts').components['schemas']['Models.Annotations'][];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Annotations.ts').components['schemas']['Models.Annotations'];
                };
            };
        };
    };
    GetApp2Actions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./App_2/Methods/Actions/Get.ts').components['schemas']['App_2.Methods.Actions.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetApp2Privacy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./App_2/Methods/Privacy/Get.ts').components['schemas']['App_2.Methods.Privacy.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Controller_2/Objects/Page.ts').components['schemas']['Controller_2.Objects.Page'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditComments2Like: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Comments_2/Methods/Like/Edit.ts').components['schemas']['Comments_2.Methods.Like.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditContent2Authors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Authors/Edit.ts').components['schemas']['Content_2.Methods.Authors.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetContent2Authors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Content_2/Methods/Authors/Get.ts').components['schemas']['Content_2.Methods.Authors.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: unknown;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Content/Authors.ts').components['schemas']['Models.Content.Authors'];
                };
            };
        };
    };
    GetExample2Array: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Array/Get.ts').components['schemas']['Example_2.Methods.Array.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Ассоциативный результирующий массив, с данными, переданными в метод и результатом genSet() */
                        result: (string | number)[];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetExample2Custom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Custom/Get.ts').components['schemas']['Example_2.Methods.Custom.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: string;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetExample2Enum: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Enum/Get.ts').components['schemas']['Example_2.Methods.Enum.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Ассоциативный результирующий массив, с данными, переданными в метод */
                        result: (string | number)[];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetExample2Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Example_2/Methods/Projects/Get.ts').components['schemas']['Example_2.Methods.Projects.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Models/Projects.ts').components['schemas']['Models.Projects'][];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Projects.ts').components['schemas']['Models.Projects'];
                };
            };
        };
    };
    GetOpenapi2Download: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./OpenAPI_2/Methods/Download/Get.ts').components['schemas']['OpenAPI_2.Methods.Download.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    GetPayments2Companies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Companies/Get.ts').components['schemas']['Payments_2.Methods.Companies.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2Contractsign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/ContractSign/Edit.ts').components['schemas']['Payments_2.Methods.ContractSign.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2Nextrequisitesid: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/NextRequisitesId/Edit.ts').components['schemas']['Payments_2.Methods.NextRequisitesId.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddPayments2Urtinkoffcreateapplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/UrTinkoffCreateApplication/Add.ts').components['schemas']['Payments_2.Methods.UrTinkoffCreateApplication.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetPayments2Validatemerchantcardap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/ValidateMerchantCardAP/Get.ts').components['schemas']['Payments_2.Methods.ValidateMerchantCardAP.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: (string | number)[];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddAdmin2UsersPromocodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Promocodes/Add.ts').components['schemas']['Admin_2.Methods.Users.Promocodes.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @throws Exception */
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Users/Verif.ts').components['schemas']['Models.Users.Verif'];
                };
            };
        };
    };
    GetAdmin2UsersPromocodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Promocodes/Get.ts').components['schemas']['Admin_2.Methods.Users.Promocodes.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Models/Users/Verif.ts').components['schemas']['Models.Users.Verif'][];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Users/Verif.ts').components['schemas']['Models.Users.Verif'];
                };
            };
        };
    };
    AddAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Ranks/Add.ts').components['schemas']['Admin_2.Methods.Users.Ranks.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Users/Ranks.ts').components['schemas']['Models.Admin.Users.Ranks'];
                };
            };
        };
    };
    EditAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Ranks/Edit.ts').components['schemas']['Admin_2.Methods.Users.Ranks.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Users/Ranks.ts').components['schemas']['Models.Admin.Users.Ranks'];
                };
            };
        };
    };
    GetAdmin2UsersRanks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Ranks/Get.ts').components['schemas']['Admin_2.Methods.Users.Ranks.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: import('./Models/Admin/Users/Ranks.ts').components['schemas']['Models.Admin.Users.Ranks'][];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess'] & import('./Pagination.ts').components['schemas']['Pagination']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: import('./Models/Admin/Users/Ranks.ts').components['schemas']['Models.Admin.Users.Ranks'];
                };
            };
        };
    };
    EditPayments2TariffDelcard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Tariff/DelCard/Edit.ts').components['schemas']['Payments_2.Methods.Tariff.DelCard.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffNexttodiadoc: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Tariff/NextToDiadoc/Edit.ts').components['schemas']['Payments_2.Methods.Tariff.NextToDiadoc.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    EditPayments2TariffSetnext: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Payments_2/Methods/Tariff/SetNext/Edit.ts').components['schemas']['Payments_2.Methods.Tariff.SetNext.Edit'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    AddUsers2JoinEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Users_2/Methods/Join/Email/Add.ts').components['schemas']['Users_2.Methods.Join.Email.Add'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** @throws Exception */
                        result: number;
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
    GetAdmin2UsersInformerSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import('./Admin_2/Methods/Users/Informer/Subscriptions/Get.ts').components['schemas']['Admin_2.Methods.Users.Informer.Subscriptions.Get'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        /** Данные для построения графика */
                        result: import('./TV/Objects/Highcharts/Chart.ts').components['schemas']['TV.Objects.Highcharts.Chart'];
                    } & import('./ResponseSuccess.ts').components['schemas']['ResponseSuccess']) | import('./ResponseError.ts').components['schemas']['ResponseError'];
                    model: null;
                };
            };
        };
    };
}
